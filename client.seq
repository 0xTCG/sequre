import utils.param as param
from mpc_env import MPCEnv
from utils.utils import get_address

from test_protocol import test_protocol
from logireg_protocol import logireg_protocol

cimport fork() -> int
cimport unlink(str) -> int


protocols: dict[str, function[bool, MPCEnv[param.size_u], int, bool]] = {
    # 'gwas': None,
    'logireg': logireg_protocol[param.size_u],
    'test': test_protocol[param.size_u]
}


def client[TP](pid: int, protocol_func: function[bool, MPCEnv[TP], int, bool]):
    # Initialize MPC environment
    mpc = MPCEnv[TP](pid)
    print(f"Initialized MPC for {pid}")

    success: bool = protocol_func(mpc, pid, True)

    # This is here just to keep P0 online until the end for data transfer
    # In practice, P0 would send data in advance before each phase and go offline
    if (pid == 0):
        b: bool = mpc.comms.receive_bool(2)
    elif (pid == 2): mpc.comms.send_bool(True, 0)

    mpc.comms.clean_up()

    # if (success): print(f"Protocol successfully completed for {pid}")
    # else: raise ValueError(f"Protocol abnormally terminated for {pid}")

    print(f'{pid} is done!')


def invoke[TP](protocol_func: function[bool, MPCEnv[TP], int, bool]):
    for port in param.ALL_PORTS:
        address: str = get_address(port)
        unlink(address)

    client_func = client[TP](..., protocol_func=protocol_func)
    pid: int = fork()

    if (pid == 0):
        client_func(0)
    else:
        pid: int = fork()
        if (pid == 0): client_func(1)
        else: client_func(2)
    
    # TODO: Remove unused processes.


import sys
args = sys.argv[1:]

invoke[param.size_u](protocols[args[0]])
