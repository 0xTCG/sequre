import time

import sequre.utils.param as param
from sequre.mpc.env import MPCEnv
from sequre.utils.utils import get_address

from protocols.test import tests_protocol, benchmarks_protocol

from C import fork() -> int
from C import wait(cobj) -> int
from C import unlink(str) -> int


def client[TP](pid, protocol_func, control_flag, local, modulus):
    # Initialize MPC environment
    mpc = MPCEnv[TP](pid, local)
    print(f"Initialized MPC for {pid}")

    protocol_func(mpc, control_flag, modulus)

    # This is here just to keep P0 online until the end for data transfer
    # In practice, P0 would send data in advance before each phase and go offline
    mpc.done()


def invoke[TP](protocol_func, pid, control_flag, local, modulus):
    for port in param.ALL_PORTS:
        address = get_address(port)
        unlink(address)

    if local:
        pid_0 = fork()
        status = 0

        if (pid_0 == 0): client[TP](0, protocol_func, control_flag, local, modulus)
        else:
            pid_1: int = fork()
            if (pid_1 == 0): client[TP](1, protocol_func, control_flag, local, modulus)
            else:
                s = time.time()
                client[TP](2, protocol_func, control_flag, local, modulus)
                e = time.time()
                print(f'Total client runtime: {e - s}s')
                wait(ptr[byte](__ptr__(status).as_byte()))
    else:
        s = time.time()
        client[TP](pid, protocol_func, control_flag, local, modulus)
        e = time.time()
        print(f'Total client runtime: {e - s}s')

import sys
command: list[str] = sys.argv[1:]
flags: list[str] = [arg for arg in command if arg.startswith('--')]
args: list[str] = [arg for arg in command if arg not in flags]

unit_tests: bool = '--unit' in flags
use_ring: bool = '--use-ring' in flags
local: bool = '--local' in flags
modulus: param.int_t = param.RING_SIZE if use_ring else param.FIELD_SIZE
assert local or len(args) >= 2, f"Non-local run: No CP ID provided.\n\tMake sure to add CP ID to your command {' '.join(command)} <cpid>"
pid: int = 0 if local else int(args[1])

supported_calls = ['run-tests', 'run-benchmarks', 'run-playground']

match args[0]:
    case supported_calls[0]: invoke[param.int_t](tests_protocol[param.int_t], pid, unit_tests, local, modulus)
    case supported_calls[1]: invoke[param.int_t](benchmarks_protocol[param.int_t], pid, False, local, modulus)
    case supported_calls[2]: invoke[param.int_t](benchmarks_protocol[param.int_t], pid, True, local, modulus)
    case _: raise NotImplementedError(f'Invalid client call: {args[0]}. Should be in {supported_calls}')
