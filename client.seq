import sequre.utils.param as param
from sequre.mpc.env import MPCEnv
from sequre.utils.utils import get_address

from protocols.test import tests_protocol, benchmarks_protocol

from C import fork() -> int
from C import wait(cobj) -> int
from C import unlink(str) -> int


def client[TP](pid, protocol_func, control_flag, modulus):
    # Initialize MPC environment
    mpc = MPCEnv[TP](pid)
    print(f"Initialized MPC for {pid}")

    protocol_func(mpc, control_flag, modulus)

    # This is here just to keep P0 online until the end for data transfer
    # In practice, P0 would send data in advance before each phase and go offline
    mpc.comms.sync_parties()
    mpc.comms.clean_up()

    print(f'CP{pid} is done!')


def invoke[TP](protocol_func, control_flag, modulus):
    for port in param.ALL_PORTS:
        address = get_address(port)
        unlink(address)

    pid_0 = fork()
    status = 0

    if (pid_0 == 0): client[TP](0, protocol_func, control_flag, modulus)
    else:
        pid_1: int = fork()
        if (pid_1 == 0): client[TP](1, protocol_func, control_flag, modulus)
        else:
            import time
            s = time.time()
            client[TP](2, protocol_func, control_flag, modulus)
            e = time.time()
            print(f'Total client runtime: {e - s}s')
            wait(ptr[byte](__ptr__(status).as_byte()))

import sys
predefined_flags: list[str] = ['--use-ring', '--unit']
command: list[str] = sys.argv[1:]
flags: list[str] = [arg for arg in command if arg.startswith('--')]
assert len(flags) <= 1, f"Either one of {predefined_flags} flags is supported. Not both. Tests are ran on both rings and fields implicitly."
args: list[str] = [arg for arg in sys.argv[1:] if arg not in flags]

unit_tests: bool = '--unit' in flags
use_ring: bool = '--use-ring' in flags
modulus: param.int_t = param.RING_SIZE if use_ring else param.FIELD_SIZE

supported_calls = ['run-tests', 'run-benchmarks', 'run-playground']

match args[0]:
    case supported_calls[0]: invoke[param.int_t](tests_protocol[param.int_t], unit_tests, modulus)
    case supported_calls[1]: invoke[param.int_t](benchmarks_protocol[param.int_t], False, modulus)
    case supported_calls[2]: invoke[param.int_t](benchmarks_protocol[param.int_t], True, modulus)
    case _: raise NotImplementedError(f'Invalid client call: {args[0]}. Should be in {supported_calls}')
