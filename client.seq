import utils.param as param
from mpc_env import MPCEnv
from utils.utils import get_address

from test_protocol import test_protocol
from logireg_protocol import logireg_protocol
# from gwas_protocol import gwas_protocol

from C import fork() -> int
from C import wait(cobj) -> int
from C import unlink(str) -> int

# Needs fixing
# protocols: dict[str, function[bool, MPCEnv[Int[320]], bool]] = {
#     'gwas': gwas_protocol[Int[320]],
#     'logireg': logireg_protocol[Int[320]],
#     'test': test_protocol[Int[320]]
# }

def client[TP](pid: int, protocol_func: function[bool, MPCEnv[TP], bool], test_env: bool):
    # Initialize MPC environment
    mpc = MPCEnv[TP](pid)
    print(f"Initialized MPC for {pid}")

    success: bool = protocol_func(mpc, test_env)

    # This is here just to keep P0 online until the end for data transfer
    # In practice, P0 would send data in advance before each phase and go offline
    if (pid == 0):
        b: bool = mpc.comms.receive_bool(2)
    elif (pid == 2): mpc.comms.send_bool(True, 0)

    mpc.comms.clean_up()

    # if (success): print(f"Protocol successfully completed for {pid}")
    # else: raise ValueError(f"Protocol abnormally terminated for {pid}")

    print(f'{pid} is done!')


def invoke[TP](protocol_func: function[bool, MPCEnv[TP], bool], test_env: bool):
    for port in param.ALL_PORTS:
        address = get_address(port)
        unlink(address)

    client_func = client[TP](..., protocol_func=protocol_func, test_env=test_env)
    pid_0 = fork()
    status = 0

    if (pid_0 == 0): client_func(0)
    else:
        pid_1: int = fork()
        if (pid_1 == 0): client_func(1)
        else:
            client_func(2)
            wait(ptr[byte](__ptr__(status).as_byte()))

import sys
args = sys.argv[1:]
predefined_flags: list[str] = ['--test-run']
test_env: bool = '--test-run' in args

args: list[str] = [arg for arg in args if arg not in predefined_flags]

match args[0]:
    # case 'gwas': invoke[Int[320]](gwas_protocol[Int[320]], test_env)
    case 'logireg': invoke[Int[320]](logireg_protocol[Int[320]], test_env)
    case 'test': invoke[Int[320]](test_protocol[Int[320]], test_env)
# invoke[Int[320]](protocols[args[0]], test_env)
