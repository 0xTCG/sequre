import utils.param as param

from mpc_prg import MPCPRG
from mpc_comms import MPCComms
from utils.utils import rand_vec, rand_mat, rand_int

class MPCArithmetic[TP]:
    pid: int
    prg: MPCPRG
    comms: MPCComms[TP]
    
    def __init__(self: MPCArithmetic[TP], pid: int, prg: MPCPRG, comms: MPCComms[TP]):
        self.pid = pid
        self.prg = prg
        self.comms = comms

    def add_public[CT](self: MPCArithmetic[TP], x: CT, a: CT, field: TP = param.BASE_P) -> CT:
        if self.pid == 1:
            return (x + a) % field
        return x
    
    def beaver_mult[CT](
            self: MPCArithmetic[TP], x_r: CT, r_1: CT,
            y_r: CT, r_2: CT, field: TP = param.BASE_P) -> CT:
        if self.pid == 0:
            return (r_1 * r_2) % field

        xy: CT = (x_r * r_2) % field
        xy += (r_1 * y_r) % field
        xy %= field
        
        if self.pid == 1:
            xy += (x_r * y_r) % field
            xy %= field

        return xy
    
    def beaver_mult_scalar[CT](
            self: MPCArithmetic[TP], x_r: CT, r_1: CT,
            y_r: TP, r_2: TP, field: TP = param.BASE_P) -> CT:
        if self.pid == 0:
            return (r_1 * r_2) % field

        xy: CT = (x_r * r_2) % field
        xy += (r_1 * y_r) % field
        xy %= field
        
        if self.pid == 1:
            xy += (x_r * y_r) % field
            xy %= field

        return xy
    
    def beaver_mult_mat(
            self: MPCArithmetic[TP], x_r: list[list[TP]], r_1: list[list[TP]],
            y_r: list[list[TP]], r_2: list[list[TP]], field: TP = param.BASE_P) -> list[list[TP]]:
        if self.pid == 0:
            return r_1.mult(r_2, field)

        xy = x_r.mult(r_2, field)
        xy += r_1.mult(y_r, field)
        xy %= field
        if self.pid == 1:
            xy += x_r.mult(y_r, field)
            xy %= field

        return xy

    def beaver_reconstruct_elem(self: MPCArithmetic[TP], elem: TP, field: TP = param.BASE_P) -> TP:
            if self.pid == 0:
                self.prg.switch_seed(1)
                mask: TP = rand_int(0, field - 1)
                self.prg.restore_seed(1)

                mm: TP = (elem - mask) % field
                self.comms.send_data(mm, 2)
                
                return mm
            elif self.pid == 1:
                self.prg.switch_seed(0)
                rr: TP = rand_int(0, field - 1)
                self.prg.restore_seed(0)
                
                return (elem + rr) % field
            else:
                rr = self.comms.receive_elem(0)
                    
                return (elem + rr) % field

    def beaver_reconstruct_vec(self: MPCArithmetic[TP], vec: list[TP], field: TP = param.BASE_P) -> list[TP]:
            if self.pid == 0:
                self.prg.switch_seed(1)
                mask: list[TP] = rand_vec(len(vec), field)
                self.prg.restore_seed(1)

                mm: list[TP] = (vec - mask) % field
                self.comms.send_data(mm, 2)
                
                return mm
            elif self.pid == 1:
                self.prg.switch_seed(0)
                rr: list[TP] = rand_vec(len(vec), field)
                self.prg.restore_seed(0)
                
                return (vec + rr) % field
            else:
                rr = self.comms.receive_vector(0, len(vec))
                    
                return (vec + rr) % field
    
    def beaver_reconstruct_mat(self: MPCArithmetic[TP], mat: list[list[TP]], field: TP = param.BASE_P) -> list[list[TP]]:
            shape: list[int] = mat.shape()
            
            if self.pid == 0:
                self.prg.switch_seed(1)
                mask: list[list[TP]] = rand_mat(shape, field)
                self.prg.restore_seed(1)

                mm: list[list[TP]] = (mat - mask) % field
                self.comms.send_data(mm, 2)
                
                return mm
            elif self.pid == 1:
                self.prg.switch_seed(0)
                rr: list[list[TP]] = rand_mat(shape, field)
                self.prg.restore_seed(0)
                
                return (mat + rr) % field
            else:
                rr = self.comms.receive_matrix(0, shape)
                    
                return (mat + rr) % field
    
    def beaver_partition_elem(self: MPCArithmetic[TP], x: TP, field: TP = param.BASE_P) -> tuple[TP, TP]:
        x_: TP = x % field
        x_r: TP = TP(0)

        if self.pid == 0:
            self.prg.switch_seed(1)
            r_1: TP = rand_int[TP](0, field - 1)
            self.prg.restore_seed(1)

            self.prg.switch_seed(2)
            r_2: TP = rand_int[TP](0, field - 1)
            self.prg.restore_seed(2)

            r: TP = (r_1 + r_2) % field
            return x_r, r
        else:
            self.prg.switch_seed(0)
            r: TP = rand_int[TP](0, field - 1)
            self.prg.restore_seed(0)
            
            x_r = (x_ - r) % field
            x_r = self.comms.reveal_elem(x_r, field=field)

            return x_r, r
    
    def beaver_partition_vec(self: MPCArithmetic[TP], x: list[TP], field: TP = param.BASE_P) -> tuple[list[TP], list[TP]]:
        x_: list[TP] = x % field
        x_len: int = len(x_)

        if self.pid == 0:
            self.prg.switch_seed(1)
            r_1: list[TP] = rand_vec(x_len, field)
            self.prg.restore_seed(1)

            self.prg.switch_seed(2)
            r_2: list[TP] = rand_vec(x_len, field)
            self.prg.restore_seed(2)

            r: list[TP] = (r_1 + r_2) % field
            return [TP(0) for _ in range(x_len)], r
        else:
            self.prg.switch_seed(0)
            r: list[TP] = rand_vec(x_len, field)
            self.prg.restore_seed(0)
            
            x_r = (x_ - r) % field
            x_r = self.comms.reveal_vector(x_r, field=field)
        
            return x_r, r

    def beaver_partition_mat(self: MPCArithmetic[TP], x: list[list[TP]], field: TP = param.BASE_P) -> tuple[list[list[TP]], list[list[TP]]]:
        x_: list[list[TP]] = x % field
        shape: list[int] = x_.shape()

        if self.pid == 0:
            self.prg.switch_seed(1)
            r_1: list[list[TP]] = rand_mat(shape, field)
            self.prg.restore_seed(1)

            self.prg.switch_seed(2)
            r_2: list[list[TP]] = rand_mat(shape, field)
            self.prg.restore_seed(2)

            r: list[list[TP]] = (r_1 + r_2) % field
            return [[TP(0) for _ in range(shape[1])] for _ in range(shape[0])], r
        else:
            self.prg.switch_seed(0)
            r: list[list[TP]] = rand_mat(shape, field)
            self.prg.restore_seed(0)
            
            x_r = (x_ - r) % field
            x_r = self.comms.reveal_matrix(x_r, field=field)
        
            return x_r, r
    
    def multiply_elem(self: MPCArithmetic[TP], a: TP, b: TP, field: TP = param.BASE_P) -> TP:
        x_1_r, r_1 = self.beaver_partition_elem(a, field)
        x_2_r, r_2 = self.beaver_partition_elem(b, field)
        
        c = self.beaver_mult[TP](x_1_r, r_1, x_2_r, r_2, field)
        c = self.beaver_reconstruct_elem(c, field)
        
        return c

    def multiply_vec(self: MPCArithmetic[TP], a: list[TP], b: list[TP], field: TP = param.BASE_P) -> list[TP]:
        x_1_r, r_1 = self.beaver_partition_vec(a, field)
        x_2_r, r_2 = self.beaver_partition_vec(b, field)
        
        c = self.beaver_mult[list[TP]](x_1_r, r_1, x_2_r, r_2, field)
        c = self.beaver_reconstruct_vec(c, field)
        
        return c

    def multiply_mat(self: MPCArithmetic[TP], a: list[list[TP]], b: list[list[TP]], field: TP = param.BASE_P) -> list[list[TP]]:
        x_1_r, r_1 = self.beaver_partition_mat(a, field)
        x_2_r, r_2 = self.beaver_partition_mat(b, field)

        c = self.beaver_mult[list[list[TP]]](x_1_r, r_1, x_2_r, r_2, field)
        c = self.beaver_reconstruct_mat(c, field)

        return c
    
    def multiply_matmul(self: MPCArithmetic[TP], a: list[list[TP]], b: list[list[TP]], field: TP = param.BASE_P) -> list[list[TP]]:
        x_1_r, r_1 = self.beaver_partition_mat(a, field)
        x_2_r, r_2 = self.beaver_partition_mat(b, field)
        
        c = self.beaver_mult_mat(x_1_r, r_1, x_2_r, r_2, field)
        c = self.beaver_reconstruct_mat(c, field)
        
        return c
    
    def beaver_partition_mat_bulk(self: MPCArithmetic[TP], x: list[list[list[TP]]], field: TP = param.BASE_P) -> tuple[list[list[list[TP]]], list[list[list[TP]]]]:
        # TODO: Do this in parallel
        partitions = [self.beaver_partition_mat(e, field) for e in x]
        x_r = [p[0] for p in partitions]
        r = [p[1] for p in partitions]
        return x_r, r
    
    def beaver_reconstruct_mat_bulk(self: MPCArithmetic[TP], x: list[list[list[TP]]], field: TP = param.BASE_P) -> list[list[list[TP]]]:
        # TODO: Do this in parallel
        return [self.beaver_reconstruct_mat(e, field) for e in x]

    def multiply_bulk(self: MPCArithmetic[TP], a: list[list[list[TP]]], b: list[list[list[TP]]], field: TP = param.BASE_P) -> list[list[list[TP]]]:
        # TODO: Vectorize this method. Make it parallel by having a and b as ndarrays.
        nmat: int = len(a)

        # TODO: Remove this check
        for k in range(nmat):
            assert a[k].shape() == b[k].shape()

        ar, am = self.beaver_partition_mat_bulk(a, field)
        br, bm = self.beaver_partition_mat_bulk(b, field)

        c = [self.beaver_mult(ar[k], am[k], br[k], bm[k], field)
             for k in range(nmat)]
        
        return self.beaver_reconstruct_mat_bulk(c, field)
    
    def multiply_mat_bulk(self: MPCArithmetic[TP], a: list[list[list[TP]]], b: list[list[list[TP]]], field: TP = param.BASE_P) -> list[list[list[TP]]]:
        # TODO: Vectorize/parallelize this method. Make it parallel by having a and b as ndarrays.
        nmat: int = len(a)

        # TODO: Remove this check
        for k in range(nmat):
            assert a[k].shape()[1] == b[k].shape()[0]

        ar, am = self.beaver_partition_mat_bulk(a, field)
        br, bm = self.beaver_partition_mat_bulk(b, field)

        c = [self.beaver_mult_mat(ar[k], am[k], br[k], bm[k], field)
             for k in range(nmat)]
            
        return self.beaver_reconstruct_mat_bulk(c, field)

    def beaver_inner_prod(self: MPCArithmetic[TP], ar: list[TP], am: list[TP], field: TP = param.BASE_P) -> TP:
        ab: list[TP] = ((am * am) % field) if self.pid == 0 else (((ar * am) % field) * 2) % field
        if self.pid == 1:
            ab = (ab + (ar * ar) % field) % field

        cum_sum = TP(0)
        for e in ab: cum_sum = (cum_sum + e) % field

        return cum_sum
    
    # def beaver_inner_prod_pair(
    #         self: 'MPCEnv', ar: np.ndarray, am: np.ndarray, br: np.ndarray, bm: np.ndarray, field: int = param.BASE_P) -> int:
    #     # TODO: Test this method. Check if it is redundant.
    #     ab: int = 0
        
    #     for i in range(len(ar)):
    #         # TODO: Do modular arithmetic
    #         if self.pid == 0:
    #             ab += am[i] * bm[i]
    #         else:
    #             ab += ar[i] * bm[i]
    #             ab += br[i] * am[i]
    #             if self.pid == 1:
    #                 ab += ar[i] * br[i]

    #     return ab
    
    # def inner_prod(self: 'MPCEnv', a: np.ndarray, field: int = param.BASE_P) -> np.ndarray:
    #     # TODO: Test this metod.
    #     ar, am = self.beaver_partition(a, field)

    #     c = zeros(a.shape[0])
    #     for i in range(a.shape[0]):
    #         c[i] = self.beaver_inner_prod(ar[i], am[i], field)

    #     return self.beaver_reconstruct(c, field)
