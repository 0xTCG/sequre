import utils.param as param
from mpc_env import MPCEnv
from utils.utils import get_address

from test_protocol import test_protocol

cimport fork() -> int
cimport unlink(str) -> int


def test_client[TP](pid: int):
    # Initialize MPC environment
    print(f"Initializing MPC for {pid} ...")
    mpc = MPCEnv[TP](pid)
    print(f"Initialized MPC for {pid}")

    success: bool = test_protocol[param.size_u](mpc, pid)

    # This is here just to keep P0 online until the end for data transfer
    # In practice, P0 would send data in advance before each phase and go offline
    if (pid == 0):
        b: bool = mpc.comms.receive_bool(2)
    elif (pid == 2): mpc.comms.send_bool(True, 0)

    mpc.comms.clean_up()

    # if (success): print(f"Protocol successfully completed for {pid}")
    # else: raise ValueError(f"Protocol abnormally terminated for {pid}")

    print(f'{pid} is done!')


def invoke[TP]():
    for port in param.ALL_PORTS:
        address: str = get_address(port)
        unlink(address)

    pid: int = fork()

    if (pid == 0):
        test_client[TP](0)
    else:
        pid: int = fork()
        if (pid == 0):
            test_client[TP](1)
        else:
            test_client[TP](2)


invoke[param.size_u]()
