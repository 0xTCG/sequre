from datetime import datetime
from numpy.create import array, zeros, ones
from numpy.ndarray import ndarray

from perf import perf_timing, perf_print_stats

from ..applications.king import collective_king_protocol
from ..applications.gwas import gwas_protocol
from ..applications.dti import dti_protocol
from ..applications.opal import sequre_opal as opal
from ..applications.ganon import sequre_ganon as ganon, FilterConfig
from ..applications.utils.data_sharing import share_all_data

from utils import time_frame
from ..playground import playground

import sequre.lattiseq.ckks as ckks

from sequre.stdlib.lin_alg import qr_fact_square, tridiag, eigen_decomp, orthonormalize
from sequre.stdlib.learn.lin_reg import LinReg
from sequre.stdlib.learn.mi import MI
from sequre.stdlib.learn.pca import random_pca_experimental
from sequre.types.utils import double_to_fp
from sequre.types.multiparty_partition import MPP
from sequre.types.sharetensor import Sharetensor
from sequre.utils.utils import random_ints
from sequre.utils.param import int_t
from sequre.utils.constants import RUN_TOGGLES

from unit_tests.test_he import lattiseq_test_setup


################################### Wrappers #####################################
def playground_wrapper(mpc, modulus, a, b, c, d, e, f, g, h):
    playground(mpc, a, b, c, d, e, f, g, h)

def lattiseq_wrapper(mpc, modulus):
    if mpc.pid != 0:
        print(f"CP{mpc.pid}: Lattiseq is benchmarked only at trusted dealer.")
        return

    with perf_timing("Lattiseq setup", prefix=f"{datetime.now()} | "):
        params, encoder, encryptor, decryptor, evaluator, _ = lattiseq_test_setup()
        factor = [complex(i, i) for i in range(params.slots())]
    with perf_timing("Lattiseq encoding"):
        plaintext = ckks.new_plaintext(params, params.max_level(), params.default_scale / 16)
        encoder.encode(factor, plaintext, params.log_slots)
    with perf_timing("Lattiseq encryption"):
        ciphertext = encryptor.encrypt_new(plaintext)
    with perf_timing("Lattiseq cipher-plain multiplication w/o relinearization"):
        cipher_prod = evaluator.mul_new(ciphertext, plaintext)
    with perf_timing("Lattiseq cipher-cipher multiplication w/o relinearization"):
        cipher_prod = evaluator.mul_new(ciphertext, ciphertext)
    with perf_timing("Lattiseq cipher-plain multiplication w/ relinearization"):
        cipher_prod = evaluator.mul_relin_new(ciphertext, plaintext)
    with perf_timing("Lattiseq cipher-cipher multiplication w/ relinearization"):
        cipher_prod = evaluator.mul_relin_new(ciphertext, ciphertext)
    with perf_timing("Lattiseq cipher-cipher addition"):
        cipher_cipher_sum = evaluator.add_new(cipher_prod, cipher_prod)
    with perf_timing("Lattiseq rotation"):
        ciphertext_rotation = evaluator.rotate_new(cipher_cipher_sum, 1)
    with perf_timing("Lattiseq decryption"):
        decrypted_plaintext = decryptor.decrypt_new(ciphertext_rotation)
    with perf_timing("Lattiseq decoding", " |\n"):
        decoded_values = encoder.decode(decrypted_plaintext, params.log_slots)
    
    print(f"\tInput factor[:5]: {factor[:5]}")
    print(f"\tDecoded 2 * factor^2 shifted left [:5]: {decoded_values[:5]}")

def lattiseq_mult3_wrapper(mpc, modulus):
    if mpc.pid != 0:
        print(f"CP{mpc.pid}: Lattiseq mult3 is benchmarked only at trusted dealer.")
        return
    
    from time import timing
    with timing("Lattiseq mult3 setup"):
        params, encoder, encryptor, decryptor, evaluator, _ = lattiseq_test_setup()
        x = [float(i) for i in range(params.slots())]
        y = [float(i * 2) for i in range(params.slots())]
        z = [float(i * 3) for i in range(params.slots())]
    with timing("Lattiseq mult3 encoding and encryption"):
        x_pt = ckks.new_plaintext(params, params.max_level(), params.default_scale / 16)
        y_pt = ckks.new_plaintext(params, params.max_level(), params.default_scale / 16)
        z_pt = ckks.new_plaintext(params, params.max_level(), params.default_scale / 16)
        encoder.encode(x, x_pt, params.log_slots)
        encoder.encode(y, y_pt, params.log_slots)
        encoder.encode(z, z_pt, params.log_slots)
        x_ct = encryptor.encrypt_new(x_pt)
        y_ct = encryptor.encrypt_new(y_pt)
        z_ct = encryptor.encrypt_new(z_pt)
    with timing("Lattiseq mult3 evaluation"):
        mul_1 = evaluator.mul_new(x_ct, y_ct)
        mul_2 = evaluator.mul_new(y_ct, z_ct)
        mul_3 = evaluator.mul_new(z_ct, x_ct)
        add_1 = evaluator.add_new(mul_1, mul_2)
        add_2 = evaluator.add_new(add_1, mul_3)
    with timing("Lattiseq mult3 decryption and decoding"):
        decrypted_plaintext = decryptor.decrypt_new(add_2)
        decoded_values = encoder.decode(decrypted_plaintext, params.log_slots)
    
    print(f"\tDecoded values [0:3]: {decoded_values[:3]}")

def king_wrapper(mpc, modulus):
    mpp_data = MPP.collective_load(mpc, "data/king/partition.bin", rows=16, cols=8192, binary=True, dtype=int).astype(float)
    collective_king_protocol(mpc, mpp_data)

def pca_wrapper(mpc, modulus):
    rows_per_party = 8
    cols_per_party = 8192
    
    with mpc.randomness.seed_switch(-1):
        raw_data = array(random_ints(((mpc.comms.number_of_parties - 1) * rows_per_party, cols_per_party), upper_limit=2))    

    raw_data_mean = raw_data.sum(axis=0) / len(raw_data)

    top_components_count = 2
    oversampling_count = 2
    power_iterations_count = 1
    
    local_data = raw_data[(mpc.pid - 1) * rows_per_party:mpc.pid * rows_per_party].astype(float)
    local_data -= raw_data_mean

    if mpc.pid == 0:
        local_data = zeros((rows_per_party, cols_per_party), dtype=float)
    
    random_pca_experimental(
        mpc, local_data, top_components_count, oversampling_count, power_iterations_count)

def lin_alg_wrapper(mpc, modulus, sv_mat):
    qr_fact_square(mpc, sv_mat)
    tridiag(mpc, sv_mat)
    eigen_decomp(mpc, sv_mat)
    orthonormalize(mpc, sv_mat)

def mi_wrapper(mpc, modulus):
    rows_per_party = 125  # 34144
    cols_per_party = 14  # 102
    miss_rate = 50  # 54934

    with mpc.randomness.seed_switch(-1):
        complete_data = ndarray.rand(((mpc.comms.number_of_parties - 1) * rows_per_party, cols_per_party)) * 2
        labels = complete_data @ ndarray.rand((cols_per_party, 1)) + 1.0

    data = complete_data.copy()
    miss_col = 0
    miss_val = 0.0
    
    miss_rows_set = set[int]()
    with mpc.randomness.seed_switch(-1):
        for _ in range(miss_rate):
            miss_row = int.rand(len(data) - 1)
            data[miss_row][miss_col] = miss_val
            miss_rows_set.add(miss_row)
    miss_rows = sorted(list(miss_rows_set))

    mpc_complete_data = Sharetensor.enc(mpc, complete_data, 0, modulus)
    mpc_data = Sharetensor.enc(mpc, data, 0, modulus)
    mpc_labels = Sharetensor.enc(mpc, labels, 0, modulus)

    step_size = 0.0001
    epochs = 40

    mpc_impute_model = LinReg(Sharetensor.enc(mpc, ones((cols_per_party, 1)), 0, modulus))
    mpc_fit_model = LinReg(Sharetensor.enc(mpc, ones((cols_per_party + 1, 1)), 0, modulus))

    factor = 5
    mpc_mi = MI(factor, mpc_impute_model, mpc_fit_model).fit(
        mpc, mpc_data, mpc_labels, miss_rows, miss_col, step_size, epochs)
    
    predicted_data = mpc_mi.model.predict(mpc, mpc_complete_data).reveal(mpc)
    stats = labels.hstack(predicted_data)
    print(f"CP{mpc.pid}:\tSequre MI standard deviation", ndarray.mean(ndarray.std(stats, axis=1)))

def gwas_wrapper(mpc, modulus):
    gwas_protocol(mpc, True, modulus)

def dti_wrapper(mpc, modulus):
    dti_protocol(mpc, True, modulus, False)

def opal_wrapper(mpc, modulus, coverage):
    opal(mpc, True, modulus, coverage)[0]

def ganon_wrapper(mpc, modulus, read_limit):
    parsed_hierarchy = {
        "level_1": {
                "window_size": 0,
                "kmer_size": 19,
                "offset": 1,
                "rel_filter": 1,
                "abs_filter": 0,
                "alphabet_size": 5  # the size of the nucleotide alphabeth -- 5 in case of SeqAn's IBF (A,C,G,N,T)
            }
        }

    filter_config = FilterConfig(
        ibf_path="data/ganon/opal_dataset_ibf.bin",
        map_path="data/ganon/opal_dataset_map.txt",
        rel_cutoff=0.25,
        abs_cutoff=0.0,
        bin_count=63,
        hash_count=4)

    ganon(mpc, parsed_hierarchy, [filter_config], 'tests/data/opal/test.fragments.fasta', modulus, read_limit)

##################################################################################


def benchmark[TP](mpc, benchmark_toggles: dict, modulus: TP):
    a = Sharetensor(mpc.comms.share_from_trusted_dealer([int_t(i) for i in range(10)], modulus), modulus)
    b = Sharetensor(mpc.comms.share_from_trusted_dealer(
        [int_t(1), int_t(2), int_t(1), int_t(2), int_t(3),
         int_t(4), int_t(3), int_t(4), int_t(1), int_t(5)], modulus), modulus)
    c = Sharetensor(mpc.comms.share_from_trusted_dealer([int_t(i) for i in range(10)], modulus), modulus)
    d = Sharetensor(mpc.comms.share_from_trusted_dealer(
        [int_t(1), int_t(2), int_t(1), int_t(2), int_t(3),
         int_t(4), int_t(3), int_t(4), int_t(1), int_t(5)], modulus), modulus)
    e = Sharetensor(mpc.comms.share_from_trusted_dealer([int_t(i) for i in range(100000)], modulus), modulus)
    f = Sharetensor(mpc.comms.share_from_trusted_dealer(int_t(7), modulus), modulus)
    g = Sharetensor(mpc.comms.share_from_trusted_dealer(int_t(13), modulus), modulus)
    h = Sharetensor(mpc.comms.share_from_trusted_dealer(int_t(19), modulus), modulus)

    h_mat = [[double_to_fp(float(i + j), modulus) for i in range(50)] for j in range(50)]
    sv_mat = Sharetensor(h_mat, modulus)
    sv_mat.get_partitions(mpc)
    sv_mat.fp = True

    if not benchmark_toggles[RUN_TOGGLES.DATA_SHARING_SKIP_FLAG]:
        share_all_data(mpc, True, modulus, TP=int_t)
    
    mpc.comms.sync_parties()
    run_all = benchmark_toggles[RUN_TOGGLES.RUN_ALL_FLAG]

    if benchmark_toggles[RUN_TOGGLES.PLAYGROUND_FLAG] or run_all:
        time_frame(mpc, playground_wrapper, 'Playground', modulus, a, b, c, d, e, f, g, h)
    
    if benchmark_toggles[RUN_TOGGLES.LATTISEQ_FLAG] or run_all:
        time_frame(mpc, lattiseq_wrapper, 'Lattiseq', modulus)
    if benchmark_toggles[RUN_TOGGLES.LATTISEQ_MULT3_FLAG] or run_all:
        time_frame(mpc, lattiseq_mult3_wrapper, 'Lattiseq mult3', modulus)
    if benchmark_toggles[RUN_TOGGLES.KING_FLAG] or run_all:
        time_frame(mpc, king_wrapper, 'KING', modulus)
    if benchmark_toggles[RUN_TOGGLES.MI_FLAG] or run_all:
        time_frame(mpc, mi_wrapper, 'Multiple imputation', modulus)
    if benchmark_toggles[RUN_TOGGLES.PCA_FLAG] or run_all:
        time_frame(mpc, pca_wrapper, 'PCA', modulus)

    if benchmark_toggles[RUN_TOGGLES.LIN_ALG_FLAG] or run_all:
        time_frame(mpc, lin_alg_wrapper, 'Linear algebra', modulus, sv_mat)
    if benchmark_toggles[RUN_TOGGLES.GWAS_FLAG] or run_all:
        time_frame(mpc, gwas_wrapper, 'Genome-wide association study', modulus)
    if benchmark_toggles[RUN_TOGGLES.DTI_FLAG] or run_all:
        time_frame(mpc, dti_wrapper, 'Drug target interaction inference', modulus)
    if benchmark_toggles[RUN_TOGGLES.OPAL_FLAG] or run_all:
        time_frame(mpc, opal_wrapper, 'Opal 0.1x', modulus, 0.1)
        time_frame(mpc, opal_wrapper, 'Opal 15x', modulus, 15)
    if benchmark_toggles[RUN_TOGGLES.GANON_FLAG] or run_all:
        time_frame(mpc, ganon_wrapper, 'Ganon', modulus, 100)

    mpc.comms.sequential(perf_print_stats, False, f"CP{mpc.pid}: ")
