from datetime import datetime

import prg

from perf import perf_timing, perf_print_stats

from ..applications.king import collective_king_protocol
from ..applications.gwas import gwas_protocol
from ..applications.dti import dti_protocol
from ..applications.opal import sequre_opal as opal
from ..applications.ganon import sequre_ganon as ganon, FilterConfig
from ..applications.utils.data_sharing import share_all_data

from utils import time_frame
from ..playground import playground

import sequre.lattiseq.ckks as ckks

from sequre.stdlib.lin_alg import qr_fact_square, tridiag, eigen_decomp, orthonormal_basis
from sequre.types.utils import double_to_fp
from sequre.types.multiparty_partition import MPP
from sequre.types.shared_tensor import SharedTensor
from sequre.utils.param import int_t

from unit_tests.test_he import lattiseq_test_setup


################################### Wrappers #####################################
def playground_wrapper(mpc, modulus, a, b, c, d, e, f, g, h):
    playground(mpc, a, b, c, d, e, f, g, h)

def lattiseq_wrapper(mpc, modulus):
    if mpc.pid != 0:
        print(f"CP{mpc.pid}: Lattiseq is benchmarked only at trusted dealer.")
        return

    with perf_timing("Lattiseq setup", prefix=f"{datetime.now()} | "):
        params, encoder, encryptor, decryptor, evaluator, _ = lattiseq_test_setup()
        factor = [complex(i, i) for i in range(params.slots())]
    with perf_timing("Lattiseq encoding"):
        plaintext = ckks.new_plaintext(params, params.max_level(), params.default_scale / 16)
        encoder.encode(factor, plaintext, params.log_slots)
    with perf_timing("Lattiseq encryption"):
        ciphertext = encryptor.encrypt_new(plaintext)
    with perf_timing("Lattiseq cipher-plain multiplication w/o relinearization"):
        cipher_prod = evaluator.mul_new(ciphertext, plaintext)
    with perf_timing("Lattiseq cipher-cipher multiplication w/o relinearization"):
        cipher_prod = evaluator.mul_new(ciphertext, ciphertext)
    with perf_timing("Lattiseq cipher-plain multiplication w/ relinearization"):
        cipher_prod = evaluator.mul_relin_new(ciphertext, plaintext)
    with perf_timing("Lattiseq cipher-cipher multiplication w/ relinearization"):
        cipher_prod = evaluator.mul_relin_new(ciphertext, ciphertext)
    with perf_timing("Lattiseq cipher-cipher addition"):
        cipher_cipher_sum = evaluator.add_new(cipher_prod, cipher_prod)
    with perf_timing("Lattiseq rotation"):
        ciphertext_rotation = evaluator.rotate_new(cipher_cipher_sum, 1)
    with perf_timing("Lattiseq decryption"):
        decrypted_plaintext = decryptor.decrypt_new(ciphertext_rotation)
    with perf_timing("Lattiseq decoding", " |\n"):
        decoded_values = encoder.decode(decrypted_plaintext, params.log_slots)
    
    print(f"\tInput factor[:5]: {factor[:5]}")
    print(f"\tDecoded 2 * factor^2 shifted left [:5]: {decoded_values[:5]}")

def lattiseq_mult3_wrapper(mpc, modulus):
    if mpc.pid != 0:
        print(f"CP{mpc.pid}: Lattiseq mult3 is benchmarked only at trusted dealer.")
        return
    
    from time import timing
    with timing("Lattiseq mult3 setup"):
        params, encoder, encryptor, decryptor, evaluator, _ = lattiseq_test_setup()
        x = [float(i) for i in range(params.slots())]
        y = [float(i * 2) for i in range(params.slots())]
        z = [float(i * 3) for i in range(params.slots())]
    with timing("Lattiseq mult3 encoding and encryption"):
        x_pt = ckks.new_plaintext(params, params.max_level(), params.default_scale / 16)
        y_pt = ckks.new_plaintext(params, params.max_level(), params.default_scale / 16)
        z_pt = ckks.new_plaintext(params, params.max_level(), params.default_scale / 16)
        encoder.encode(x, x_pt, params.log_slots)
        encoder.encode(y, y_pt, params.log_slots)
        encoder.encode(z, z_pt, params.log_slots)
        x_ct = encryptor.encrypt_new(x_pt)
        y_ct = encryptor.encrypt_new(y_pt)
        z_ct = encryptor.encrypt_new(z_pt)
    with timing("Lattiseq mult3 evaluation"):
        mul_1 = evaluator.mul_new(x_ct, y_ct)
        mul_2 = evaluator.mul_new(y_ct, z_ct)
        mul_3 = evaluator.mul_new(z_ct, x_ct)
        add_1 = evaluator.add_new(mul_1, mul_2)
        add_2 = evaluator.add_new(add_1, mul_3)
    with timing("Lattiseq mult3 decryption and decoding"):
        decrypted_plaintext = decryptor.decrypt_new(add_2)
        decoded_values = encoder.decode(decrypted_plaintext, params.log_slots)
    
    print(f"\tDecoded values [0:3]: {decoded_values[:3]}")

def king_wrapper(mpc, modulus):
    mpp_data = MPP.collective_load(mpc, 'data/king/partition.bin', rows=16, cols=32, binary=True, modulus=modulus, dtype=int)
    collective_king_protocol(mpc, mpp_data, 0)

def lin_alg_wrapper(mpc, modulus, sv_mat):
    qr_fact_square(mpc, sv_mat)
    tridiag(mpc, sv_mat)
    eigen_decomp(mpc, sv_mat)
    orthonormal_basis(mpc, sv_mat)

def gwas_wrapper(mpc, modulus):
    gwas_protocol(mpc, True, modulus)

def dti_wrapper(mpc, modulus):
    dti_protocol(mpc, True, modulus, False)

def opal_wrapper(mpc, modulus, coverage):
    opal(mpc, True, modulus, coverage)[0]

def ganon_wrapper(mpc, modulus, read_limit):
    parsed_hierarchy = {
        "level_1": {
                "window_size": 0,
                "kmer_size": 19,
                "offset": 1,
                "rel_filter": 1,
                "abs_filter": 0,
                "alphabet_size": 5  # the size of the nucleotide alphabeth -- 5 in case of SeqAn's IBF (A,C,G,N,T)
            }
        }

    filter_config = FilterConfig(
        ibf_path="data/ganon/opal_dataset_ibf.bin",
        map_path="data/ganon/opal_dataset_map.txt",
        rel_cutoff=0.25,
        abs_cutoff=0.0,
        bin_count=63,
        hash_count=4)

    ganon(mpc, parsed_hierarchy, [filter_config], 'tests/data/opal/test.fragments.fasta', modulus, read_limit)

##################################################################################


def benchmark[TP](mpc, benchmark_toggles: dict, modulus: TP):
    a = SharedTensor(mpc.comms.share([int_t(i) for i in range(10)], modulus), modulus)
    b = SharedTensor(mpc.comms.share(
        [int_t(1), int_t(2), int_t(1), int_t(2), int_t(3),
         int_t(4), int_t(3), int_t(4), int_t(1), int_t(5)], modulus), modulus)
    c = SharedTensor(mpc.comms.share([int_t(i) for i in range(10)], modulus), modulus)
    d = SharedTensor(mpc.comms.share(
        [int_t(1), int_t(2), int_t(1), int_t(2), int_t(3),
         int_t(4), int_t(3), int_t(4), int_t(1), int_t(5)], modulus), modulus)
    e = SharedTensor(mpc.comms.share([int_t(i) for i in range(100000)], modulus), modulus)
    f = SharedTensor(mpc.comms.share(int_t(7), modulus), modulus)
    g = SharedTensor(mpc.comms.share(int_t(13), modulus), modulus)
    h = SharedTensor(mpc.comms.share(int_t(19), modulus), modulus)

    h_mat = [[double_to_fp(float(i + j), modulus) for i in range(50)] for j in range(50)]
    sv_mat = SharedTensor(h_mat, modulus)
    sv_mat.get_partitions(mpc)
    sv_mat.fp = True

    if not benchmark_toggles["skip_data_sharing"]:
        share_all_data(mpc, True, modulus, TP=int_t)
    
    mpc.comms.sync_parties()
    run_all = benchmark_toggles["all"]

    if benchmark_toggles["playground"] or run_all:
        time_frame(mpc, playground_wrapper, 'Playground', modulus, a, b, c, d, e, f, g, h)
    
    if benchmark_toggles["lattiseq"] or run_all:
        time_frame(mpc, lattiseq_wrapper, 'Lattiseq', modulus)
    if benchmark_toggles["lattiseq-mult3"] or run_all:
        time_frame(mpc, lattiseq_mult3_wrapper, 'Lattiseq mult3', modulus)
    if benchmark_toggles["king"] or run_all:
        time_frame(mpc, king_wrapper, 'KING', modulus)

    if benchmark_toggles["lin-alg"] or run_all:
        time_frame(mpc, lin_alg_wrapper, 'Linear algebra', modulus, sv_mat)
    if benchmark_toggles["gwas"] or run_all:
        time_frame(mpc, gwas_wrapper, 'Genome-wide association study', modulus)
    if benchmark_toggles["dti"] or run_all:
        time_frame(mpc, dti_wrapper, 'Drug target interaction inference', modulus)
    if benchmark_toggles["opal"] or run_all:
        time_frame(mpc, opal_wrapper, 'Opal 0.1x', modulus, 0.1)
        time_frame(mpc, opal_wrapper, 'Opal 15x', modulus, 15)
    if benchmark_toggles["ganon"] or run_all:
        time_frame(mpc, ganon_wrapper, 'Ganon', modulus, 100)

    mpc.comms.sequential(perf_print_stats, False, f"CP{mpc.pid}: ")
