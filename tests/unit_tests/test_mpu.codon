from numpy.create import array, ones, zeros

from sequre.mpc.env import MPCEnv
from sequre.types.multiparty_union import MPU
from sequre.utils.utils import random_floats

from ..utils import assert_eq_approx


def test_mpu_getitem(mpu_a, raw_a):
    mpc = mpu_a.mpc
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU 2-dim getitem", mpu_a[0].reveal(), raw_a[0], error=0.001)
        assert_eq_approx(f"CP{mpc.pid}:\tMPU 1-dim getitem", mpu_a[0][0].reveal(), raw_a[0, 0], error=0.001)
        assert_eq_approx(f"CP{mpc.pid}:\tMPU 2-dim get slice", mpu_a[:2].reveal(), raw_a[:2], error=0.001)
        assert_eq_approx(f"CP{mpc.pid}:\tMPU 2-dim get slice-slice tuple", mpu_a[:2, :2].reveal(), raw_a[:2, :2], error=0.001)
        assert_eq_approx(f"CP{mpc.pid}:\tMPU 2-dim get slice-int tuple", mpu_a[:2, 2].reveal(), raw_a[:2, 2:3], error=0.001)
        assert_eq_approx(f"CP{mpc.pid}:\tMPU 2-dim get int-slice tuple", mpu_a[2, :2].reveal(), raw_a[2, :2], error=0.001)
        assert_eq_approx(f"CP{mpc.pid}:\tMPU 2-dim get int-int tuple", mpu_a[2, 2].reveal(), raw_a[2, 2:3], error=0.001)
        

def test_mpu_setitem(_mpu_a, _raw_a):
    mpc = _mpu_a.mpc
    
    mpu_a, raw_a = _mpu_a.copy(), _raw_a.copy()
    mpu_a[0] = mpu_a[1]
    raw_a[0] = raw_a[1]
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU 2-dim setitem", mpu_a.reveal(), raw_a, error=0.001)
    
    mpu_a, raw_a = _mpu_a.copy(), _raw_a.copy()
    mpu_row = mpu_a[0]
    mpu_row[0] = mpu_row[1]
    raw_a[0, 0] = raw_a[0, 1]
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU 1-dim setitem", mpu_row.reveal(), raw_a[0], error=0.001)
    
    mpu_a, raw_a = _mpu_a.copy(), _raw_a.copy()
    mpu_a[:2] = mpu_a[1:3]
    raw_a[:2] = raw_a[1:3]
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU 2-dim set slice", mpu_a.reveal(), raw_a, error=0.001)
    
    mpu_a, raw_a = _mpu_a.copy(), _raw_a.copy()
    mpu_a[:2, :2] = mpu_a[1:3, 1:3]
    raw_a[:2, :2] = raw_a[1:3, 1:3]
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU 2-dim set slice-slice tuple", mpu_a.reveal(), raw_a, error=0.001)
    
    mpu_a, raw_a = _mpu_a.copy(), _raw_a.copy()
    mpu_a[:2, 2] = mpu_a[1:3, 3]
    raw_a[:2, 2] = raw_a[1:3, 3]
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU 2-dim set slice-int tuple", mpu_a.reveal(), raw_a, error=0.001)
    
    mpu_a, raw_a = _mpu_a.copy(), _raw_a.copy()
    mpu_a[2, :2] = mpu_a[3, 1:3]
    raw_a[2, :2] = raw_a[3, 1:3]
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU 2-dim set int-slice tuple", mpu_a.reveal(), raw_a, error=0.001)
    
    mpu_a, raw_a = _mpu_a.copy(), _raw_a.copy()
    mpu_a[2, 2] = mpu_a[3, 3]
    raw_a[2, 2] = raw_a[3, 3]
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU 2-dim set int-int tuple", mpu_a.reveal(), raw_a, error=0.001)


def test_mpu_transpose(mpu_a, raw_a):
    mpc = mpu_a.mpc
    mhe_t = mpu_a.T.T
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU lazy transpose", mhe_t.reveal(), raw_a, error=0.001)

    mhe_t = mpu_a.T
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU actual transpose", mhe_t.reveal(), raw_a.T, error=0.001)


def test_mpu_mpc_switching(mpu_a, raw_a):
    mpc = mpu_a.mpc
    sharetensor_a = mpu_a.to_sharetensor()
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU -> MPC switch", sharetensor_a.reveal(mpc), raw_a, error=0.001)

    mpu_a = sharetensor_a.to_mpu(mpc, mpu_a._mpp._ratios, dtype=mpu_a.dtype)
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPC -> MPU switch", mpu_a.reveal(), raw_a, error=0.001)


def test_mpu_elem_wise_operations(mpu_a, mpu_b, raw_a, raw_b):
    mpc = mpu_a.mpc
    mpu_add = mpu_a + mpu_b
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU addition", mpu_add.reveal(), raw_a + raw_b, error=0.001)

    _ones = ones(mpu_a.shape)
    mpu_public_add = mpu_a + _ones
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU public addtition", mpu_public_add.reveal(), raw_a + _ones, error=0.001)

    mpu_sub = mpu_a - mpu_b
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU subtraction", mpu_sub.reveal(), raw_a - raw_b, error=0.001)

    mpu_mul = mpu_a * mpu_b
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU multiplication", mpu_mul.reveal(), raw_a * raw_b, error=0.005)
    
    mpu_a_row_mat = mpu_a[0].expand_dims(axis=0)
    row_mat_add = mpu_a_row_mat + mpu_a_row_mat
    raw_a_row_mat = raw_a[0].expand_dims(axis=0)
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU addition w/ dimension expansion", row_mat_add.reveal(), raw_a_row_mat + raw_a_row_mat, error=0.001)


def test_mpu_matmul_operations(mpu_a, mpu_b, raw_a, raw_b):
    mpc = mpu_a.mpc
    mpu_dot = mpu_a.dot()
    raw_dot = (raw_a * raw_a).sum(axis=1).expand_dims(axis=1)
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU dot 2-dim", mpu_dot.reveal(), raw_dot, error=0.005)
    
    mpu_dot_1_dim = mpu_a[0].dot()
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU dot 1-dim", mpu_dot_1_dim.reveal(), raw_dot[0], error=0.005)
    
    mpu_matmul = mpu_a @ mpu_b.T
    raw_matmul = raw_a @ raw_b.T
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU matrix multiplication non-transposed x transposed", mpu_matmul.reveal(), raw_matmul, error=0.02)

    mpu_matmul = mpu_a.T @ mpu_b
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU matrix multiplication transposed x non-transposed", mpu_matmul.reveal(), raw_a.T @ raw_b, error=0.02)

    _ones = ones(mpu_a.shape).T
    mpu_public_matmul = mpu_a @ _ones
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU matrix public multiplication", mpu_public_matmul.reveal(), raw_a @ _ones, error=0.02)

    mpu_a_row_mat = mpu_a[0].expand_dims(axis=0)
    row_mat_matmul = mpu_a_row_mat.T @ mpu_a_row_mat
    raw_a_row_mat = raw_a[0].expand_dims(axis=0)
    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU matrix multiplication transposed x non-transposed w/ dim expansion", row_mat_matmul.reveal(), raw_a_row_mat.T @ raw_a_row_mat, error=0.02)
    

def test_mpu[TP](mpc: MPCEnv[TP], modulus: TP):
    mpc.comms.sync_parties()
    alg_struct = "ring" if modulus.popcnt() == 1 else "field"
    print(f'CP{mpc.pid}:\tTesting Sequre MHE MPU on {alg_struct}... \n')
    rows, cols = 4, 32
    
    a_partition = array(random_floats((rows, cols)))
    b_share = array(random_floats((rows * (mpc.comms.number_of_parties - 1), cols)))
    
    mpu_a = MPU(mpc, a_partition, "partition")
    mpu_b = MPU(mpc, b_share, "aggregate")

    raw_a = mpc.comms.collect(a_partition).unfence() if mpc.pid else zeros((rows * (mpc.comms.number_of_parties - 1), cols))
    raw_b = mpc.comms.collect(b_share).sum() if mpc.pid else zeros((rows * (mpc.comms.number_of_parties - 1), cols))

    mpc.comms.sequential(lambda: print(f"CP{mpc.pid}:\tPrinting MPU test data A (MPP) for debugging:", raw_a), False)
    mpc.comms.sync_parties()
    mpc.comms.sequential(lambda: print(f"CP{mpc.pid}:\tPrinting MPU test data B (MPA) for debugging:", raw_b), False)

    if mpc.pid:
        assert_eq_approx(f"CP{mpc.pid}:\tMPU load/collect/decrypt 1", mpu_a.reveal(), raw_a, error=0.001)
        assert_eq_approx(f"CP{mpc.pid}:\tMPU load/collect/decrypt 2", mpu_b.reveal(), raw_b, error=0.001)

    test_mpu_getitem(mpu_a, raw_a)
    test_mpu_getitem(mpu_b, raw_b)
    test_mpu_setitem(mpu_a, raw_a)
    test_mpu_setitem(mpu_b, raw_b)
    test_mpu_transpose(mpu_a, raw_a)
    test_mpu_transpose(mpu_b, raw_b)
    test_mpu_mpc_switching(mpu_a, raw_a)
    test_mpu_mpc_switching(mpu_b, raw_b)
    test_mpu_elem_wise_operations(mpu_a, mpu_b, raw_a, raw_b)
    test_mpu_matmul_operations(mpu_a, mpu_b, raw_a, raw_b)

    print(f'CP{mpc.pid}:\tSequre MHE MPU tests on {alg_struct} passed.\n')
