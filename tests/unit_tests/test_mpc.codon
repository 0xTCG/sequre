from ..utils import assert_eq, assert_eq_approx 

from sequre.utils.param import *
from sequre.utils.utils import offline_evaluate_poly, zeros_vec
from sequre.types.utils import double_to_fp
from sequre.mpc.collections import oblivious_get

from sequre.mpc.env import MPCEnv

from test_mhe import test_mhe


def test_mpc_core[TP](mpc: MPCEnv[TP], modulus: TP):
    alg_struct = "ring" if modulus.popcnt() == 1 else "field"
    print(f'CP{mpc.pid}:\tTesting MPC on {alg_struct}...\n')
    
    vector_length = 10
    mat_rows_no, mat_cols_no = 10, 15

    # Test inputs
    elem_1 = TP(10)
    elem_2 = TP(7)
    elem_1_int = 10
    elem_2_int = 7
    vector_1 = [TP(10), TP(11), TP(12)]
    vector_2 = [TP(7), TP(8), TP(9)]
    vector_1_int = [10, 11, 12]
    vector_2_int = [7, 8, 9]
    matrix_1 = [[TP(1), TP(2), TP(3)], [TP(4), TP(5), TP(6)], [TP(7), TP(8), TP(9)]]
    matrix_2 = [[TP(10), TP(11), TP(12)], [TP(13), TP(14), TP(15)], [TP(16), TP(17), TP(18)]]
    matrix_1_int = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    matrix_2_int = [[10, 11, 12], [13, 14, 15], [16, 17, 18]]
    a = double_to_fp(2.0 if mpc.pid == 1 else 1.14, modulus)
    b = double_to_fp(3.0 if mpc.pid == 1 else 2.95, modulus)
    a_bits = [TP(1), TP(0), TP(1), TP(0), TP(1), TP(0), TP(0)]
    b_bits = [TP(0), TP(0), TP(1), TP(0), TP(1), TP(0), TP(0)]

    mpc.comms.sync_parties()

    with mpc.randomness.seed_switch(-1):
        elem_to_send = elem_1.rand(modulus)
    if mpc.pid == 1:
        mpc.comms.send(elem_to_send, 2)
        mpc.comms.send(modulus - elem_to_send, 2)
    elif mpc.pid == 2:
        received_elem = mpc.comms.receive(1, T=TP)
        assert_eq('Sending-receiving elem 1', received_elem, elem_to_send)
        received_elem = mpc.comms.receive(1, T=TP)
        assert_eq('Sending-receiving elem 2', received_elem, modulus - elem_to_send)
    
    with mpc.randomness.seed_switch(-1):
        vector_to_send = [elem_1.rand(modulus) for _ in range(vector_length)]
    if mpc.pid == 1:
        mpc.comms.send(vector_to_send, 2)
    elif mpc.pid == 2:
        received_vector = mpc.comms.receive(1, shape=vector_length, T=TP)
        assert_eq('Sending-receiving vector', received_vector, vector_to_send)
    
    with mpc.randomness.seed_switch(-1):
        mat_to_send = [[elem_1.rand(modulus) for _ in range(mat_cols_no)] for _ in range(mat_rows_no)]
    if mpc.pid == 1:
        mpc.comms.send(mat_to_send, 2)
    elif mpc.pid == 2:
        received_mat = mpc.comms.receive(1, shape=[mat_rows_no, mat_cols_no], T=TP)
        assert_eq('Sending-receiving matrix', received_mat, mat_to_send)
    
    with mpc.randomness.seed_switch(-1):
        elem_to_send_int = elem_1_int.rand(SECOND_FIELD_SIZE)
    if mpc.pid == 1:
        mpc.comms.send(elem_to_send_int, 2)
    elif mpc.pid == 2:
        received_elem = mpc.comms.receive(1, T=int)
        assert_eq('Sending-receiving elem of ints', received_elem, elem_to_send_int)
    
    with mpc.randomness.seed_switch(-1):
        vector_to_send_int = [elem_1_int.rand(SECOND_FIELD_SIZE) for _ in range(vector_length)]
    if mpc.pid == 1:
        mpc.comms.send(vector_to_send_int, 2)
    elif mpc.pid == 2:
        received_vector = mpc.comms.receive(1, shape=vector_length, T=int)
        assert_eq('Sending-receiving vector of ints', received_vector, vector_to_send_int)
    
    with mpc.randomness.seed_switch(-1):
        mat_to_send_int = [[elem_1_int.rand(SECOND_FIELD_SIZE) for _ in range(mat_cols_no)] for _ in range(mat_rows_no)]
    if mpc.pid == 1:
        mpc.comms.send(mat_to_send_int, 2)
    elif mpc.pid == 2:
        received_mat = mpc.comms.receive(1, shape=[mat_rows_no, mat_cols_no], T=int)
        assert_eq('Sending-receiving matrix of ints', received_mat, mat_to_send_int)

    revealed_elem = mpc.comms.reveal(elem_1 if mpc.pid == 1 else elem_2, modulus)
    if mpc.pid != 0:
        assert_eq('Revealing elem', revealed_elem, elem_1.add_mod(elem_2, modulus))
    
    revealed_vector = mpc.comms.reveal(vector_1 if mpc.pid == 1 else vector_2, modulus)
    if mpc.pid != 0:
        assert_eq('Revealing vector', revealed_vector, vector_1.add_mod(vector_2, modulus))
    
    revealed_matrix = mpc.comms.reveal(matrix_1 if mpc.pid == 1 else matrix_2, modulus)
    if mpc.pid != 0:
        assert_eq('Revealing matrix', revealed_matrix, matrix_1.add_mod(matrix_2, modulus))

    revealed_elem_int = mpc.comms.reveal(elem_1_int if mpc.pid == 1 else elem_2_int, SECOND_FIELD_SIZE)
    if mpc.pid != 0:
        assert_eq('Revealing elem of ints', revealed_elem_int, elem_1_int.add_mod(elem_2_int, SECOND_FIELD_SIZE))
    
    revealed_vector_int = mpc.comms.reveal(vector_1_int if mpc.pid == 1 else vector_2_int, SECOND_FIELD_SIZE)
    if mpc.pid != 0:
        assert_eq('Revealing vector of ints', revealed_vector_int, vector_1_int.add_mod(vector_2_int, SECOND_FIELD_SIZE))
    
    revealed_matrix_int = mpc.comms.reveal(matrix_1_int if mpc.pid == 1 else matrix_2_int, SECOND_FIELD_SIZE)
    if mpc.pid != 0:
        assert_eq('Revealing matrix of ints', revealed_matrix_int, matrix_1_int.add_mod(matrix_2_int, SECOND_FIELD_SIZE))
    
    if mpc.pid == 1:
        mpc.randomness.switch_seed(0)
    if mpc.pid == 2:
        mpc.randomness.switch_seed(0)
    random_number = elem_1.rand(modulus)
    if mpc.pid != 0:
        mpc.comms.send(random_number, 0)
    if mpc.pid == 1:
        mpc.randomness.restore_seed(0)
    if mpc.pid == 2:
        mpc.randomness.restore_seed(0)
    
    if mpc.pid == 0:
        mpc.randomness.switch_seed(2)
        random_number = elem_1.rand(modulus)
        mpc.randomness.restore_seed(2)
        received_random_number = mpc.comms.receive(2, T=TP)
        assert_eq('PRG 1', random_number, received_random_number)

        mpc.randomness.switch_seed(1)
        random_number = elem_1.rand(modulus)
        mpc.randomness.restore_seed(1)
        received_random_number = mpc.comms.receive(1, T=TP)
        assert_eq('PRG 2', random_number, received_random_number)

    x_r, r = mpc.arithmetic.__beaver_partition(elem_1 if mpc.pid == 1 else elem_2, modulus)
    if mpc.pid == 0:
        mpc.comms.send(r, 1)
        mpc.comms.send(r, 2)
    else:
        r_0 = mpc.comms.receive(0, T=TP)
        assert_eq('Beaver partition elem 1', r_0, mpc.comms.reveal(r, modulus))
        assert_eq('Beaver partition elem 2', x_r.add_mod(mpc.comms.reveal(r, modulus), modulus), elem_1.add_mod(elem_2, modulus))
    
    x_r_vec, r_vec = mpc.arithmetic.__beaver_partition(vector_1 if mpc.pid == 1 else vector_2, modulus)
    if mpc.pid == 0:
        mpc.comms.send(r_vec, 1)
        mpc.comms.send(r_vec, 2)
    else:
        r_0 = mpc.comms.receive(0, len(vector_1), T=TP)
        assert_eq('Beaver partition vector 1', r_0, mpc.comms.reveal(r_vec, modulus))
        assert_eq('Beaver partition vector 2', x_r_vec.add_mod(mpc.comms.reveal(r_vec, modulus), modulus), vector_1.add_mod(vector_2, modulus))
        
    x_r_mat, r_mat = mpc.arithmetic.__beaver_partition(matrix_1 if mpc.pid == 1 else matrix_2, modulus)
    if mpc.pid == 0:
        mpc.comms.send(r_mat, 1)
        mpc.comms.send(r_mat, 2)
    else:
        r_0 = mpc.comms.receive(0, matrix_1.shape, T=TP)
        assert_eq('Beaver partition matrix 1', r_0, mpc.comms.reveal(r_mat, modulus))
        assert_eq('Beaver partition matrix 2', x_r_mat.add_mod(mpc.comms.reveal(r_mat, modulus), modulus), matrix_1.add_mod(matrix_2, modulus))
    
    x_r_int, r_int = mpc.arithmetic.__beaver_partition(
        elem_1_int if mpc.pid == 1 else elem_2_int, SECOND_FIELD_SIZE)
    if mpc.pid == 0:
        mpc.comms.send(r_int, 1)
        mpc.comms.send(r_int, 2)
    else:
        r_0_int = mpc.comms.receive(0, T=int)
        assert_eq('Beaver partition elem 1 int', r_0_int, mpc.comms.reveal(r_int, SECOND_FIELD_SIZE))
        assert_eq('Beaver partition elem 2 int',
                      x_r_int.add_mod(mpc.comms.reveal(r_int, SECOND_FIELD_SIZE), SECOND_FIELD_SIZE),
                      elem_1_int.add_mod(elem_2_int, SECOND_FIELD_SIZE))
    
    x_r_vec_int, r_vec_int = mpc.arithmetic.__beaver_partition(
        vector_1_int if mpc.pid == 1 else vector_2_int, SECOND_FIELD_SIZE)
    if mpc.pid == 0:
        mpc.comms.send(r_vec_int, 1)
        mpc.comms.send(r_vec_int, 2)
    else:
        r_0_int = mpc.comms.receive(0, len(vector_1_int), T=int)
        assert_eq('Beaver partition vector 1 int', r_0_int, mpc.comms.reveal(r_vec_int, SECOND_FIELD_SIZE))
        assert_eq('Beaver partition vector 2 int',
                      x_r_vec_int.add_mod(mpc.comms.reveal(r_vec_int, SECOND_FIELD_SIZE), SECOND_FIELD_SIZE),
                      vector_1_int.add_mod(vector_2_int, SECOND_FIELD_SIZE))
        
    x_r_mat_int, r_mat_int = mpc.arithmetic.__beaver_partition(
        matrix_1_int if mpc.pid == 1 else matrix_2_int, SECOND_FIELD_SIZE)
    if mpc.pid == 0:
        mpc.comms.send(r_mat_int, 1)
        mpc.comms.send(r_mat_int, 2)
    else:
        r_0_int = mpc.comms.receive(0, matrix_1_int.shape, T=int)
        assert_eq('Beaver partition matrix 1 int', r_0_int, mpc.comms.reveal(r_mat_int, SECOND_FIELD_SIZE))
        assert_eq('Beaver partition matrix 2 int',
                      x_r_mat_int.add_mod(mpc.comms.reveal(r_mat_int, SECOND_FIELD_SIZE), SECOND_FIELD_SIZE),
                      matrix_1_int.add_mod(matrix_2_int, SECOND_FIELD_SIZE))

    p_elem = mpc.arithmetic.multiply(
        elem_1 if mpc.pid == 1 else elem_2,
        elem_2 if mpc.pid == 1 else elem_1, modulus)
    revealed_p_elem = mpc.comms.reveal(p_elem, modulus)
    if mpc.pid != 0:
        assert_eq('Multiply elem', revealed_p_elem, elem_1.add_mod(elem_2, modulus).pow_mod(2, modulus))

    p_vec = mpc.arithmetic.multiply(
        vector_1 if mpc.pid == 1 else vector_2,
        vector_2 if mpc.pid == 1 else vector_1, modulus)
    revealed_p_vec = mpc.comms.reveal(p_vec, modulus)
    if mpc.pid != 0:
        assert_eq('Multiply vector', revealed_p_vec, vector_1.add_mod(vector_2, modulus).pow_mod(2, modulus))

    p_mat = mpc.arithmetic.multiply(
        matrix_1 if mpc.pid == 1 else matrix_2,
        matrix_2 if mpc.pid == 1 else matrix_1, modulus)
    revealed_p_mat = mpc.comms.reveal(p_mat, modulus)
    if mpc.pid != 0:
        assert_eq('Multiply matrix', revealed_p_mat, matrix_1.add_mod(matrix_2, modulus).pow_mod(2, modulus))

    p_mat_bulk = mpc.arithmetic.multiply_bulk(
        [matrix_1 if mpc.pid == 1 else matrix_2],
        [matrix_2 if mpc.pid == 1 else matrix_1], modulus)
    revealed_p_mat = mpc.comms.reveal(p_mat_bulk[0], modulus)
    if mpc.pid != 0:
        assert_eq('Multiply bulk', revealed_p_mat, matrix_1.add_mod(matrix_2, modulus).pow_mod(2, modulus))
    
    p_mat_bulk = mpc.arithmetic.multiply_mat_bulk(
        [matrix_1 if mpc.pid == 1 else matrix_2],
        [matrix_2 if mpc.pid == 1 else matrix_1], modulus)
    revealed_p_mat = mpc.comms.reveal(p_mat_bulk[0], modulus)
    added_mat = matrix_1.add_mod(matrix_2, modulus)
    if mpc.pid != 0:
        assert_eq('Multiply matrix bulk', revealed_p_mat, added_mat.matmul_mod(added_mat, modulus))

    p_vec = mpc.polynomial.powers(TP(2), 10, modulus)
    revealed_p_vec = mpc.comms.reveal(p_vec, modulus)
    if mpc.pid != 0:
        assert_eq('Powers elem', revealed_p_vec[10], TP(1048576))
    
    p_mat = mpc.polynomial.powers([TP(2), TP(0) if mpc.pid == 1 else TP(1), TP(3)], 10, modulus)
    revealed_p_mat = mpc.comms.reveal(p_mat, modulus)
    if mpc.pid != 0:
        assert_eq('Powers vector', revealed_p_mat[10], [TP(1048576), TP(1), TP(60466176)])
    
    coeff = [[TP(1) for _ in range(3)], [TP(2) for _ in range(3)], [TP(3) for _ in range(3)]]
    x = [TP(1), TP(2), TP(3)]
    p = mpc.polynomial.evaluate_poly(x, coeff, modulus)
    revealed_p = mpc.comms.reveal(p, modulus)
    if mpc.pid != 0:
        expected_mat = [
            [TP(7), TP(21), TP(43)],
            [TP(14), TP(42), TP(86)],
            [TP(21), TP(63), TP(129)]]
        assert_eq('Evaluate polynomial', revealed_p, expected_mat)
    
    size = 10
    if modulus.popcnt() != 1:
        input_bits = [
            [(TP(0) if i != (size - 1) else e) for i in range(size)] for e in a_bits]
        shared_input_bits = mpc.comms.share_from_trusted_dealer(input_bits, modulus)
        or_results = mpc.boolean.fan_in_or(shared_input_bits, modulus)
        revealed_or_results = mpc.comms.reveal(or_results, modulus)
        if mpc.pid != 0:
            assert_eq('Fan in or', revealed_or_results, a_bits)
    
        input_bits = [
            [(TP(0) if i != (size - 1) else e) for i in range(size)] for e in a_bits]
        shared_input_bits = mpc.comms.share_from_trusted_dealer(input_bits, modulus)
        prefix_or_results = mpc.boolean.prefix_or(shared_input_bits, modulus)
        revealed_prefix_or_results = mpc.comms.reveal(prefix_or_results, modulus)
        if mpc.pid != 0:
            assert_eq('Prefix or', revealed_prefix_or_results, input_bits)

        input_bits = [
            [(TP(1) if i != (size - 1) else e) for i in range(size)] for e in a_bits]
        shared_input_bits = mpc.comms.share_from_trusted_dealer(input_bits, modulus)
        and_results = mpc.boolean.fan_in_and(shared_input_bits, modulus)
        revealed_and_results = mpc.comms.reveal(and_results, modulus)
        if mpc.pid != 0:
            assert_eq('Fan in and', revealed_and_results, a_bits)
        
        input_bits = [
            [(TP(1) if i != (size - 1) else e) for i in range(size)] for e in a_bits]
        shared_input_bits = mpc.comms.share_from_trusted_dealer(input_bits, modulus)
        prefix_and_results = mpc.boolean.prefix_and(shared_input_bits, modulus)
        revealed_prefix_and_results = mpc.comms.reveal(prefix_and_results, modulus)
        if mpc.pid != 0:
            assert_eq('Prefix and', revealed_prefix_and_results, input_bits)
    
    shared_a_bits = mpc.comms.share_from_trusted_dealer([a_bits], modulus)
    shared_b_bits = mpc.comms.share_from_trusted_dealer([b_bits], modulus)
    carries = mpc.boolean.carries(shared_a_bits, shared_b_bits, False, modulus)
    revealed_carry_results = mpc.comms.reveal(carries, modulus)
    if mpc.pid != 0:
        assert_eq('Carries', revealed_carry_results, [a_bits] * [b_bits])
    
    bit_add = mpc.boolean.bit_add(shared_a_bits, shared_b_bits, False, modulus)
    revealed_bit_add_results = mpc.comms.reveal(bit_add, modulus)
    if mpc.pid != 0:
        assert_eq(
            'Bit add',
            revealed_bit_add_results,
            [[TP(1), TP(0), TP(0), TP(1), TP(0), TP(1), TP(0), TP(0)]])
    
    small_modulus = SECOND_RING_SIZE if modulus.popcnt() == 1 else SECOND_FIELD_SIZE
    bit_decomposition = mpc.boolean.bit_decomposition(mpc.comms.share_from_trusted_dealer([TP(0)], modulus), bitlen=MODULUS_BITS, small_modulus=small_modulus, modulus=modulus)
    revealed_bit_decomposition = mpc.comms.reveal(bit_decomposition, small_modulus)
    expected_decomposition_1 = [zeros_vec(MODULUS_BITS, TP=int)]
    if mpc.pid != 0:
        assert_eq(
            'Bit decomposition 1',
            revealed_bit_decomposition,
            expected_decomposition_1)
    
    bit_decomposition = mpc.boolean.bit_decomposition(mpc.comms.share_from_trusted_dealer([TP(1)], modulus), bitlen=MODULUS_BITS, small_modulus=small_modulus, modulus=modulus)
    revealed_bit_decomposition = mpc.comms.reveal(bit_decomposition, small_modulus)
    expected_decomposition_2 = [zeros_vec(MODULUS_BITS, TP=int)]
    expected_decomposition_2[0][0] = 1
    if mpc.pid != 0:
        assert_eq(
            'Bit decomposition 2',
            revealed_bit_decomposition,
            expected_decomposition_2)
    
    bit_decomposition = mpc.boolean.bit_decomposition(mpc.comms.share_from_trusted_dealer([TP(7)], modulus), bitlen=MODULUS_BITS, small_modulus=small_modulus, modulus=modulus)
    revealed_bit_decomposition = mpc.comms.reveal(bit_decomposition, small_modulus)
    expected_decomposition_3 = [zeros_vec(MODULUS_BITS, TP=int)]
    for i in range(3): expected_decomposition_3[0][i] = 1
    if mpc.pid != 0:
        assert_eq(
            'Bit decomposition 3',
            revealed_bit_decomposition,
            expected_decomposition_3)

    bit_decomposition = mpc.boolean.bit_decomposition(mpc.comms.share_from_trusted_dealer([TP(0), TP(1), TP(7)], modulus), bitlen=MODULUS_BITS, small_modulus=small_modulus, modulus=modulus)
    revealed_bit_decomposition = mpc.comms.reveal(bit_decomposition, small_modulus)
    expected_decomposition = [expected_decomposition_1[0], expected_decomposition_2[0], expected_decomposition_3[0]]
    if mpc.pid != 0:
        assert_eq(
            'Bit decomposition 4',
            revealed_bit_decomposition,
            expected_decomposition)
    
    public_vector = [7, 45, 114]
    delimiter_prime = 127
    key_bit_len = 2
    shared_keys = mpc.comms.share_from_trusted_dealer([TP(0), TP(1), TP(2)], modulus)
    elements = oblivious_get(mpc, shared_keys, key_bit_len, public_vector, delimiter_prime, modulus)
    revealed_elements = mpc.comms.reveal(elements, delimiter_prime)
    if mpc.pid != 0:
        assert_eq(
            'Oblivious get',
            [e[0] for e in revealed_elements],
            public_vector)

    not_less_results = mpc.boolean.less_than_bits(shared_a_bits, shared_b_bits, modulus)
    less_results = mpc.boolean.less_than_bits(shared_b_bits, shared_a_bits, modulus)
    revealed_not_less_results = mpc.comms.reveal(not_less_results, modulus)
    revealed_less_results = mpc.comms.reveal(less_results, modulus)
    if mpc.pid != 0:
        assert_eq('Not less than bits', revealed_not_less_results, [TP(0)])
        if modulus.popcnt() != 1:  # TODO: Check why it fails on rings
            assert_eq('Less than bits', revealed_less_results, [TP(1)])
    
    pos_neg = [
        double_to_fp(5.07, modulus),
        double_to_fp(-5.07, modulus)]
    if modulus.popcnt() != 1:
        pos_neg.append(double_to_fp(0.0, modulus))
    pos_neg_revealed = mpc.comms.reveal(mpc.boolean.is_positive(mpc.comms.share_from_trusted_dealer(pos_neg, modulus), modulus), modulus)
    if mpc.pid != 0:
        # TODO: Check why it fails on rings
        expected_is_positive = [TP(1), TP(0)] if modulus.popcnt() == 1 else [TP(1), TP(0), TP(0)]
        assert_eq('Is positive', pos_neg_revealed, expected_is_positive)

    shared_a = mpc.comms.share_from_trusted_dealer([
        double_to_fp(1.0, modulus),
        double_to_fp(4.0, modulus),
        double_to_fp(5.0, modulus),
        double_to_fp(-3.0, modulus)], modulus)
    shared_b = mpc.comms.share_from_trusted_dealer([
        double_to_fp(3.0, modulus),
        double_to_fp(4.0, modulus),
        double_to_fp(3.0, modulus),
        double_to_fp(-7.0, modulus)], modulus)
    if modulus.popcnt() != 1:  # TODO: Check why it fails on rings
        revealed_less_results = mpc.comms.reveal(mpc.boolean.less_than(shared_a, shared_b, modulus), modulus)
        if mpc.pid != 0:
            assert_eq('Less than fixed-point', revealed_less_results, [TP(1), TP(0), TP(0), TP(0)])
        revealed_greater_results = mpc.comms.reveal(mpc.boolean.greater_than(shared_a, shared_b, modulus), modulus)
        if mpc.pid != 0:
            assert_eq('Greater than fixed-point', revealed_greater_results, [TP(0), TP(0), TP(1), TP(1)])

    public_b = double_to_fp(3.0, modulus)
    revealed_less_results = mpc.comms.reveal(mpc.boolean.less_than_public(shared_a, public_b, modulus), modulus)
    if mpc.pid != 0:
        assert_eq('Less than public fixed-point', revealed_less_results, [TP(1), TP(0), TP(0), TP(1)])
    revealed_greater_results = mpc.comms.reveal(mpc.boolean.greater_than_public(shared_a, public_b, modulus), modulus)
    if mpc.pid != 0:
        assert_eq('Greater than public fixed-point', revealed_greater_results, [TP(0), TP(1), TP(1), TP(0)])
    

    shared_a = mpc.comms.share_from_trusted_dealer([TP(1), TP(4), TP(5), modulus - 3], modulus)
    shared_b = mpc.comms.share_from_trusted_dealer([TP(3), TP(4), TP(3), modulus - 7], modulus)
    if modulus.popcnt() != 1:  # TODO: Check why it fails on rings
        revealed_less_results = mpc.comms.reveal(mpc.boolean.less_than(shared_a, shared_b, modulus), modulus)
        if mpc.pid != 0:
            assert_eq('Less than', revealed_less_results, [TP(1), TP(0), TP(0), TP(0)])
        revealed_greater_results = mpc.comms.reveal(mpc.boolean.greater_than(shared_a, shared_b, modulus), modulus)
        if mpc.pid != 0:
            assert_eq('Greater than', revealed_greater_results, [TP(0), TP(0), TP(1), TP(1)])

    public_b = TP(3)
    revealed_less_results = mpc.comms.reveal(mpc.boolean.less_than_public(shared_a, public_b, modulus), modulus)
    if mpc.pid != 0:
        assert_eq('Less than public', revealed_less_results, [TP(1), TP(0), TP(0), TP(1)])
    revealed_greater_results = mpc.comms.reveal(mpc.boolean.greater_than_public(shared_a, public_b, modulus), modulus)
    if mpc.pid != 0:
        assert_eq('Greater than public', revealed_greater_results, [TP(0), TP(1), TP(1), TP(0)])
    
    shared_b_bits_small = mpc.comms.share_from_trusted_dealer([[0, 0, 1, 0, 1, 0, 0]], SECOND_FIELD_SIZE)
    demux = mpc.boolean.demultiplexer(shared_b_bits_small, SECOND_FIELD_SIZE)
    revealed_demux = mpc.comms.reveal(demux, SECOND_FIELD_SIZE)
    expected_demux = [zeros_vec(128, TP=int)]
    expected_demux[0][20] = 1
    if mpc.pid != 0:
        assert_eq(
            'Demultiplexer',
            revealed_demux,
            expected_demux) 

    pub = double_to_fp(5.07, modulus)
    a_increased = mpc.arithmetic.add_public(a, pub, modulus)
    float_a_increased = mpc.comms.print_fp(a_increased, modulus)
    if mpc.pid != 0:
        assert_eq_approx('Add public', float_a_increased, 8.21)

    float_a = mpc.comms.print_fp(a_increased, modulus)
    float_b = mpc.comms.print_fp(b, modulus)
    if mpc.pid != 0:
        assert_eq_approx('Print FP 1', float_a, 8.21)
        assert_eq_approx('Print FP 2', float_b, 5.95)
    
    result_elem = mpc.fp.trunc(
            mpc.arithmetic.multiply(a_increased, b, modulus),
            modulus)
    if mpc.pid != 0:
        assert_eq_approx(
            'Fixed-point multiplication / truncation',
            mpc.comms.print_fp(result_elem, modulus),
            48.8495)

    nee_input = [
        double_to_fp(256.2354325, modulus),
        double_to_fp(128.0, modulus),
        double_to_fp(32.0, modulus),
        double_to_fp(50.0, modulus)]
    if modulus.popcnt() != 1:  # TODO: Check why it fails on rings
        nee, nee_sqrt = mpc.fp.__normalizer_even_exp(nee_input, modulus)
        if mpc.pid != 0:
            revealed_nee = mpc.comms.reveal(nee, modulus)
            revealed_nee_sqrt = mpc.comms.reveal(nee_sqrt, modulus)
            assert_eq('Normalizer Even Exponent 1', revealed_nee, revealed_nee_sqrt ** 2)
            assert_eq(f'Normalizer Even Exponent 2', revealed_nee * nee_input < [TP(1) << NBIT_K for _ in range(len(nee_input))], True)
            # TODO: #188 revealed_nee * nee_input should be greater or equal than 2 ** (NBIT_K - 2) and not 2 ** (NBIT_K - 3) like in the test case
            assert_eq(f'Normalizer Even Exponent 3 {revealed_nee}, {nee_input}, {revealed_nee * nee_input}', revealed_nee * nee_input >= [TP(1) << (NBIT_K - 3) for _ in range(len(nee_input))], True)

    a_vec = [
        double_to_fp(18.0, modulus),
        double_to_fp(128.0, modulus),
        double_to_fp(32.0, modulus),
        double_to_fp(50.0, modulus)]
    b_vec, b_vec_inv = mpc.fp.fp_sqrt(a_vec, modulus)
    if mpc.pid != 0:
        assert_eq_approx(
            'Sqrt',
            mpc.comms.print_fp(b_vec, modulus),
            [6.0, 16.0, 8.0, 10.0])
        assert_eq_approx(
            'Sqrt inv',
            mpc.comms.print_fp(b_vec_inv, modulus),
            [0.1666666, 0.0625, 0.125, 0.1])
    
    a_vec = [
        double_to_fp(7.0, modulus),
        double_to_fp(7.0, modulus),
        double_to_fp(256.0, modulus),
        double_to_fp(99.0, modulus),
        double_to_fp(50.0, modulus)]
    b_vec = [
        double_to_fp(6.0, modulus),
        double_to_fp(6.0, modulus),
        double_to_fp(16.0, modulus),
        double_to_fp(3.0, modulus),
        double_to_fp(40.0, modulus)]
    result_vec = mpc.fp.fp_div(a_vec, b_vec, modulus)
    if mpc.pid != 0:
        assert_eq_approx(
            'Division',
            mpc.comms.print_fp(result_vec, modulus),
            [1.1666666, 1.1666666, 16.0, 33.0, 1.25])
    
    vec = [TP(4), TP(5), TP(6)]
    coefs = [TP(3), TP(2)]
    exps = [[3, 2, 1], [1, 2, 3]]
    poly_eval = mpc.polynomial._beaver_evaluate_poly(vec, vec.zeros(), coefs, exps, modulus)
    expected_poly_eval = offline_evaluate_poly(vec, coefs, exps, modulus)
    if mpc.pid != 0:
        assert_eq(f'Polynomial optimization on {alg_struct} 1', mpc.comms.reveal(poly_eval, modulus), expected_poly_eval)
    
    shared_vec_x_r, shared_vec_r = mpc.arithmetic.__beaver_partition(mpc.comms.share_from_trusted_dealer(vec, modulus), modulus)
    poly_eval = mpc.polynomial._beaver_evaluate_poly(shared_vec_x_r, shared_vec_r, coefs, exps, modulus)
    if mpc.pid != 0:
        assert_eq(f'Polynomial optimization on {alg_struct} 2', mpc.comms.reveal(poly_eval, modulus), expected_poly_eval)

    print(f'CP{mpc.pid}:\MPC tests passed on {alg_struct}.\n')



def test_mpc(mpc):
    print(f'CP{mpc.pid}:\tTesting the MPC ... \n')

    test_mpc_core(mpc, FIELD_SIZE)
    test_mpc_core(mpc, RING_SIZE)
    test_mhe(mpc)

    print(f'CP{mpc.pid}:\tMPC tests passed.\n')
