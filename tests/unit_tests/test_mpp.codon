from numpy.create import array, ones

from sequre.mpc.env import MPCEnv
from sequre.types.multiparty_partition import MPP
from sequre.utils.io import write_ndarray, read_ndarray
from sequre.utils.utils import __rand_mat

from ..utils import assert_eq


def test_mpp_getitem(mpp_a, raw_a):
    if mpp_a._mpc.pid:
        assert_eq("MPP 2-dim getitem", mpp_a[0].reveal(), raw_a[0])
        assert_eq("MPP 1-dim getitem", mpp_a[0][0].reveal(), raw_a[0, 0])
        assert_eq("MPP 2-dim get slice", mpp_a[:2].reveal(), raw_a[:2])
        assert_eq("MPP 2-dim get slice-slice tuple", mpp_a[:2, :2].reveal(), raw_a[:2, :2])
        assert_eq("MPP 2-dim get slice-int tuple", mpp_a[:2, 2].reveal(), raw_a[:2, 2:3])
        assert_eq("MPP 2-dim get int-slice tuple", mpp_a[2, :2].reveal(), raw_a[2, :2])
        assert_eq("MPP 2-dim get int-int tuple", mpp_a[2, 2].reveal(), raw_a[2, 2:3])
        
        case_empty_partition_int_idx = mpp_a[:4][0]
        assert_eq(f"MPP 2-dim get: case empty second partition int index. Ratios: {case_empty_partition_int_idx._ratios}", case_empty_partition_int_idx.reveal(), raw_a[0])
        case_empty_partition_int_idx = mpp_a[4:6][0]
        assert_eq(f"MPP 2-dim get: case empty first partition int index. Ratios: {case_empty_partition_int_idx._ratios}", case_empty_partition_int_idx.reveal(), raw_a[4])
        case_empty_partition_slice_idx = mpp_a[:4][1:]
        assert_eq(f"MPP 2-dim get: case empty second partition slice index. Ratios: {case_empty_partition_slice_idx._ratios}", case_empty_partition_slice_idx.reveal(), raw_a[:4][1:])
        case_empty_partition_slice_idx = mpp_a[4:][1:]
        assert_eq(f"MPP 2-dim get: case empty first partition slice index. Ratios: {case_empty_partition_slice_idx._ratios}", case_empty_partition_slice_idx.reveal(), raw_a[4:][1:])


def test_mpp_setitem(_mpp_a, _raw_a):
    mpc = _mpp_a._mpc
    
    mpp_a, raw_a = _mpp_a.copy(), _raw_a.copy()
    mpp_a[0] = mpp_a[1]
    raw_a[0] = raw_a[1]
    if mpc.pid:
        assert_eq("MPP 2-dim setitem", mpp_a.reveal(), raw_a)
    
    mpp_a, raw_a = _mpp_a.copy(), _raw_a.copy()
    mpp_row = mpp_a[0]
    mpp_row[0] = mpp_row[1]
    raw_a[0, 0] = raw_a[0, 1]
    if mpc.pid:
        assert_eq("MPP 1-dim setitem", mpp_row.reveal(), raw_a[0])
    
    mpp_a, raw_a = _mpp_a.copy(), _raw_a.copy()
    mpp_a[:2] = mpp_a[1:3]
    raw_a[:2] = raw_a[1:3]
    if mpc.pid:
        assert_eq("MPP 2-dim set slice", mpp_a.reveal(), raw_a)
    
    mpp_a, raw_a = _mpp_a.copy(), _raw_a.copy()
    mpp_a[:2, :2] = mpp_a[1:3, 1:3]
    raw_a[:2, :2] = raw_a[1:3, 1:3]
    if mpc.pid:
        assert_eq("MPP 2-dim set slice-slice tuple", mpp_a.reveal(), raw_a)
    
    mpp_a, raw_a = _mpp_a.copy(), _raw_a.copy()
    mpp_a[:2, 2] = mpp_a[1:3, 3]
    raw_a[:2, 2] = raw_a[1:3, 3]
    if mpc.pid:
        assert_eq("MPP 2-dim set slice-int tuple", mpp_a.reveal(), raw_a)
    
    mpp_a, raw_a = _mpp_a.copy(), _raw_a.copy()
    mpp_a[2, :2] = mpp_a[3, 1:3]
    raw_a[2, :2] = raw_a[3, 1:3]
    if mpc.pid:
        assert_eq("MPP 2-dim set int-slice tuple", mpp_a.reveal(), raw_a)
    
    mpp_a, raw_a = _mpp_a.copy(), _raw_a.copy()
    mpp_a[2, 2] = mpp_a[3, 3]
    raw_a[2, 2] = raw_a[3, 3]
    if mpc.pid:
        assert_eq("MPP 2-dim set int-int tuple", mpp_a.reveal(), raw_a)


def test_mpp_transpose(mpp_a, raw_a):
    mpc = mpp_a._mpc
    mhe_t = mpp_a.T.T
    if mpc.pid:
        assert_eq("MPP lazy transpose", mhe_t.reveal(), raw_a)

    mhe_t = mpp_a.T
    if mpc.pid:
        assert_eq("MPP actual transpose", mhe_t.reveal(), raw_a.T)


def test_mpp_mpc_switching(mpp_a, raw_a):
    mpc = mpp_a._mpc
    sharetensor_a = mpp_a.to_mpc()
    if mpc.pid:
        assert_eq("MPP -> MPC switch", sharetensor_a.reveal(mpc).astype(int), raw_a)

    mpp_a = sharetensor_a.to_mpp(mpc, mpp_a._ratios, dtype=mpp_a.dtype)
    if mpc.pid:
        assert_eq("MPC -> MPP switch", mpp_a.reveal(), raw_a)


def test_mpp_elem_wise_operations(mpp_a, mpp_b, raw_a, raw_b):
    mpc = mpp_a._mpc
    mpp_add = mpp_a + mpp_b
    if mpc.pid:
        assert_eq("MPP addition", mpp_add.reveal(), raw_a + raw_b)

    mpp_add = (mpp_a.astype(float) + mpp_b).astype(int)
    if mpc.pid:
        assert_eq("MPP autocast addition", mpp_add.reveal(), raw_a + raw_b)

    _ones = ones((mpp_a._ratios.sum(), raw_a.shape[1]), dtype=int)
    mpp_public_add = mpp_a + _ones
    if mpc.pid:
        assert_eq("MPP public addtition", mpp_public_add.reveal(), raw_a + _ones)

    mpp_sub = mpp_a - mpp_b
    if mpc.pid:
        assert_eq("MPP subtraction", mpp_sub.reveal(), raw_a - raw_b)

    mpp_mul = mpp_a * mpp_b
    if mpc.pid:
        assert_eq("MPP multiplication", mpp_mul.reveal(), raw_a * raw_b)
    
    mpp_mul = (mpp_a.astype(float) * mpp_b).astype(int)
    if mpc.pid:
        assert_eq("MPP autocast multiplication", mpp_mul.reveal(), raw_a * raw_b)
    
    mpp_a_row_mat = mpp_a[0].expand_dims(axis=0)
    row_mat_add = mpp_a_row_mat + mpp_a_row_mat
    raw_a_row_mat = raw_a[0].expand_dims(axis=0)
    if mpc.pid:
        assert_eq("MPP addition at CP1 only", row_mat_add.reveal(), raw_a_row_mat + raw_a_row_mat)


def test_mpp_matmul_operations(mpp_a, mpp_b, raw_a, raw_b):
    mpc = mpp_a._mpc
    mpp_dot = mpp_a.dot()
    raw_dot = (raw_a * raw_a).sum(axis=1).expand_dims(axis=1)
    if mpc.pid:
        assert_eq("MPP dot 2-dim", mpp_dot.reveal(), raw_dot)
    
    mpp_dot_1_dim = mpp_a[0].dot()
    if mpc.pid:
        assert_eq("MPP dot 1-dim", mpp_dot_1_dim.reveal(), raw_dot[0])
    
    mpp_matmul = mpp_a @ mpp_b.T
    raw_matmul = raw_a @ raw_b.T
    if mpc.pid:
        assert_eq("MPP matrix multiplication non-transposed x transposed", mpp_matmul.reveal(), raw_matmul)

    mpp_matmul = mpp_a.T @ mpp_b
    if mpc.pid:
        assert_eq("MPP matrix multiplication transposed x non-transposed", mpp_matmul.reveal(), raw_a.T @ raw_b)

    _ones = ones((mpp_a._ratios.sum(), raw_a.shape[1]), dtype=int).T
    mpp_public_matmul = mpp_a @ _ones
    if mpc.pid:
        assert_eq("MPP matrix public multiplication", mpp_public_matmul.reveal(), raw_a @ _ones)

    mpp_a_row_mat = mpp_a[0].expand_dims(axis=0)
    row_mat_matmul = mpp_a_row_mat.T @ mpp_a_row_mat
    raw_a_row_mat = raw_a[0].expand_dims(axis=0)
    if mpc.pid:
        assert_eq("MPP matrix multiplication transposed x non-transposed at CP1 only", row_mat_matmul.reveal(), raw_a_row_mat.T @ raw_a_row_mat)
    
    mpp_a_row_mat = mpp_a[4].expand_dims(axis=0)
    row_mat_matmul = mpp_a_row_mat.T @ mpp_a_row_mat
    raw_a_row_mat = raw_a[4].expand_dims(axis=0)
    if mpc.pid:
        assert_eq("MPP matrix multiplication transposed x non-transposed at CP2 only", row_mat_matmul.reveal(), raw_a_row_mat.T @ raw_a_row_mat)


def test_mpp_transposed_operations(mpp_a, raw_a):
    mpc = mpp_a._mpc
    mpp_dot = mpp_a @ mpp_a.T
    mpp_transposed_add_1 = mpp_dot + mpp_dot.T
    mpp_transposed_add_2 = mpp_dot.T + mpp_dot
    dot = raw_a @ raw_a.T
    if mpc.pid:
        assert_eq("MPP transposed addition", mpp_transposed_add_1.reveal(), dot + dot.T)
        assert_eq("MPP transposed addition", mpp_transposed_add_2.reveal(), dot + dot.T)


def test_mpp[TP](mpc: MPCEnv[TP], modulus: TP):
    mpc.comms.sync_parties()
    alg_struct = "ring" if modulus.popcnt() == 1 else "field"
    print(f'CP{mpc.pid}:\tTesting Sequre MHE MPP on {alg_struct}... \n')
    rows, cols = 4, 32

    a_partition_path = "tests/data/mhe/a_partition.bin"
    b_partition_path = "tests/data/mhe/b_partition.bin"

    if mpc.pid == 0:
        with open(a_partition_path, "wb") as f: write_ndarray(f, array(__rand_mat([rows, cols], 100, TP=int)), binary=True)
        with open(b_partition_path, "wb") as f: write_ndarray(f, array(__rand_mat([rows, cols], 100, TP=int)), binary=True)
    
    mpc.comms.sync_parties()
    
    a_partition = read_ndarray(open(a_partition_path), (rows, cols), True, dtype=int)
    b_partition = read_ndarray(open(b_partition_path), (rows, cols), True, dtype=int)

    raw_a = [a_partition for _ in range(mpc.comms.number_of_parties - 1)].unfence()
    raw_b = [b_partition for _ in range(mpc.comms.number_of_parties - 1)].unfence()

    mpc.comms.sequential(lambda: print(f"CP{mpc.pid}: Printing MPP test data A for debugging:", raw_a), False)
    mpc.comms.sync_parties()
    mpc.comms.sequential(lambda: print(f"CP{mpc.pid}: Printing MPP test data B for debugging:", raw_b), False)
    
    mpp_a = MPP.collective_load(mpc, a_partition_path, rows=rows, cols=cols, binary=True, dtype=int)
    mpp_b = MPP.collective_load(mpc, b_partition_path, rows=rows, cols=cols, binary=True, dtype=int)

    if mpc.pid:
        assert_eq("MPP load/collect/decrypt 1", mpp_a.reveal(), raw_a)
        assert_eq("MPP load/collect/decrypt 2", mpp_b.reveal(), raw_b)

    test_mpp_getitem(mpp_a, raw_a)
    test_mpp_setitem(mpp_a, raw_a)
    test_mpp_transpose(mpp_a, raw_a)
    test_mpp_mpc_switching(mpp_a, raw_a)
    test_mpp_elem_wise_operations(mpp_a, mpp_b, raw_a, raw_b)
    test_mpp_matmul_operations(mpp_a, mpp_b, raw_a, raw_b)
    test_mpp_transposed_operations(mpp_a, raw_a)

    print(f'CP{mpc.pid}:\tSequre MHE MPP tests on {alg_struct} passed.\n')
