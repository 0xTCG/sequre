import prg

from copy import copy

import sequre.lattiseq.ckks as ckks
import sequre.lattiseq.ring as ring
import sequre.lattiseq.ringqp as ringqp
import sequre.lattiseq.dckks as dckks

from sequre.utils.param import FIELD_SIZE, RING_SIZE

from ..utils import assert_eq, random_floats


def test_send_receive_poly(mpc):
    q = ring.new_poly(10, 10)
    p = ring.new_poly(10, 10)
    qp = ringqp.Poly(q=q, p=p)

    received_q = copy(q)
    received_qp = copy(qp)

    if mpc.pid == 1:
        mpc.randomness.switch_seed(2)
        q.randomize(upper_bound=u64(100))
        p.randomize(upper_bound=u64(100))
        mpc.randomness.restore_seed(2)
        
        mpc.comms.send_as_jar(q, 2)
        mpc.comms.send_as_jar(qp, 2)
        received_q = mpc.comms.receive_as_jar(2, ring.Poly)
        received_qp = mpc.comms.receive_as_jar(2, ringqp.Poly)
    elif mpc.pid == 2:
        mpc.randomness.switch_seed(1)
        q.randomize(upper_bound=u64(100))
        p.randomize(upper_bound=u64(100))
        mpc.randomness.restore_seed(1)
        
        received_q = mpc.comms.receive_as_jar(1, ring.Poly)
        received_qp = mpc.comms.receive_as_jar(1, ringqp.Poly)
        mpc.comms.send_as_jar(q, 1)
        mpc.comms.send_as_jar(qp, 1)

    assert_eq(f"CP{mpc.pid}:\tMHE send/receive poly", received_q, q)
    assert_eq(f"CP{mpc.pid}:\tMHE send/receive QP poly", received_qp, qp)


def test_send_receive_ciphertext(mpc):
    ct = ckks.Ciphertext()
    received_ct = ckks.Ciphertext()

    if mpc.pid == 1:
        mpc.randomness.switch_seed(2)
        values = random_floats((mpc.he.crypto_params.params.slots(),))
        mpc.randomness.restore_seed(2)
        
        ct = mpc.he.enc_vector(values, T=ckks.Ciphertext)[0]
        mpc.comms.send_as_jar(ct, 2)
        received_ct = mpc.comms.receive_as_jar(2, ckks.Ciphertext)
    elif mpc.pid == 2:
        mpc.randomness.switch_seed(1)
        values = random_floats((mpc.he.crypto_params.params.slots(),))
        mpc.randomness.restore_seed(1)
        
        ct = mpc.he.enc_vector(values, T=ckks.Ciphertext)[0]
        received_ct = mpc.comms.receive_as_jar(1, ckks.Ciphertext)
        mpc.comms.send_as_jar(ct, 1)
    
    assert_eq(f"CP{mpc.pid}:\tMHE send/receive ciphertext", ct, received_ct)


def test_collective_decryption(mpc):
    with mpc.randomness.seed_switch(-1):
        values = random_floats((mpc.he.crypto_params.params.slots(),))
    
    if mpc.pid > 0:
        precision_stats = mpc.he.precision_stats(
            result=mpc.he.decode_vector(
                enc=mpc.he.collective_decrypt_vector(
                    mpc.he.enc_vector(values, T=ckks.Ciphertext), mpc.comms.hub_pid),
                DTP=float),
            expected=values)
    
        assert_eq(f"CP{mpc.pid}:\tMHE collective decryption", precision_stats.min_precision.l2 > 11, True)


def test_addition(mpc):
    with mpc.randomness.seed_switch(-1):
        values_1 = random_floats((mpc.he.crypto_params.params.slots(),))
        values_2 = random_floats((mpc.he.crypto_params.params.slots(),))

    if mpc.pid > 0:
        ciphervector_1 = mpc.he.enc_vector(values_1, T=ckks.Ciphertext)
        ciphervector_2 = mpc.he.enc_vector(values_2, T=ckks.Ciphertext)
        ciphertext_sum = mpc.he.add(ciphervector_1, ciphervector_2)

        precision_stats = mpc.he.precision_stats(
            result=mpc.he.decode_vector(
                enc=mpc.he.collective_decrypt_vector(ciphertext_sum, mpc.comms.hub_pid),
                DTP=float),
            expected=values_1 + values_2)
        
        assert_eq(f"CP{mpc.pid}:\tMHE addition", precision_stats.min_precision.l2 > 10, True)


def test_multiplication(mpc):
    with mpc.randomness.seed_switch(-1):
        values_1 = random_floats((mpc.he.crypto_params.params.slots(),))
        values_2 = random_floats((mpc.he.crypto_params.params.slots(),))
    
    if mpc.pid > 0:
        ciphervector_1 = mpc.he.enc_vector(values_1, T=ckks.Ciphertext)
        ciphervector_2 = mpc.he.enc_vector(values_2, T=ckks.Ciphertext)
        ciphertext_product = mpc.he.mul(ciphervector_1, ciphervector_2)

        precision_stats = mpc.he.precision_stats(
            result=mpc.he.decode_vector(
                enc=mpc.he.collective_decrypt_vector(ciphertext_product, mpc.comms.hub_pid),
                DTP=float),
            expected=values_1 * values_2)
        
        assert_eq(f"CP{mpc.pid}:\tMHE multiplication level", ciphertext_product[0].level(), ciphervector_1[0].level()) # Rescaling is done lazily
        assert_eq(f"CP{mpc.pid}:\tMHE multiplication result", precision_stats.min_precision.l2 >= 10, True)


def test_rotation(mpc):
    with mpc.randomness.seed_switch(-1):
        values = random_floats((mpc.he.crypto_params.params.slots(),))
        k = prg.randint(1, 10)
        expected_values = values[k:]
        expected_values.extend(values[:k])
    
    if mpc.pid > 0:
        ciphervector = mpc.he.enc_vector(values, T=ckks.Ciphertext)
        rotated_ciphervector = mpc.he.rotate(ciphervector, k)

        precision_stats = mpc.he.precision_stats(
            result=mpc.he.decode_vector(
                enc=mpc.he.collective_decrypt_vector(rotated_ciphervector, mpc.comms.hub_pid),
                DTP=float),
            expected=expected_values)
        
        assert_eq(f"CP{mpc.pid}:\tMHE rotation by {k} result", precision_stats.min_precision.l2 > 10, True)


def test_arithmetics(mpc):
    test_addition(mpc)
    test_multiplication(mpc)
    test_rotation(mpc)


def test_collective_bootstrapping(mpc):
    with mpc.randomness.seed_switch(-1):
        values = random_floats((mpc.he.crypto_params.params.slots(),))

    if mpc.pid > 0:
        ciphervector = mpc.he.enc_vector(values, T=ckks.Ciphertext)
        initial_level = ciphervector[0].level()

        mpc.he.crypto_params.evaluator.drop_level(ciphervector[0], initial_level - mpc.he.bootstrap_min_level - 1)
        ciphertext_bootstrapped = ciphervector[0].copy()
        mpc.he.collective_bootstrap(ciphertext_bootstrapped, mpc.comms.hub_pid)
        ciphertext_bootstrapped = mpc.comms.broadcast_from(ciphertext_bootstrapped, mpc.comms.hub_pid)
        boot_lvl = ciphertext_bootstrapped.level()

        precision_stats = mpc.he.precision_stats(
            result=mpc.he.decode_vector(
                enc=mpc.he.collective_decrypt_vector([ciphertext_bootstrapped], mpc.comms.hub_pid),
                DTP=float),
            expected=values)
        
        if mpc.pid == mpc.comms.hub_pid:  # TODO: Check why ciphertext level is not updated on other CPs
            assert_eq(f"CP{mpc.pid}:\tMHE collective bootstrapping level (Bootstrapped level: {boot_lvl}. Initial level: {initial_level}. Reduced level: {ciphervector[0].level()})", boot_lvl, initial_level)
            assert_eq(f"CP{mpc.pid}:\tMHE collective bootstrapping result", precision_stats.min_precision.l2 > 13, True)


def test_cipher_to_additive_plaintext_conversion(mpc):
    with mpc.randomness.seed_switch(-1):
        values = random_floats((mpc.he.crypto_params.params.slots(),))

    if mpc.pid > 0:
        ciphervector = mpc.he.enc_vector(values, T=ckks.Ciphertext)

        secret_share = mpc.he.cipher_to_additive_plaintext(ciphervector[0], mpc.comms.hub_pid)
        ciphertext = mpc.he.additive_plaintext_to_cipher(secret_share, mpc.comms.hub_pid)

        precision_stats = mpc.he.precision_stats(
            result=mpc.he.decode_vector(
                enc=mpc.he.collective_decrypt_vector([ciphertext], mpc.comms.hub_pid),
                DTP=float),
            expected=values)
        
        if mpc.pid == mpc.comms.hub_pid:
            assert_eq(f"CP{mpc.pid}:\tMHE E2S and S2E switching", precision_stats.min_precision.l2 > 13, True)


def test_cipher_to_additive_share_vec_conversion(mpc, mpc_modulus):
    with mpc.randomness.seed_switch(-1):
        values = random_floats((mpc.he.crypto_params.params.slots(),))

    if mpc.pid > 0:
        ciphervector = mpc.he.enc_vector(values, T=ckks.Ciphertext)

        secret_share = mpc.he.ciphervector_to_additive_share_vector(ciphervector, len(values), mpc_modulus, dtype=float)
        ciphervector = mpc.he.additive_share_vector_to_ciphervector(secret_share, mpc_modulus)

        precision_stats = mpc.he.precision_stats(
            result=mpc.he.decode_vector(
                enc=mpc.he.collective_decrypt_vector(ciphervector, mpc.comms.hub_pid),
                DTP=float),
            expected=values)
        
        if mpc.pid == mpc.comms.hub_pid:
            assert_eq(f"CP{mpc.pid}:\tMHE additive-share and ciphertext switching on {'ring' if mpc_modulus.popcnt() == 1 else 'field'}", precision_stats.min_precision.l2 > 10, True)
    

def test_mhe(mpc):
    print(f'CP{mpc.pid}:\tTesting MHE ... \n')

    test_send_receive_poly(mpc)
    test_send_receive_ciphertext(mpc)
    test_collective_decryption(mpc)
    test_arithmetics(mpc)
    test_collective_bootstrapping(mpc)
    test_cipher_to_additive_plaintext_conversion(mpc)
    test_cipher_to_additive_share_vec_conversion(mpc, FIELD_SIZE)
    test_cipher_to_additive_share_vec_conversion(mpc, RING_SIZE)

    print(f'CP{mpc.pid}:\tMHE tests passed.\n')
