from .. import seqan_ungapped_kmer_encode, load_ibf, bulk_count, \
    _trailing_zeros, query_ibf, seqan_ibf_hash, SEQAN_HASH_SEEDS

from sequre.utils.testing import assert_eq
from sequre.utils.utils import __rand_mat
from sequre.utils.param import FIELD_SIZE
from sequre.utils.io import write_matrix, read_matrix


def test_seqan_kmer_encoding():
    expected_encodings = [
        1184622173257u,
        5923110866288u,
        10542068003319u,
        14563367360345u,
        15596377817352u,
        1687943774261u
    ]
    
    encodings = list(seqan_ungapped_kmer_encode(s'ACGNTAGCACGNTAGCACGNTAGC', 5))
    assert_eq('Seqan k-mer encoding', encodings, expected_encodings)


def test_seqan_load_ibf():
    expected_value = 1566604024869293150u << 1
    ibf, _, __ = load_ibf('tests/data/ganon/sample_bacteria_raw_ibf.bin', 63)

    assert_eq('Seqan load ibf', ibf[0], expected_value)


def test_seqan_ibf_hash():
    expected_hashes = [
        [1911488, 350080, 2274880, 3018048],
        [2308352, 2848960, 130496, 1999168],
        [167104, 2689728, 381824, 886272],
        [1529664, 628672, 2485696, 2773312],
        [2531520, 1445504, 603392, 57472],
        [2528448, 3995200, 111168, 3011904]
    ] >> 6

    bin_count = 63
    ibf, _, __ = load_ibf('tests/data/ganon/sample_bacteria_raw_ibf.bin', bin_count)
    ibf_hash_count = 4
    sigma = 5
    ibf_bin_size = u64(len(ibf))
    hash_shift = _trailing_zeros(ibf_bin_size)

    encodings = list(seqan_ungapped_kmer_encode(s'ACGNTAGCACGNTAGCACGNTAGC', sigma))
    hashes = [[seqan_ibf_hash(kmer_encoding, seed, ibf_bin_size, hash_shift) for seed in SEQAN_HASH_SEEDS[:ibf_hash_count]] for kmer_encoding in encodings]

    assert_eq('Seqan IBF hash', hashes, expected_hashes)


def test_seqan_query_ibf():
    expected_queries = [
        70368752566272u,
        0u,
        565148976676864u,
        33554432u,
        0u,
        0u
    ]

    bin_count = 63
    ibf, _, __ = load_ibf('tests/data/ganon/sample_bacteria_raw_ibf.bin', bin_count)
    ibf_hash_count = 4
    sigma = 5
    ibf_bin_size = u64(len(ibf))
    hash_shift = _trailing_zeros(ibf_bin_size)

    queries = [
        query_ibf(
            ibf,
            kmer_encoding,
            ibf_hash_count,
            ibf_bin_size,
            bin_count,
            hash_shift) for kmer_encoding in seqan_ungapped_kmer_encode(s'ACGNTAGCACGNTAGCACGNTAGC', sigma)]
    
    assert_eq('Seqan query IBF', queries, expected_queries)


def test_seqan_bulk_count():
    expected_count = [
        0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
        1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    ]
    
    ibf, _, __ = load_ibf('tests/data/ganon/sample_bacteria_raw_ibf.bin', 63)
    count = bulk_count(ibf, list(seqan_ungapped_kmer_encode(s'ACGNTAGCACGNTAGCACGNTAGC', 5)), 63, 4)

    assert_eq('Seqan bulk count', count, expected_count)


def test_seqan():
    print(f'Testing SeqAn ... \n')
    
    test_seqan_kmer_encoding()
    test_seqan_ibf_hash()
    test_seqan_load_ibf()
    test_seqan_query_ibf()
    test_seqan_bulk_count()


def test_io():
    print(f'Testing I/O ... \n')
    
    data_path = 'tests/data/temp.bin'
    rows, cols = 10, 10
    random_matrix = __rand_mat([rows, cols], FIELD_SIZE)
    
    with open(data_path, 'wb') as f:
        write_matrix(f, random_matrix, binary=True, TP=type(FIELD_SIZE))
    with open(data_path) as f:
        assert_eq('Binary file i/o', read_matrix(f, rows, cols, True, TP=type(FIELD_SIZE)), random_matrix)
    

def test_helpers():
    print(f'Testing helpers ... \n')
    
    test_io()
    test_seqan()
    
    print(f'Helpers tests passed.\n')
