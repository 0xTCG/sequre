from sequre.utils.param import FIELD_SIZE, RING_SIZE
from sequre.utils.constants import RUN_TOGGLES


def test_unit(mpc, tests_toggles):
    run_units = tests_toggles[RUN_TOGGLES.UNIT_TEST_FLAG] or tests_toggles[RUN_TOGGLES.RUN_ALL_FLAG]
    
    if mpc.pid == 0:
        if tests_toggles[RUN_TOGGLES.HELPERS_TEST_FLAG] or run_units:
            from test_helpers import test_helpers
            test_helpers()
        
        if tests_toggles[RUN_TOGGLES.PRIMITIVES_TEST_FLAG] or run_units:
            from test_primitives import test_primitives
            test_primitives(FIELD_SIZE)
            with mpc.base_modulus_switch(RING_SIZE):
                test_primitives(RING_SIZE)

        if tests_toggles[RUN_TOGGLES.HE_TEST_FLAG] or run_units:
            from test_he import test_he
            test_he()
    
    if tests_toggles[RUN_TOGGLES.MPC_TEST_FLAG] or run_units:
        from test_mpc import test_mpc
        test_mpc(mpc)

    if tests_toggles[RUN_TOGGLES.SHARETENSOR_TEST_FLAG] or run_units:
        from test_sharetensor import test_sharetensor
        test_sharetensor(mpc, FIELD_SIZE)
        with mpc.base_modulus_switch(RING_SIZE):
            test_sharetensor(mpc, RING_SIZE)

    if tests_toggles[RUN_TOGGLES.CIPHERTENSOR_TEST_FLAG] or run_units:
        from test_ciphertensor import test_ciphertensor
        test_ciphertensor(mpc)
    
    if tests_toggles[RUN_TOGGLES.MPP_TEST_FLAG] or run_units:
        from test_mpp import test_mpp
        test_mpp(mpc, FIELD_SIZE)
        with mpc.base_modulus_switch(RING_SIZE):
            test_mpp(mpc, RING_SIZE)
    
    if tests_toggles[RUN_TOGGLES.MPA_TEST_FLAG] or run_units:
        from test_mpa import test_mpa
        test_mpa(mpc, FIELD_SIZE)
        with mpc.base_modulus_switch(RING_SIZE):
            test_mpa(mpc, RING_SIZE)
    
    if tests_toggles[RUN_TOGGLES.IR_PASSES_TEST_FLAG] or run_units:
        from test_ir_passes import test_ir_passes
        test_ir_passes(mpc)
    
    if run_units:
        print(f'CP{mpc.pid}:\tAll substantial tests passed.\n')
