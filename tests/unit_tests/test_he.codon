import math, prg

import sequre.lattiseq.ckks as ckks
import sequre.lattiseq.rlwe as rlwe
import sequre.lattiseq.ring as ring

from sequre.lattiseq.stats import plot_precision_stats
from sequre.utils.testing import assert_eq
from sequre.utils.utils import random_complex


def test_encryption_decryption_for_values(values, plaintext, params, encoder, encryptor, decryptor):
    print('Encoding values ...')
    encoder.encode(values, plaintext, params.log_slots)

    print('Encrypting values ...')
    ciphertext = encryptor.encrypt_new(plaintext)

    print('Evaluating precision ...')
    precision_stats = plot_precision_stats(params, ciphertext, values, decryptor, encoder)
    
    assert_eq("Homomorphic encryption/decryption", precision_stats.min_precision.l2 > 15, True)


def test_encrypt_decrypt(params, encoder, encryptor, decryptor):
    print('Initializing HE plaintext ...')
    plaintext = ckks.new_plaintext(params, params.max_level(), params.default_scale / 16)

    test_encryption_decryption_for_values(
        values=[complex(2 * math.pi, 0) for _ in range(params.slots())],
        plaintext=plaintext,
        params=params,
        encoder=encoder,
        encryptor=encryptor,
        decryptor=decryptor)
    
    test_encryption_decryption_for_values(
        values=[complex(2 * math.pi, math.pi) for _ in range(params.slots())],
        plaintext=plaintext,
        params=params,
        encoder=encoder,
        encryptor=encryptor,
        decryptor=decryptor)
    
    test_encryption_decryption_for_values(
        values=[complex(float(i % 10), 0) for i in range(params.slots())],
        plaintext=plaintext,
        params=params,
        encoder=encoder,
        encryptor=encryptor,
        decryptor=decryptor)
    
    test_encryption_decryption_for_values(
        values=random_complex((params.slots(),)),
        plaintext=plaintext,
        params=params,
        encoder=encoder,
        encryptor=encryptor,
        decryptor=decryptor)


def test_negation(params, encoder, encryptor, decryptor, evaluator):
    elem = random_complex((params.slots(),))
    expected_negation = [complex(-e.real, -e.imag) for  e in elem]
    
    print('Initializing HE plaintext for negation ...')
    plaintext = ckks.new_plaintext(
        params, params.max_level(), params.default_scale / 16)

    print('Encoding values for negation ...')
    encoder.encode(elem, plaintext, params.log_slots)

    print('Encrypting values for negation ...')
    ciphertext = encryptor.encrypt_new(plaintext)

    print('Evaluating ciphertext negation ...')
    ciphertext_negation = evaluator.neg_new(ciphertext)

    print('Evaluating precision for negation ...')
    precision_stats = plot_precision_stats(
        params, ciphertext_negation, expected_negation, decryptor, encoder)
    
    assert_eq(
        "Homomorphic negation",
        precision_stats.min_precision.l2 > 15,
        True)


def test_addition(params, encoder, encryptor, decryptor, evaluator):
    addend_1 = random_complex((params.slots(),))
    addend_2 = random_complex((params.slots(),))
    expected_sum = [e_1 + e_2 for e_1, e_2 in zip(addend_1, addend_2)]
    
    print('Initializing HE plaintext for addition ...')
    plaintext_1 = ckks.new_plaintext(
        params, params.max_level(), params.default_scale / 16)
    plaintext_2 = ckks.new_plaintext(
        params, params.max_level(), params.default_scale / 16)

    print('Encoding values for addition ...')
    encoder.encode(addend_1, plaintext_1, params.log_slots)
    encoder.encode(addend_2, plaintext_2, params.log_slots)

    print('Encrypting values for addition ...')
    ciphertext_1 = encryptor.encrypt_new(plaintext_1)
    ciphertext_2 = encryptor.encrypt_new(plaintext_2)

    print('Evaluating ciphertext addition ...')
    cipher_cipher_sum = evaluator.add_new(ciphertext_1, ciphertext_2)
    cipher_plain_sum = evaluator.add_new(ciphertext_1, plaintext_2)

    print('Evaluating precision for addition ...')
    cipher_cipher_stats = plot_precision_stats(
        params, cipher_cipher_sum, expected_sum, decryptor, encoder)
    cipher_plain_stats = plot_precision_stats(
        params, cipher_plain_sum, expected_sum, decryptor, encoder)
    
    assert_eq(
        "Homomorphic cipher-cipher addition",
        cipher_cipher_stats.min_precision.l2 > 15,
        True)
    assert_eq(
        "Homomorphic cipher-plain addition",
        cipher_plain_stats.min_precision.l2 > 15,
        True)


def test_subtraction(params, encoder, encryptor, decryptor, evaluator):
    minuend = random_complex((params.slots(),))
    subtrahend = random_complex((params.slots(),))
    expected_diff = [e_1 - e_2 for e_1, e_2 in zip(minuend, subtrahend)]
    
    print('Initializing HE plaintext for subtraction ...')
    plaintext_minuend = ckks.new_plaintext(
        params, params.max_level(), params.default_scale / 16)
    plaintext_subtrahend = ckks.new_plaintext(
        params, params.max_level(), params.default_scale / 16)

    print('Encoding values for subtraction ...')
    encoder.encode(minuend, plaintext_minuend, params.log_slots)
    encoder.encode(subtrahend, plaintext_subtrahend, params.log_slots)

    print('Encrypting values for subtraction ...')
    ciphertext_minuend = encryptor.encrypt_new(plaintext_minuend)
    ciphertext_subtrahend = encryptor.encrypt_new(plaintext_subtrahend)

    print('Evaluating ciphertext subtraction ...')
    cipher_cipher_diff = evaluator.sub_new(ciphertext_minuend, ciphertext_subtrahend)
    cipher_plain_diff = evaluator.sub_new(ciphertext_minuend, plaintext_subtrahend)

    print('Evaluating precision for subtraction ...')
    cipher_cipher_stats = plot_precision_stats(
        params, cipher_cipher_diff, expected_diff, decryptor, encoder)
    cipher_plain_stats = plot_precision_stats(
        params, cipher_plain_diff, expected_diff, decryptor, encoder)
    
    assert_eq(
        "Homomorphic cipher-cipher subtraction",
        cipher_cipher_stats.min_precision.l2 > 15,
        True)
    assert_eq(
        "Homomorphic cipher-plain subtraction",
        cipher_plain_stats.min_precision.l2 > 15,
        True)


def test_multiplication_by_i(params, encoder, encryptor, decryptor, evaluator):
    factor = random_complex((params.slots(),))
    expected_product = [e * complex(0, 1) for  e in factor]
    
    print('Initializing HE plaintext for multiplication by i ...')
    plaintext = ckks.new_plaintext(
        params, params.max_level(), params.default_scale / 16)

    print('Encoding values for multiplication by i ...')
    encoder.encode(factor, plaintext, params.log_slots)

    print('Encrypting values for multiplication by i ...')
    ciphertext = encryptor.encrypt_new(plaintext)

    print('Evaluating ciphertext multiplication by i ...')
    ciphertext_prod = evaluator.mul_by_i_new(ciphertext)

    print('Evaluating precision for multiplication by i ...')
    precision_stats = plot_precision_stats(
        params, ciphertext_prod, expected_product, decryptor, encoder)
    
    assert_eq(
        "Homomorphic multiplication by i",
        precision_stats.min_precision.l2 > 15,
        True)


def test_ciphertext_multiplication(params, encoder, encryptor, decryptor, evaluator):
    factor_1 = random_complex((params.slots(),))
    factor_2 = random_complex((params.slots(),))
    expected_prod = [e_1 * e_2 for e_1, e_2 in zip(factor_1, factor_2)]
    
    print('Initializing HE plaintext for ciphertext multiplication ...')
    plaintext_1 = ckks.new_plaintext(
        params, params.max_level(), params.default_scale / 16)
    plaintext_2 = ckks.new_plaintext(
        params, params.max_level(), params.default_scale / 16)

    print('Encoding values for ciphertext multiplication ...')
    encoder.encode(factor_1, plaintext_1, params.log_slots)
    encoder.encode(factor_2, plaintext_2, params.log_slots)

    print('Encrypting values for ciphertext multiplication ...')
    ciphertext_1 = encryptor.encrypt_new(plaintext_1)
    ciphertext_2 = encryptor.encrypt_new(plaintext_2)

    print('Evaluating ciphertext ciphertext multiplication w/o relinearization ...')
    cipher_cipher_prod = evaluator.mul_new(ciphertext_1, ciphertext_2)
    cipher_plain_prod = evaluator.mul_new(ciphertext_1, plaintext_2)
    print('Evaluating ciphertext ciphertext multiplication w/ relinearization ...')
    cipher_cipher_prod_relin = evaluator.mul_relin_new(ciphertext_1, ciphertext_2)
    cipher_plain_prod_relin = evaluator.mul_relin_new(ciphertext_1, plaintext_2)

    print('Evaluating precision for ciphertext multiplication w/o relinearization ...')
    cipher_cipher_stats = plot_precision_stats(
        params, cipher_cipher_prod, expected_prod, decryptor, encoder)
    cipher_plain_stats = plot_precision_stats(
        params, cipher_plain_prod, expected_prod, decryptor, encoder)
    print('Evaluating precision for ciphertext multiplication w/ relinearization ...')
    cipher_cipher_stats_relin = plot_precision_stats(
        params, cipher_cipher_prod_relin, expected_prod, decryptor, encoder)
    cipher_plain_stats_relin = plot_precision_stats(
        params, cipher_plain_prod_relin, expected_prod, decryptor, encoder)
    
    assert_eq(
        "Homomorphic cipher-cipher multiplication w/o relinearization",
        cipher_cipher_stats.min_precision.l2 > 15,
        True)
    assert_eq(
        "Homomorphic cipher-plain multiplication w/o relinearization",
        cipher_plain_stats.min_precision.l2 > 15,
        True)
    assert_eq(
        "Homomorphic cipher-cipher multiplication w/ relinearization",
        cipher_cipher_stats_relin.min_precision.l2 > 15,
        True)
    assert_eq(
        "Homomorphic cipher-plain multiplication w/ relinearization",
        cipher_plain_stats_relin.min_precision.l2 > 15,
        True)


def test_multiplication(params, encoder, encryptor, decryptor, evaluator):
    test_multiplication_by_i(params, encoder, encryptor, decryptor, evaluator)
    test_ciphertext_multiplication(params, encoder, encryptor, decryptor, evaluator)


def test_rotation(params, encoder, encryptor, decryptor, evaluator, shifts):
    elem = random_complex((params.slots(),))
    k = prg.choice(shifts)
    expected_rotation = elem[k:]
    expected_rotation.extend(elem[:k])
    
    print('Initializing HE plaintext for rotation ...')
    plaintext = ckks.new_plaintext(
        params, params.max_level(), params.default_scale / 16)

    print('Encoding values for rotation ...')
    encoder.encode(elem, plaintext, params.log_slots)

    print('Encrypting values for rotation ...')
    ciphertext = encryptor.encrypt_new(plaintext)

    print('Evaluating ciphertext rotation ...')
    ciphertext_rotation = evaluator.rotate_new(ciphertext, k)

    print('Evaluating precision for rotation ...')
    precision_stats = plot_precision_stats(
        params, ciphertext_rotation, expected_rotation, decryptor, encoder)
    
    assert_eq(
        f"Homomorphic rotation by {k}",
        precision_stats.mean_precision.l2 > 15,
        True)


def test_evaluator(params, encoder, encryptor, decryptor, evaluator, shifts):
    test_negation(params, encoder, encryptor, decryptor, evaluator)
    test_addition(params, encoder, encryptor, decryptor, evaluator)
    test_subtraction(params, encoder, encryptor, decryptor, evaluator)
    test_multiplication(params, encoder, encryptor, decryptor, evaluator)
    test_rotation(params, encoder, encryptor, decryptor, evaluator, shifts)


def lattiseq_test_setup():
    # Schemes parameters are created from scratch
    params = ckks.new_parameters_from_literal(
        ckks.ParametersLiteral(
            logn=14,
            logq=[55, 40, 40, 40, 40, 40, 40, 40],
            logp=[45, 45],
            log_slots=13,
            default_scale=float(1 << 40)))
    
    print('Initializing HE encoder ...')
    encoder = ckks.new_encoder_complex(params)
    
    print('Initializing HE keygen ...')
    kgen = ckks.new_key_generator(params)
    
    print('Generating secret ...')
    sk = kgen.gen_secret_key()

    print('Initializing HE encryptor ...')
    encryptor = ckks.new_encryptor(params, sk)
    
    print('Initializing HE decryptor ...')
    decryptor = ckks.new_decryptor(params, sk)

    print('Generating relinearization key ...')
    rlk = kgen.gen_relinearization_key(sk, 1)

    print('Generating rotation key set ...')
    shifts = [i for i in range(1, 20)]
    rtks = kgen.gen_rotation_keys_for_rotations(shifts, params.ring_type == ring.StandardRing, sk)
    
    print('Initializing evaluator ...')
    evaluator = ckks.new_evaluator(params, rlwe.EvaluationKey(rlk=rlk, rtks=rtks))

    print('Lattiseq test setup done.')
    return params, encoder, encryptor, decryptor, evaluator, shifts


def test_lattiseq():
    print('Testing Lattiseq ...')
    params, encoder, encryptor, decryptor, evaluator, shifts = lattiseq_test_setup()

    test_encrypt_decrypt(params, encoder, encryptor, decryptor)
    test_evaluator(params, encoder, encryptor, decryptor, evaluator, shifts)
    

def test_he():
    print('Testing HE ... \n')
    
    test_lattiseq()

    print('HE tests passed.\n')
