from ..utils import assert_eq

from sequre.utils.param import *
from sequre.utils.primitives import strassen, mod_inv, mod_pow


def test_matmul_of_size[TP](size, modulus: TP):
    a_mat = [[TP(i * j) for j in range(size)] for i in range(size)]
    b_mat = [[TP(i * j) for j in range(size)] for i in range(size)]
    assert_eq(
        f'Matrix multiplication on {"ring" if modulus.popcnt() == 1 else "field"} of size {size}x{size}',
        strassen(a_mat, b_mat, modulus),
        a_mat.matmul_mod(b_mat, modulus))


def test_matmul[TP](modulus: TP):
    algebraic_structure = "ring" if modulus.popcnt() == 1 else "field"
    print(f'Testing matrix multiplication on {algebraic_structure} ... \n')

    test_matmul_of_size(5, modulus, TP=TP)
    test_matmul_of_size(MATMUL_LEAF_SIZE + 1, modulus, TP=TP)
    test_matmul_of_size(100, modulus, TP=TP)

    print(f'Matrix multiplication on {algebraic_structure} tests passed.\n')


def test_primitives[TP](modulus: TP):
    algebraic_structure = "ring" if modulus.popcnt() == 1 else "field"
    print(f'Testing primitives on {algebraic_structure} ... \n')

    assert_eq(f'Simple modulus 0 on {algebraic_structure}', TP(0) % TP(3), TP(0))
    assert_eq(f'Simple modulus 1 on {algebraic_structure}', TP(10) % TP(3), TP(1))
    assert_eq(f'Simple modulus 2 on {algebraic_structure}', (modulus + 1) % modulus, TP(1))
    assert_eq(f'Simple modulus 3 on {algebraic_structure}', modulus % modulus, TP(0))

    for i in range(1, 10000):
        assert_eq(f'Modular square of {i} by raw int on field', mod_pow(TP(i), 2, modulus), TP(i).mul_mod(TP(i), modulus), True)
        assert_eq(f'Modular cube by of {i} raw int on field', mod_pow(TP(i), 3, modulus), TP(i).mul_mod(TP(i), modulus).mul_mod(TP(i), modulus), True)
        assert_eq(f'Modular square of {i} on field', mod_pow(TP(i), TP(2), modulus), TP(i).mul_mod(TP(i), modulus), True)
        assert_eq(f'Modular cube of {i} on field', mod_pow(TP(i), TP(3), modulus), TP(i).mul_mod(TP(i), modulus).mul_mod(TP(i), modulus), True)

        assert_eq(f'Modular square of {modulus - i} by raw int on field', mod_pow(modulus - i, 2, modulus), (modulus - i).mul_mod(modulus - i, modulus), True)
        assert_eq(f'Modular cube of {modulus - i} by raw int on field', mod_pow(modulus - i, 3, modulus), (modulus - i).mul_mod(modulus - i, modulus).mul_mod(modulus - i, modulus), True)
        assert_eq(f'Modular square of {modulus - i} on field', mod_pow(modulus - i, TP(2), modulus), (modulus - i).mul_mod(modulus - i, modulus), True)
        assert_eq(f'Modular cube of {modulus - i} on field', mod_pow(modulus - i, TP(3), modulus), (modulus - i).mul_mod(modulus - i, modulus).mul_mod(modulus - i, modulus), True)

        assert_eq(f'Modular exponentiation by {i} on field', mod_pow(TP(1), TP(i), modulus), TP(1), True)
        assert_eq(f'Modular exponentiation by {modulus - i} on field', mod_pow(TP(1), modulus - i, modulus), TP(1), True)
    print(f'Modular exponentiation passed on {algebraic_structure}.\n')

    if modulus.popcnt() != 1:
        for i in range(1, 100000):
            assert_eq(f'Modular inverse of {i} on field', mod_inv(TP(i), modulus).mul_mod(TP(i), modulus), TP(1), True)
    print(f'Modular multiplicative inverse passed on {algebraic_structure}.\n')
    
    if modulus.popcnt() != 1 and modulus == ((TP(1) << 127) - 1):
        assert_eq(
            f'Simple modular multiplication on {algebraic_structure}',
            TP('79624773705870324488959359155350619013').mul_mod(TP('101761777005983095179580621306363125588'), modulus),
            TP('111543309598552442012268786484921807604'))
    
    test_matmul(modulus, TP=TP)
    
    print(f'Primitives on {algebraic_structure} passed.\n')
