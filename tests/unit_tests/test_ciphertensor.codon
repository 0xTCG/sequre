from numpy.create import array

import secure_operator
import sequre.lattiseq.ckks as ckks

from sequre import sequre
from sequre.types.ciphertensor import Ciphertensor
from sequre.utils.utils import zeros, random_floats
from sequre.utils.constants import D_CONTIG

from ..utils import assert_eq


def test_ciphertensor_send_receive(mpc):
    if mpc.pid == 1:
        mpc.randomness.switch_seed(2)
        values = random_floats((mpc.he.crypto_params.params.slots(),))
        mpc.randomness.restore_seed(2)

        ct = Ciphertensor[ckks.Ciphertext].enc(mpc, values)
        mpc.comms.send_as_jar(ct, 2)
        received_ct = mpc.comms.receive_as_jar(2, Ciphertensor[ckks.Ciphertext])
    elif mpc.pid == 2:
        mpc.randomness.switch_seed(1)
        values = random_floats((mpc.he.crypto_params.params.slots(),))
        mpc.randomness.restore_seed(1)
        
        ct = Ciphertensor[ckks.Ciphertext].enc(mpc, values)
        received_ct = mpc.comms.receive_as_jar(1, Ciphertensor[ckks.Ciphertext])
        mpc.comms.send_as_jar(ct, 1)

    if mpc.pid: assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor send/receive", ct, received_ct)


def test_ciphertensor_encrypt_reveal(mpc, size):
    with mpc.randomness.seed_switch(-1):
        values = random_floats((size,))
    
    if mpc.pid > 0:
        encrypted_values = Ciphertensor[ckks.Ciphertext].enc(mpc, values)

        precision_stats = mpc.he.precision_stats(
            result=encrypted_values.reveal(mpc, T=float).flatten().tolist(),
            expected=values)
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor encrypt/reveal of size {size}", precision_stats.min_precision.l2 > 10, True)


def test_ciphertensor_getitem(mpc, rows, cols):
    with mpc.randomness.seed_switch(-1):
        values = random_floats((rows, cols))
    
    if mpc.pid > 0:
        encrypted_values = Ciphertensor[ckks.Ciphertext].enc(mpc, values)
        encrypted_row = encrypted_values._getitem(mpc, 0)

        precision_stats = mpc.he.precision_stats(
            result=encrypted_row.reveal(mpc, T=float).flatten().tolist(),
            expected=values[0])
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor 2-dim getitem ({rows} x {cols})", precision_stats.min_precision.l2 > 10, True)

        encrypted_elem = encrypted_row._getitem(mpc, 0)

        precision_stats = mpc.he.precision_stats(
            result=encrypted_elem.reveal(mpc, T=float).flatten().tolist()[0],
            expected=values[0][0])
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor 1-dim getitem ({rows} x {cols})", precision_stats.min_precision.l2 > 10, True)

        rs = slice(start=0, stop=2, step=1)
        cs = slice(start=0, stop=2, step=1)
        
        encrypted_slice = encrypted_values._getitem(mpc, rs)

        precision_stats = mpc.he.precision_stats(
            result=encrypted_slice.reveal(mpc, T=float).tolist(),
            expected=values[rs])
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor 2-dim get slice ({rows} x {cols})", precision_stats.min_precision.l2 > 10, True)

        encrypted_slice = encrypted_values._getitem(mpc, (rs, cs))

        precision_stats = mpc.he.precision_stats(
            result=encrypted_slice.reveal(mpc, T=float).tolist(),
            expected=values[rs, cs])
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor 2-dim get slice-slice tuple ({rows} x {cols})", precision_stats.min_precision.l2 > 10, True)

        encrypted_slice = encrypted_values._getitem(mpc, (rs, 2))

        precision_stats = mpc.he.precision_stats(
            result=encrypted_slice.reveal(mpc, T=float).tolist(),
            expected=values[rs, 2:3])
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor 2-dim get slice-int tuple ({rows} x {cols})", precision_stats.min_precision.l2 > 10, True)

        encrypted_slice = encrypted_values._getitem(mpc, (2, cs))

        precision_stats = mpc.he.precision_stats(
            result=encrypted_slice.reveal(mpc, T=float).flatten().tolist(),
            expected=values[2, cs])
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor 2-dim get int-slice tuple ({rows} x {cols})", precision_stats.min_precision.l2 > 10, True)

        encrypted_slice = encrypted_values._getitem(mpc, (2, 2))

        precision_stats = mpc.he.precision_stats(
            result=encrypted_slice.reveal(mpc, T=float).flatten().tolist(),
            expected=values[2, 2:3])
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor 2-dim get int-int tuple ({rows} x {cols})", precision_stats.min_precision.l2 > 10, True)


def test_ciphertensor_setitem(mpc, rows, cols):
    with mpc.randomness.seed_switch(-1):
        _values = random_floats((rows, cols))
    
    if mpc.pid > 0:
        _encrypted_values = Ciphertensor[ckks.Ciphertext].enc(mpc, _values)
        
        encrypted_values = _encrypted_values.copy()
        values = _values.copy()
        encrypted_values._setitem(mpc, 0, encrypted_values._getitem(mpc, 1))
        values[0] = values[1]

        precision_stats = mpc.he.precision_stats(
            result=encrypted_values.reveal(mpc, T=float).tolist(),
            expected=values)
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor 2-dim setitem ({rows} x {cols})", precision_stats.min_precision.l2 > 10, True)

        encrypted_row = encrypted_values._getitem(mpc, 0)
        encrypted_row._setitem(mpc, 0, encrypted_row._getitem(mpc, 1))
        values[0][0] = values[0][1]

        precision_stats = mpc.he.precision_stats(
            result=encrypted_row.reveal(mpc, T=float).flatten().tolist(),
            expected=values[0])
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor 1-dim setitem ({rows} x {cols})", precision_stats.min_precision.l2 > 10, True)

        rs_set = slice(start=0, stop=2, step=1)
        cs_set = slice(start=0, stop=2, step=1)
        rs_get = slice(start=1, stop=3, step=1)
        cs_get = slice(start=1, stop=3, step=1)
        
        encrypted_values = _encrypted_values.copy()
        values = _values.copy()
        encrypted_values._setitem(mpc, rs_set, encrypted_values._getitem(mpc, rs_get))
        values[rs_set] = values[rs_get]

        precision_stats = mpc.he.precision_stats(
            result=encrypted_values.reveal(mpc, T=float).tolist(),
            expected=values)
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor 2-dim set slice ({rows} x {cols})", precision_stats.min_precision.l2 > 10, True)

        encrypted_values = _encrypted_values.copy()
        values = _values.copy()
        set_slice_tuple = (rs_set, cs_set)
        get_slice_tuple = (rs_get, cs_get)
        encrypted_values._setitem(mpc, set_slice_tuple, encrypted_values._getitem(mpc, get_slice_tuple))
        values[set_slice_tuple] = values[get_slice_tuple]

        precision_stats = mpc.he.precision_stats(
            result=encrypted_values.reveal(mpc, T=float).tolist(),
            expected=values)
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor 2-dim set slice-slice tuple ({rows} x {cols})", precision_stats.min_precision.l2 > 10, True)

        encrypted_values = _encrypted_values.copy()
        values = _values.copy()
        set_slice_tuple = (rs_set, 1)
        get_slice_tuple = (rs_get, 2)
        encrypted_values._setitem(mpc, set_slice_tuple, encrypted_values._getitem(mpc, get_slice_tuple))
        values[set_slice_tuple] = values[get_slice_tuple]

        precision_stats = mpc.he.precision_stats(
            result=encrypted_values.reveal(mpc, T=float).tolist(),
            expected=values)
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor 2-dim set slice-int tuple ({rows} x {cols})", precision_stats.min_precision.l2 > 10, True)

        encrypted_values = _encrypted_values.copy()
        values = _values.copy()
        set_slice_tuple = (2, cs_set)
        get_slice_tuple = (3, cs_get)
        encrypted_values._setitem(mpc, set_slice_tuple, encrypted_values._getitem(mpc, get_slice_tuple))
        values[set_slice_tuple] = values[get_slice_tuple]

        precision_stats = mpc.he.precision_stats(
            result=encrypted_values.reveal(mpc, T=float).tolist(),
            expected=values)
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor 2-dim set int-slice tuple ({rows} x {cols})", precision_stats.min_precision.l2 > 10, True)

        encrypted_values = _encrypted_values.copy()
        values = _values.copy()
        set_slice_tuple = (2, 1)
        get_slice_tuple = (3, 2)
        encrypted_values._setitem(mpc, set_slice_tuple, encrypted_values._getitem(mpc, get_slice_tuple))
        values[set_slice_tuple] = values[get_slice_tuple]

        precision_stats = mpc.he.precision_stats(
            result=encrypted_values.reveal(mpc, T=float).tolist(),
            expected=values)
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor 2-dim set int-int tuple ({rows} x {cols})", precision_stats.min_precision.l2 > 10, True)

def test_ciphertensor_append(mpc, rows, cols):
    with mpc.randomness.seed_switch(-1):
        values = random_floats((rows, cols))
    
    if mpc.pid > 0:
        encrypted_values = Ciphertensor[ckks.Ciphertext].enc(mpc, values)
        encrypted_values.append(Ciphertensor.zeros(mpc, [cols]))
        values.append(zeros((cols,), TP=float))

        precision_stats = mpc.he.precision_stats(
            result=encrypted_values.reveal(mpc, T=float).tolist(),
            expected=values)
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor append ({rows} x {cols})", precision_stats.min_precision.l2 > 10, True)


def test_ciphertensor_pop(mpc, rows, cols):
    with mpc.randomness.seed_switch(-1):
        values = random_floats((rows, cols))
    
    if mpc.pid > 0:
        encrypted_values = Ciphertensor[ckks.Ciphertext].enc(mpc, values)
        encrypted_values.pop()
        values.pop()

        precision_stats = mpc.he.precision_stats(
            result=encrypted_values.reveal(mpc, T=float).tolist(),
            expected=values)
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor pop ({rows} x {cols})", precision_stats.min_precision.l2 > 10, True)
  

def test_ciphertensor_extend(mpc, rows, cols):
    with mpc.randomness.seed_switch(-1):
        values = random_floats((rows, cols))
    
    if mpc.pid > 0:
        encrypted_values = Ciphertensor[ckks.Ciphertext].enc(mpc, values)
        encrypted_zeros = Ciphertensor.zeros(mpc, [rows, cols])
        encrypted_values.extend(mpc, encrypted_zeros)
        values.extend(zeros((rows, cols), TP=float))

        precision_stats = mpc.he.precision_stats(
            result=encrypted_values.reveal(mpc, T=float).tolist(),
            expected=values)
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor matrix extend ({rows} x {cols})", precision_stats.min_precision.l2 > 10, True)

        
    with mpc.randomness.seed_switch(-1):
        values_vec = random_floats((cols,))
        
    if mpc.pid > 0:
        encrypted_values = Ciphertensor[ckks.Ciphertext].enc(mpc, values_vec)
        encrypted_values.extend(mpc, Ciphertensor.zeros(mpc, [cols]))
        values_vec.extend(zeros((cols,), TP=float))

        precision_stats = mpc.he.precision_stats(
            result=encrypted_values.reveal(mpc, T=float).flatten().tolist(),
            expected=values_vec)
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor vector extend (size: {cols})", precision_stats.min_precision.l2 > 10, True)


def test_ciphertensor_rotation(mpc, cols):
    rotation_step = 3
    with mpc.randomness.seed_switch(-1):
        values = random_floats((cols,))
    
    if mpc.pid > 0:
        encrypted_values = Ciphertensor[ckks.Ciphertext].enc(mpc, values)
        rotated_encrypted_values = encrypted_values.rotate(mpc, rotation_step)

        precision_stats = mpc.he.precision_stats(
            result=rotated_encrypted_values.reveal(mpc, T=float).flatten().tolist(),
            expected=values.rotate(rotation_step))
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor rotation (size: {cols})", precision_stats.min_precision.l2 > 10, True)


def test_ciphertensor_shift(mpc, cols):
    slots = mpc.he.crypto_params.params.slots()
    rotation_step = 3
    with mpc.randomness.seed_switch(-1):
        values = random_floats((cols,))
    
    if mpc.pid > 0:
        encrypted_values = Ciphertensor[ckks.Ciphertext].enc(mpc, values)
        rotated_encrypted_values_cohort = encrypted_values.shift(mpc, rotation_step)
        shifted_values = values.shift_like_cipher(rotation_step, slots, cols)
        result = rotated_encrypted_values_cohort.reveal(mpc, T=float).flatten().tolist()

        precision_stats = mpc.he.precision_stats(
            result=result,
            expected=shifted_values)
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor shift of vector length {cols}", precision_stats.min_precision.l2 > 10, True)


def test_ciphertensor_resize(mpc, size, new_size):
    with mpc.randomness.seed_switch(-1):
        values = random_floats((size,))
    
    if mpc.pid > 0:
        encrypted_values = Ciphertensor[ckks.Ciphertext].enc(mpc, values)

        precision_stats = mpc.he.precision_stats(
            result=encrypted_values.resize(mpc, [new_size]).reveal(mpc, T=float).flatten().tolist(),
            expected=values.resize([new_size]))
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor resize vector of length {size} to length {new_size}", precision_stats.min_precision.l2 > 10, True)


def test_ciphertensor_concat(mpc, rows, cols):
    with mpc.randomness.seed_switch(-1):
        values = random_floats((rows, cols))
    
    if mpc.pid > 0:
        encrypted_values = Ciphertensor[ckks.Ciphertext].enc(mpc, values)
        encrypted_values = encrypted_values.concat(mpc, Ciphertensor.zeros(mpc, [rows, cols]), axis=0)
        values.extend(zeros((rows, cols), TP=float))

        precision_stats = mpc.he.precision_stats(
            result=encrypted_values.reveal(mpc, T=float).tolist(),
            expected=values)
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor concat axis 0 for shape ({rows}, {cols})", precision_stats.min_precision.l2 > 10, True)

    with mpc.randomness.seed_switch(-1):
        values = random_floats((rows, cols))
        
    if mpc.pid > 0:
        encrypted_values = Ciphertensor[ckks.Ciphertext].enc(mpc, values)
        encrypted_values = encrypted_values.concat(mpc, Ciphertensor.zeros(mpc, [rows, cols]), axis=1)

        precision_stats = mpc.he.precision_stats(
            result=encrypted_values.reveal(mpc, T=float).tolist(),
            expected=values.pad(rows, cols * 2))
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor concat axis 1 for shape ({rows}, {cols})", precision_stats.min_precision.l2 > 10, True)


def test_ciphertensor_patch_copy(mpc, size, new_size):
    with mpc.randomness.seed_switch(-1):
        values = random_floats((size,))
    
    if mpc.pid > 0:
        encrypted_values = Ciphertensor[ckks.Ciphertext].enc(mpc, values)

        precision_stats = mpc.he.precision_stats(
            result=encrypted_values.patch_copy(mpc, new_size).reveal(mpc, T=float).flatten().tolist(),
            expected=values.patch_copy(new_size))
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor patch-copy vector of length {size} to length {new_size}", precision_stats.min_precision.l2 > 8, True)


def test_ciphertensor_patch_copy_matrix(mpc, rows, cols, new_size):
    with mpc.randomness.seed_switch(-1):
        values = random_floats((rows, cols))
    
    if mpc.pid > 0:
        encrypted_values = Ciphertensor[ckks.Ciphertext].enc(mpc, values)

        precision_stats = mpc.he.precision_stats(
            result=encrypted_values.patch_copy(mpc, new_size).reveal(mpc, T=float).tolist(),
            expected=values.patch_copy(new_size))
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor patch-copy matrix of shape ({rows} x {cols}) to length {new_size}", precision_stats.min_precision.l2 > 8, True)


@sequre
def test_ciphertensor_lazy_bootstrapping(mpc, rows, cols):
    @sequre
    def _test_bootstrapping_case(mpc, values, msg):
        bootstrap_count = mpc.stats.secure_bootstrap_count
        if mpc.pid > 0:
            encrypted_values = Ciphertensor[ckks.Ciphertext].enc(mpc, values)
            initial_level = encrypted_values.level()
            ones = Ciphertensor.zeros(mpc, values.shape) + 1

            for _ in range(initial_level - mpc.he.bootstrap_min_level + 1):
                encrypted_values *= ones

            precision_stats = mpc.he.precision_stats(
                result=encrypted_values.reveal(mpc, T=float).tolist(),
                expected=values)
            
            local_cipher_size = len(encrypted_values._data)
            council_cipher_sizes = mpc.comms.collect(local_cipher_size)

            if not council_cipher_sizes.same() or not mpc.comms.collect(encrypted_values._data).same():
                expected_stats = council_cipher_sizes.sum()
            else:
                expected_stats = local_cipher_size
            
            bootstrap_count = mpc.stats.secure_bootstrap_count - bootstrap_count
            
            assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor lazy bootstrapping ({msg}) for shape {values.shape}: correctness", precision_stats.min_precision.l2 > 7, True)
            assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor lazy bootstrapping ({msg}) for shape {values.shape}: level", encrypted_values.level(), initial_level)
            assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor lazy bootstrapping ({msg}) for shape {values.shape}: stats", bootstrap_count, expected_stats)
    
    # Case 1: ciphertensors have same size at different parties
    values = random_floats((rows, cols))
    _test_bootstrapping_case(mpc, values, msg="same-size ciphers")

    # Case 2: ciphertensors misaligned at different parties
    values = random_floats((rows * mpc.pid, cols))
    _test_bootstrapping_case(mpc, values, msg="misaligned ciphers")

    # Edge case: fishing for potentially unnecessary bootstraps
    bootstrap_count = mpc.stats.secure_bootstrap_count
    values = random_floats((4, 4))
    fat_values = random_floats((4, 32))

    if mpc.pid > 0:
        encrypted_values = Ciphertensor[ckks.Ciphertext].enc(mpc, values)

        power_matrix = encrypted_values.copy()
        for _ in range(2):
            power_matrix @= encrypted_values.T

        bootstrap_count = mpc.stats.secure_bootstrap_count - bootstrap_count
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor lazy bootstrapping (fishing) for shape ({rows}, {cols}): stats", bootstrap_count, 32)
        bootstrap_count = mpc.stats.secure_bootstrap_count
        power_matrix = power_matrix.T @ Ciphertensor[ckks.Ciphertext].enc(mpc, fat_values)
        bootstrap_count = mpc.stats.secure_bootstrap_count - bootstrap_count
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor lazy bootstrapping (fishing) for shape ({rows}, {cols}): stats", bootstrap_count, 16)
    

@sequre
def test_ciphertensor_lazy_rescaling(mpc, rows, cols):
    initial_rescale_count = mpc.stats.secure_rescale_count
    with mpc.randomness.seed_switch(-1):
        values = random_floats((rows, cols))
    
    if mpc.pid > 0:
        encrypted_values = Ciphertensor[ckks.Ciphertext].enc(mpc, values)
        ones = Ciphertensor.zeros(mpc, [rows, cols]) + 1

        for i in range(10):
            encrypted_values *= ones
            rescale_count = mpc.stats.secure_rescale_count - initial_rescale_count
            assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor lazy rescaling for shape ({rows}, {cols}) after {i + 1} muls: stats", rescale_count, i * len(encrypted_values._data))

        precision_stats = mpc.he.precision_stats(
            result=encrypted_values.reveal(mpc, T=float).tolist(),
            expected=values)
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor lazy rescaling for shape ({rows}, {cols}): correctness", precision_stats.min_precision.l2 > 7, True)


def test_ciphertensor_binary_operation(mpc, op, rows, cols, msg):
    with mpc.randomness.seed_switch(-1):
        values_1 = random_floats((rows, cols))
        values_2 = random_floats((rows, cols))
    
    if mpc.pid > 0:
        encrypted_values_1 = Ciphertensor[ckks.Ciphertext].enc(mpc, values_1)
        encrypted_values_2 = Ciphertensor[ckks.Ciphertext].enc(mpc, values_2)

        result = op(mpc, encrypted_values_1, encrypted_values_2)
        precision_stats = mpc.he.precision_stats(
            result=result.reveal(mpc, T=float).tolist(),
            expected=op(mpc, values_1, values_2))
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor {msg} for shape ({rows}, {cols})", precision_stats.min_precision.l2 > 9, True)


def test_ciphertensor_reduce_add(mpc, cols):
    with mpc.randomness.seed_switch(-1):
        values = random_floats((cols,))
    
    if mpc.pid > 0:
        encrypted_values = Ciphertensor[ckks.Ciphertext].enc(mpc, values)
        reduced_encrypted_values = encrypted_values.reduce_add(mpc)
        reduced_value = values.sum()

        precision_stats = mpc.he.precision_stats(
            result=reduced_encrypted_values.reveal(mpc, T=float).flatten().tolist(),
            expected=[reduced_value for _ in range(cols)])
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor addition reduction for vector of size {cols}", precision_stats.min_precision.l2 > 10, True)


def test_ciphertensor_dot_product(mpc, rows, cols):
    with mpc.randomness.seed_switch(-1):
        values = random_floats((rows, cols))
    
    if mpc.pid > 0:
        encrypted_values = Ciphertensor[ckks.Ciphertext].enc(mpc, values)

        dot_product_axis_0 = encrypted_values.dot(mpc, axis=0)
        precision_stats = mpc.he.precision_stats(
            result=dot_product_axis_0.reveal(mpc, T=float).flatten().tolist(),
            expected=(values * values).sum())
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor dot product over axis 0 for shape ({rows}, {cols})", precision_stats.min_precision.l2 > 7, True)

        dot_product_axis_1 = encrypted_values.dot(mpc, axis=1)
        precision_stats = mpc.he.precision_stats(
            result=dot_product_axis_1.reveal(mpc, T=float).flatten().tolist(),
            expected=(values * values).transpose().sum())
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor dot product over axis 1 for shape ({rows}, {cols})", precision_stats.min_precision.l2 > 7, True)


@sequre
def test_ciphertensor_matrix_multiplication(mpc, rows, cols, only_general):
    with mpc.randomness.seed_switch(-1):
        values_1 = random_floats((rows, cols))
        values_2 = random_floats((rows, cols))
    
    if mpc.pid > 0:
        encrypted_values_1 = Ciphertensor[ckks.Ciphertext].enc(mpc, values_1)
        encrypted_values_2 = Ciphertensor[ckks.Ciphertext].enc(mpc, values_2)

        if not only_general:
            result_v1 = encrypted_values_1._matmul_v1(mpc, encrypted_values_2.T, debug=1)        
            precision_stats = mpc.he.precision_stats(
                result=result_v1.reveal(mpc, T=float).tolist(),
                expected=values_1 @ values_2.transpose())
            assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor _matmul_v1 for shape ({rows}, {cols})", precision_stats.min_precision.l2 > 5, True)

            encrypted_values_2_t = Ciphertensor[ckks.Ciphertext].enc(mpc, values_2.transpose())
            result_v2 = encrypted_values_1._matmul_v2(mpc, encrypted_values_2_t, debug=1)
            precision_stats = mpc.he.precision_stats(
                result=result_v2.reveal(mpc, T=float).tolist(),
                expected=values_1 @ values_2.transpose())
            assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor _matmul_v2 for shape ({rows}, {cols})", precision_stats.min_precision.l2 > 5, True)
            
            if rows.popcnt() == 1 and cols.popcnt() == 1:  # Temp constrain. Until arbitrary dimensions are enabled for _matmul_v3.
                encrypted_values_2_d_contig = Ciphertensor[ckks.Ciphertext].enc(mpc, values_2.transpose(), mode=D_CONTIG)
                result_v3 = encrypted_values_1._matmul_v3(mpc, encrypted_values_2_d_contig, debug=1)
                precision_stats = mpc.he.precision_stats(
                    result=result_v3.reveal(mpc, T=float).tolist(),
                    expected=values_1 @ values_2.transpose())
                assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor _matmul_v3 for shape ({rows}, {cols})", precision_stats.min_precision.l2 > 4, True)

            result_t = encrypted_values_1.T @ values_2

            precision_stats = mpc.he.precision_stats(
                result=result_t.reveal(mpc, T=float).tolist(),
                expected=values_1.transpose() @ values_2)
            assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor matmul transposed general for shape ({rows}, {cols})", precision_stats.min_precision.l2 > 4, True)
        
        if rows.popcnt() == 1 and cols.popcnt() == 1:  # Temp constrain. Until arbitrary dimensions are enabled for _matmul_v3.
            result_general = encrypted_values_1 @ values_2.transpose()

            precision_stats = mpc.he.precision_stats(
                result=result_general.reveal(mpc, T=float).tolist(),
                expected=values_1 @ values_2.transpose())
            assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor matmul general for shape ({rows}, {cols})", precision_stats.min_precision.l2 > 4, True)


@sequre
def test_ciphertensor_reversed_matrix_multiplication(mpc, rows, cols):
    with mpc.randomness.seed_switch(-1):
        values_1 = random_floats((rows, cols))
        values_2 = random_floats((rows, cols))
    
    if mpc.pid > 0:
        encrypted_values_2_t = Ciphertensor[ckks.Ciphertext].enc(mpc, values_2.transpose())

        result = array(values_1) @ encrypted_values_2_t
        precision_stats = mpc.he.precision_stats(
            result=result.reveal(mpc, T=float).tolist(),
            expected=values_1 @ values_2.transpose())
        
        assert_eq(f"CP{mpc.pid}:\tSequre MHE ciphertensor reversed matmul for shape ({rows}, {cols})", precision_stats.min_precision.l2 > 7, True)


def test_ciphertensor_vector_operations(mpc, rows, cols):
    test_ciphertensor_getitem(mpc, rows, cols)
    test_ciphertensor_setitem(mpc, rows, cols)
    test_ciphertensor_append(mpc, rows, cols)
    test_ciphertensor_pop(mpc, rows, cols)
    test_ciphertensor_extend(mpc, rows, cols)
    test_ciphertensor_rotation(mpc, cols)
    test_ciphertensor_shift(mpc, cols)
    test_ciphertensor_concat(mpc, rows, cols)
    test_ciphertensor_resize(mpc, cols, cols)
    test_ciphertensor_resize(mpc, cols, cols // 2)
    test_ciphertensor_resize(mpc, cols, cols * 2)
    test_ciphertensor_resize(mpc, mpc.he.crypto_params.params.slots() + cols, cols)
    test_ciphertensor_patch_copy(mpc, cols, cols * 2)
    test_ciphertensor_patch_copy(mpc, cols // 2, cols * 2)
    test_ciphertensor_patch_copy_matrix(mpc, rows, cols, cols * 2)
    test_ciphertensor_patch_copy_matrix(mpc, rows, cols // 2, cols * 2)


def test_ciphertensor_binary_operations(mpc, rows, cols):
    test_ciphertensor_binary_operation(mpc, secure_operator.add, rows, cols, f"addition ({rows} x {cols})")
    test_ciphertensor_binary_operation(mpc, secure_operator.sub, rows, cols, f"subtraction ({rows} x {cols})")
    test_ciphertensor_binary_operation(mpc, secure_operator.mul, rows, cols, f"multiplication ({rows} x {cols})")


def test_ciphertensor_arithmetics(mpc):
    test_ciphertensor_binary_operations(mpc, 4, mpc.he.crypto_params.params.slots() * 3)
    test_ciphertensor_binary_operations(mpc, 7, 7)
    test_ciphertensor_reduce_add(mpc, 32)
    test_ciphertensor_reduce_add(mpc, 7)
    test_ciphertensor_reduce_add(mpc, mpc.he.crypto_params.params.slots() // 2)
    test_ciphertensor_reduce_add(mpc, mpc.he.crypto_params.params.slots())
    test_ciphertensor_reduce_add(mpc, mpc.he.crypto_params.params.slots() + 32)
    test_ciphertensor_dot_product(mpc, 4, 32)
    test_ciphertensor_dot_product(mpc, 7, 7)
    test_ciphertensor_matrix_multiplication(mpc, 4, 32, False)
    test_ciphertensor_matrix_multiplication(mpc, 8, 4, False)
    test_ciphertensor_matrix_multiplication(mpc, 4, mpc.he.crypto_params.params.slots(), True)
    test_ciphertensor_matrix_multiplication(mpc, 7, 7, False)
    test_ciphertensor_reversed_matrix_multiplication(mpc, 4, 8)
    test_ciphertensor_reversed_matrix_multiplication(mpc, 8, 4)
    test_ciphertensor_reversed_matrix_multiplication(mpc, 7, 7)


def test_ciphertensor(mpc):
    print(f'CP{mpc.pid}:\tTesting Sequre MHE Ciphertensor ... \n')
    test_ciphertensor_send_receive(mpc)
    test_ciphertensor_encrypt_reveal(mpc, mpc.he.crypto_params.params.slots() * 3)
    test_ciphertensor_encrypt_reveal(mpc, 32)
    test_ciphertensor_encrypt_reveal(mpc, mpc.he.crypto_params.params.slots() + 32)
    test_ciphertensor_encrypt_reveal(mpc, 7)
    test_ciphertensor_vector_operations(mpc, 4, 32)
    test_ciphertensor_vector_operations(mpc, 4, mpc.he.crypto_params.params.slots())
    test_ciphertensor_vector_operations(mpc, 4, mpc.he.crypto_params.params.slots() * 3 // 2)
    test_ciphertensor_vector_operations(mpc, 4, mpc.he.crypto_params.params.slots() * 3)
    test_ciphertensor_vector_operations(mpc, 7, 21)
    test_ciphertensor_vector_operations(mpc, 7, mpc.he.crypto_params.params.slots() + 1)
    test_ciphertensor_lazy_bootstrapping(mpc, 4 ,32)
    test_ciphertensor_lazy_bootstrapping(mpc, 7 ,7)
    test_ciphertensor_lazy_rescaling(mpc, 4 ,32)
    test_ciphertensor_lazy_rescaling(mpc, 7 ,7)
    test_ciphertensor_arithmetics(mpc)
    print(f'CP{mpc.pid}:\tSequre MHE Ciphertensor tests passed.\n')
