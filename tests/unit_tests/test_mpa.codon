from numpy.create import array, ones, zeros_like

from sequre.mpc.env import MPCEnv
from sequre.types.multiparty_aggregate import MPA
from sequre.utils.utils import random_floats

from ..utils import assert_eq_approx


def test_mpa_getitem(mpa_a, raw_a):
    if mpa_a._mpc.pid:
        assert_eq_approx("MPA 2-dim getitem", mpa_a[0].reveal(), raw_a[0], error=0.001)
        assert_eq_approx("MPA 1-dim getitem", mpa_a[0][0].reveal(), raw_a[0, 0], error=0.001)
        assert_eq_approx("MPA 2-dim get slice", mpa_a[:2].reveal(), raw_a[:2], error=0.001)
        assert_eq_approx("MPA 2-dim get slice-slice tuple", mpa_a[:2, :2].reveal(), raw_a[:2, :2], error=0.001)
        assert_eq_approx("MPA 2-dim get slice-int tuple", mpa_a[:2, 2].reveal(), raw_a[:2, 2:3], error=0.001)
        assert_eq_approx("MPA 2-dim get int-slice tuple", mpa_a[2, :2].reveal(), raw_a[2, :2], error=0.001)
        assert_eq_approx("MPA 2-dim get int-int tuple", mpa_a[2, 2].reveal(), raw_a[2, 2:3], error=0.001)
        

def test_mpa_setitem(_mpa_a, _raw_a):
    mpc = _mpa_a._mpc
    
    mpa_a, raw_a = _mpa_a.copy(), _raw_a.copy()
    mpa_a[0] = mpa_a[1]
    raw_a[0] = raw_a[1]
    if mpc.pid:
        assert_eq_approx("MPA 2-dim setitem", mpa_a.reveal(), raw_a, error=0.001)
    
    mpa_a, raw_a = _mpa_a.copy(), _raw_a.copy()
    mpa_row = mpa_a[0]
    mpa_row[0] = mpa_row[1]
    raw_a[0, 0] = raw_a[0, 1]
    if mpc.pid:
        assert_eq_approx("MPA 1-dim setitem", mpa_row.reveal(), raw_a[0], error=0.001)
    
    mpa_a, raw_a = _mpa_a.copy(), _raw_a.copy()
    mpa_a[:2] = mpa_a[1:3]
    raw_a[:2] = raw_a[1:3]
    if mpc.pid:
        assert_eq_approx("MPA 2-dim set slice", mpa_a.reveal(), raw_a, error=0.001)
    
    mpa_a, raw_a = _mpa_a.copy(), _raw_a.copy()
    mpa_a[:2, :2] = mpa_a[1:3, 1:3]
    raw_a[:2, :2] = raw_a[1:3, 1:3]
    if mpc.pid:
        assert_eq_approx("MPA 2-dim set slice-slice tuple", mpa_a.reveal(), raw_a, error=0.001)
    
    mpa_a, raw_a = _mpa_a.copy(), _raw_a.copy()
    mpa_a[:2, 2] = mpa_a[1:3, 3]
    raw_a[:2, 2] = raw_a[1:3, 3]
    if mpc.pid:
        assert_eq_approx("MPA 2-dim set slice-int tuple", mpa_a.reveal(), raw_a, error=0.001)
    
    mpa_a, raw_a = _mpa_a.copy(), _raw_a.copy()
    mpa_a[2, :2] = mpa_a[3, 1:3]
    raw_a[2, :2] = raw_a[3, 1:3]
    if mpc.pid:
        assert_eq_approx("MPA 2-dim set int-slice tuple", mpa_a.reveal(), raw_a, error=0.001)
    
    mpa_a, raw_a = _mpa_a.copy(), _raw_a.copy()
    mpa_a[2, 2] = mpa_a[3, 3]
    raw_a[2, 2] = raw_a[3, 3]
    if mpc.pid:
        assert_eq_approx("MPA 2-dim set int-int tuple", mpa_a.reveal(), raw_a, error=0.001)


def test_mpa_transpose(mpa_a, raw_a):
    mpc = mpa_a._mpc
    mhe_t = mpa_a.T.T
    if mpc.pid:
        assert_eq_approx("MPA lazy transpose", mhe_t.reveal(), raw_a, error=0.001)

    mhe_t = mpa_a.T
    if mpc.pid:
        assert_eq_approx("MPA actual transpose", mhe_t.reveal(), raw_a.T, error=0.001)


def test_mpa_mpc_switching(mpa_a, raw_a):
    mpc = mpa_a._mpc
    sharetensor_a = mpa_a.to_sharetensor()
    if mpc.pid:
        assert_eq_approx("MPA -> MPC switch", sharetensor_a.reveal(mpc), raw_a, error=0.001)

    mpa_a = sharetensor_a.to_mpa(mpc, dtype=mpa_a.dtype)
    if mpc.pid:
        assert_eq_approx("MPC -> MPA switch", mpa_a.reveal(), raw_a, error=0.001)


def test_mpa_elem_wise_operations(mpa_a, mpa_b, raw_a, raw_b):
    mpc = mpa_a._mpc
    mpa_add = mpa_a + mpa_b
    if mpc.pid:
        assert_eq_approx("MPA addition", mpa_add.reveal(), raw_a + raw_b, error=0.001)

    _ones = ones(mpa_a.shape)
    mpa_public_add = mpa_a + _ones
    if mpc.pid:
        assert_eq_approx("MPA public addtition", mpa_public_add.reveal(), raw_a + _ones, error=0.001)

    mpa_sub = mpa_a - mpa_b
    if mpc.pid:
        assert_eq_approx("MPA subtraction", mpa_sub.reveal(), raw_a - raw_b, error=0.001)

    mpa_mul = mpa_a * mpa_b
    if mpc.pid:
        assert_eq_approx("MPA multiplication", mpa_mul.reveal(), raw_a * raw_b, error=0.005)
    
    mpa_a_row_mat = mpa_a[0].expand_dims(axis=0)
    row_mat_add = mpa_a_row_mat + mpa_a_row_mat
    raw_a_row_mat = raw_a[0].expand_dims(axis=0)
    if mpc.pid:
        assert_eq_approx("MPA addition w/ dimension expansion", row_mat_add.reveal(), raw_a_row_mat + raw_a_row_mat, error=0.001)


def test_mpa_matmul_operations(mpa_a, mpa_b, raw_a, raw_b):
    mpc = mpa_a._mpc
    mpa_dot = mpa_a.dot()
    raw_dot = (raw_a * raw_a).sum(axis=1).expand_dims(axis=1)
    if mpc.pid:
        assert_eq_approx("MPA dot 2-dim", mpa_dot.reveal(), raw_dot, error=0.005)
    
    mpa_dot_1_dim = mpa_a[0].dot()
    if mpc.pid:
        assert_eq_approx("MPA dot 1-dim", mpa_dot_1_dim.reveal(), raw_dot[0], error=0.005)
    
    mpa_matmul = mpa_a @ mpa_b.T
    raw_matmul = raw_a @ raw_b.T
    if mpc.pid:
        assert_eq_approx("MPA matrix multiplication non-transposed x transposed", mpa_matmul.reveal(), raw_matmul, error=0.02)

    mpa_matmul = mpa_a.T @ mpa_b
    if mpc.pid:
        assert_eq_approx("MPA matrix multiplication transposed x non-transposed", mpa_matmul.reveal(), raw_a.T @ raw_b, error=0.02)

    _ones = ones(mpa_a.shape, dtype=int).T
    mpa_public_matmul = mpa_a @ _ones
    if mpc.pid:
        assert_eq_approx("MPA matrix public multiplication", mpa_public_matmul.reveal(), raw_a @ _ones, error=0.02)

    mpa_a_row_mat = mpa_a[0].expand_dims(axis=0)
    row_mat_matmul = mpa_a_row_mat.T @ mpa_a_row_mat
    raw_a_row_mat = raw_a[0].expand_dims(axis=0)
    if mpc.pid:
        assert_eq_approx("MPA matrix multiplication transposed x non-transposed w/ dim expansion", row_mat_matmul.reveal(), raw_a_row_mat.T @ raw_a_row_mat, error=0.02)
    

def test_mpa[TP](mpc: MPCEnv[TP], modulus: TP):
    mpc.comms.sync_parties()
    alg_struct = "ring" if modulus.popcnt() == 1 else "field"
    print(f'CP{mpc.pid}:\tTesting Sequre MHE MPA on {alg_struct}... \n')
    rows, cols = 4, 32
    
    a_share = array(random_floats((rows, cols)))
    b_share = array(random_floats((rows, cols)))
    
    mpa_a = MPA(mpc, a_share)
    mpa_b = MPA(mpc, b_share)

    raw_a = mpc.comms.collect(a_share).sum() if mpc.pid else zeros_like(a_share)
    raw_b = mpc.comms.collect(b_share).sum() if mpc.pid else zeros_like(b_share)

    mpc.comms.sequential(lambda: print(f"CP{mpc.pid}: Printing MPA test data A for debugging:", raw_a), False)
    mpc.comms.sync_parties()
    mpc.comms.sequential(lambda: print(f"CP{mpc.pid}: Printing MPA test data B for debugging:", raw_b), False)

    if mpc.pid:
        assert_eq_approx("MPA load/collect/decrypt 1", mpa_a.reveal(), raw_a, error=0.001)
        assert_eq_approx("MPA load/collect/decrypt 2", mpa_b.reveal(), raw_b, error=0.001)

    test_mpa_getitem(mpa_a, raw_a)
    test_mpa_setitem(mpa_a, raw_a)
    test_mpa_transpose(mpa_a, raw_a)
    test_mpa_mpc_switching(mpa_a, raw_a)
    test_mpa_elem_wise_operations(mpa_a, mpa_b, raw_a, raw_b)
    test_mpa_matmul_operations(mpa_a, mpa_b, raw_a, raw_b)

    print(f'CP{mpc.pid}:\tSequre MHE MPA tests on {alg_struct} passed.\n')
