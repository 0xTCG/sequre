from numpy.create import array, zeros_like

from ..utils import assert_eq_approx, assert_eq

from sequre.stdlib.lin_alg import householder, qr_fact_square, tridiag, eigen_decomp, orthonormalize
from sequre.types.multiparty_union import MPU
from sequre.types.sharetensor import Sharetensor
from sequre.types.ciphertensor import Ciphertensor
from sequre.lattiseq.ckks import Ciphertext
from sequre.types.internal import Internal
from sequre.utils.utils import random_floats


def test_lin_alg(mpc, modulus):
    alg_struct = "ring" if modulus.popcnt() == 1 else "field"
    print(f'CP{mpc.pid}:\tTesting sequre MPC linear algebra on {alg_struct} ... \n')
    
    with mpc.randomness.seed_switch(-1):
        raw_vec = array(random_floats((8,)))
        raw_mat = array(random_floats((8, 8)))
    mpc_vec = Sharetensor.enc(mpc, raw_vec, 0, modulus)
    mpp_vec = mpc_vec.to_mpp(mpc, [1, 0], dtype=float)
    
    partition = raw_vec[4 * (mpc.pid - 1):4 * mpc.pid] if mpc.pid else zeros_like(raw_vec[:4])
    mpu_vec = MPU[Tuple[int], float](
        mpc, Ciphertensor[Ciphertext].enc(mpc, partition).T, "partition").T

    mpc_mat = Sharetensor.enc(mpc, raw_mat, 0, modulus)
    mpp_mat = mpc_mat.to_mpp(mpc, [4, 4], dtype=float)
    
    raw_v = householder(mpc, raw_vec)
    mpc_v = householder(mpc, mpc_vec)
    mpp_v = householder(mpc, mpp_vec)
    mpu_v = householder(mpc, mpu_vec)
    if mpc.pid == 0:
        assert_eq(f"CP{mpc.pid}:\tSafe-checking householder result shape (MPP) on {alg_struct}", mpp_v.shape, raw_v.shape)
    if mpc.pid != 0:
        assert_eq_approx(f'CP{mpc.pid}:\tSequre householder (MPC) on {alg_struct}', mpc_v.reveal(mpc), raw_v)
        assert_eq_approx(f'CP{mpc.pid}:\tMPC input intact post householder on {alg_struct}', mpc_vec.reveal(mpc), raw_vec, silent_pass=True)
        assert_eq_approx(f'CP{mpc.pid}:\tSequre householder (MPP) on {alg_struct}', mpp_v.reveal(mpc), raw_v)
        assert_eq_approx(f'CP{mpc.pid}:\tMPP input intact post householder on {alg_struct}', mpp_vec.reveal(mpc), raw_vec, silent_pass=True)
        assert_eq_approx(f'CP{mpc.pid}:\tSequre householder (MPU) on {alg_struct}', mpu_v.reveal(mpc), raw_v)
        assert_eq_approx(f'CP{mpc.pid}:\tMPU input intact post householder on {alg_struct}', mpu_vec.reveal(mpc), raw_vec, silent_pass=True)

    raw_orth = orthonormalize(mpc, raw_mat)
    mpc_orth = orthonormalize(mpc, mpc_mat)
    mpp_orth = orthonormalize(mpc, mpp_mat)
    if mpc.pid == 0:
        assert_eq(f"CP{mpc.pid}:\tSafe-checking orthonormalization result shape (MPP) on {alg_struct}", mpp_orth.shape, raw_orth.shape)
    if mpc.pid != 0:
        assert_eq_approx(f'CP{mpc.pid}:\tSequre orthonormalization (MPC) on {alg_struct}', mpc_orth.reveal(mpc), raw_orth)
        assert_eq_approx(f'CP{mpc.pid}:\tMPC input intact post orthonormalization on {alg_struct}', mpc_mat.reveal(mpc), raw_mat, silent_pass=True)
        assert_eq_approx(f'CP{mpc.pid}:\tSequre orthonormalization (MPP) on {alg_struct}', mpp_orth.reveal(), raw_orth)
        assert_eq_approx(f'CP{mpc.pid}:\tMPP input intact post orthonormalization on {alg_struct}', mpp_mat.reveal(), raw_mat, silent_pass=True)

    raw_q_fact, raw_r_fact = qr_fact_square(mpc, raw_mat)
    mpc_q_fact, mpc_r_fact = qr_fact_square(mpc, mpc_mat)
    mpp_q_fact, mpp_r_fact = qr_fact_square(mpc, mpp_mat)
    mpc_result_mat = Internal.matmul(mpc, mpc_r_fact, mpc_q_fact)
    mpp_result_mat = Internal.matmul(mpc, mpp_r_fact, mpp_q_fact)
    if mpc.pid == 0:
        assert_eq(f"CP{mpc.pid}:\tSafe-checking QR factorization result shape (MPP) on {alg_struct}: Q", mpp_q_fact.shape, raw_q_fact.shape)
        assert_eq(f"CP{mpc.pid}:\tSafe-checking QR factorization result shape (MPP) on {alg_struct}: R", mpp_r_fact.shape, raw_r_fact.shape)
    if mpc.pid != 0:
        assert_eq_approx(f'CP{mpc.pid}:\tSequre QR factorization (MPC) on {alg_struct}: Q correctness', mpc_q_fact.reveal(mpc), raw_q_fact)
        assert_eq_approx(f'CP{mpc.pid}:\tSequre QR factorization (MPC) on {alg_struct}: R correctness', mpc_r_fact.reveal(mpc), raw_r_fact)
        assert_eq_approx(f'CP{mpc.pid}:\tSequre QR factorization (MPC) on {alg_struct}: validity', mpc_result_mat.reveal(mpc), (raw_r_fact @ raw_q_fact))
        assert_eq_approx(f'CP{mpc.pid}:\tMPC input intact post QR factorization on {alg_struct}', mpc_mat.reveal(mpc), raw_mat, silent_pass=True)
        assert_eq_approx(f'CP{mpc.pid}:\tSequre QR factorization (MPP) on {alg_struct}: Q correctness', mpp_q_fact.reveal(mpc), raw_q_fact, error=0.1)
        assert_eq_approx(f'CP{mpc.pid}:\tSequre QR factorization (MPP) on {alg_struct}: R correctness', mpp_r_fact.reveal(mpc), raw_r_fact, error=0.1)
        assert_eq_approx(f'CP{mpc.pid}:\tSequre QR factorization (MPP) on {alg_struct}: validity', mpp_result_mat.reveal(mpc), raw_r_fact @ raw_q_fact, error=0.25)
        assert_eq_approx(f'CP{mpc.pid}:\tMPP input intact post QR factorization on {alg_struct}', mpp_mat.reveal(mpc), raw_mat, silent_pass=True)

    raw_t, raw_q = tridiag(mpc, raw_mat)
    mpc_t, mpc_q = tridiag(mpc, mpc_mat)
    if mpc.pid != 0:
        assert_eq_approx(f'CP{mpc.pid}:\tSequre tridiagonalize T on {alg_struct}', mpc_t.reveal(mpc), raw_t)
        assert_eq_approx(f'CP{mpc.pid}:\tSequre tridiagonalize Q on {alg_struct}', mpc_q.reveal(mpc), raw_q)
        assert_eq_approx(f'CP{mpc.pid}:\tInput intact post tridiagonalization on {alg_struct}', mpc_mat.reveal(mpc), raw_mat, silent_pass=True)
    
    # TODO: #262 Check why the sign of the eigen decomposition result is flipped for some inputs
    # raw_eigen_mat, raw_eigen_val = eigen_decomp(mpc, raw_mat)
    # mpc_eigen_mat, mpc_eigen_val = eigen_decomp(mpc, mpc_mat)
    # if mpc.pid != 0:
    #     assert_eq_approx(f'CP{mpc.pid}:\tSequre eigen decomposition eigen matrix on {alg_struct}', mpc_eigen_mat.reveal(mpc), raw_eigen_mat)
    #     assert_eq_approx(f'CP{mpc.pid}:\tSequre eigen decomposition eigen values on {alg_struct}', mpc_eigen_val.reveal(mpc), raw_eigen_val, error=0.15)
    #     assert_eq_approx(f'CP{mpc.pid}:\tInput intact post eigen decomposition {alg_struct}', mpc_mat.reveal(mpc), raw_mat, silent_pass=True)
