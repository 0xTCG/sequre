from numpy.create import array

from ..utils import assert_eq_approx, assert_eq

from sequre.types.multiparty_partition import MPP
from sequre.utils.io import write_ndarray, read_ndarray
from sequre.utils.utils import __rand_mat
from sequre.utils.param import *
from sequre.mpc.env import MPCEnv
from .. import collective_king_protocol


def test_king[TP](mpc: MPCEnv[TP], modulus: TP):
    print(f'CP{mpc.pid}:\tTesting Sequre KING on {"ring" if modulus.popcnt() == 1 else "field"} ... \n')

    rows_per_partition, cols = 8, 32
    partition_path = "tests/data/king/partition.bin"

    if mpc.pid == 0:
        with open(partition_path, "wb") as f: write_ndarray(f, array(__rand_mat([rows_per_partition, cols], 3, TP=int)) - 1, binary=True)
    
    mpc.comms.sync_parties()
    
    partition = read_ndarray(open(partition_path), (rows_per_partition, cols), True, dtype=int)
    raw_data = [partition for _ in range(mpc.comms.number_of_parties - 1)].unfence()
    mpp_data = MPP.collective_load(mpc, partition_path, rows=rows_per_partition, cols=cols, binary=True, modulus=modulus, dtype=int)
    
    mpc.comms.sequential(lambda: print(f"CP{mpc.pid}: KING test data for debugging:", raw_data), False)
    if mpc.pid > 0:
        assert_eq(f"CP{mpc.pid}:\tSafe-checking KING data loading", mpp_data.reveal(mpc), raw_data)

    classic_king_coefficients = collective_king_protocol(mpc, raw_data, 0)
    sequre_king_coefficients = collective_king_protocol(mpc, mpp_data, 0)

    if mpc.pid == 0:
        assert_eq(f"CP{mpc.pid}:\tSafe-checking KING result shape", sequre_king_coefficients.shape, classic_king_coefficients.shape)
    else:
        assert_eq(f"CP{mpc.pid}:\tSequre KING", sequre_king_coefficients.reveal(mpc), classic_king_coefficients.astype(int))

    print(f'CP{mpc.pid}:\tSequre KING on {"ring" if modulus.popcnt() == 1 else "field"} tests passed.\n')
    