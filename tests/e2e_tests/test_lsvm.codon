import prg

from ..utils import assert_eq

from sequre.types.shared_tensor import SharedTensor
from sequre.stdlib.learn.linear_svm import offline_lsvm_train, offline_lsvm_predict, lsvm_train, lsvm_predict


def test_lsvm(mpc, modulus):
    alg_struct = "ring" if modulus.popcnt() == 1 else "field"
    print(f'CP{mpc.pid}:\tTesting Sequre MPC linear SVM on {alg_struct} ... \n')

    points = []
    labels = []
    n_points = 1000
    for i in range(n_points):
        label = float((-1) ** (i % 2))
        point = [(prg.random() * 999 + 1) * label, prg.random() * 1000]
        points.append(point)
        labels.append(label)
    
    eta = 0.01
    epochs = 30
    l2 = 0.001
    mini_batch_size = 100
    
    if mpc.pid == 0:
        for optimizer in ['sgd', 'bgd', 'mbgd']:
            w, b = offline_lsvm_train(points, labels, eta, epochs, l2, mini_batch_size, optimizer)
            predictions = offline_lsvm_predict(points, w, b)
            predictions = [(-1.0 if e < 0.0 else 1.0) for e in predictions]
            accuracy = [int(p == l) for p, l in zip(predictions, labels)].mean()
            assert_eq(f'Offline linear SVM via {optimizer.upper()}', accuracy, 1.0)
    
    points_shared = mpc.comms.share_from_trusted_dealer(points.to_fp(modulus), modulus)
    labels_shared = mpc.comms.share_from_trusted_dealer(labels.to_fp(modulus), modulus)

    points_stensor = SharedTensor(points_shared, modulus)
    labels_stensor = SharedTensor(labels_shared, modulus)
    points_stensor.fp = True
    labels_stensor.fp = True

    for optimizer in ['sgd', 'bgd', 'mbgd']:
        w_stensor, b_stensor = lsvm_train(mpc, points_stensor, labels_stensor, eta, epochs, l2, mini_batch_size, optimizer, debug=True)
        predictions = lsvm_predict(mpc, points_stensor, w_stensor, b_stensor).print(mpc)
        predictions = [(-1.0 if e < 0.0 else 1.0) for e in predictions]
        accuracy = [int(p == l) for p, l in zip(predictions, labels)].mean()
        if mpc.pid != 0: assert_eq(f'Sequre linear SVM via {optimizer.upper()} at CP{mpc.pid}', accuracy, 1.0)
