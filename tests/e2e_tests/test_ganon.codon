from sequre.utils.param import *
from sequre.utils.testing import assert_eq
from sequre.mpc.env import MPCEnv
from .. import offline_ganon, sequre_ganon, FilterConfig


def test_ganon[TP](mpc: MPCEnv[TP], modulus: TP):
    print(f'CP{mpc.pid}:\tTesting Sequre Ganon on {"ring" if modulus.popcnt() == 1 else "field"} ... \n')
    
    parsed_hierarchy = {
    "level_1": {
            "window_size": 0,
            "kmer_size": 19,
            "offset": 1,
            "rel_filter": 1,
            "abs_filter": 0,
            "alphabet_size": 5  # the size of the nucleotide alphabeth -- 5 in case of SeqAn's IBF (A,C,G,N,T)
        }
    }

    filter_config = FilterConfig(
        ibf_path="tests/data/ganon/sample_bacteria_raw_ibf.bin",
        map_path="tests/data/ganon/sample_bacteria.map",
        rel_cutoff=0.25,
        abs_cutoff=0.0,
        bin_count=63,
        hash_count=4)

    with open('tests/data/output/ganon.txt') as f:
        expected_classifications = []
        for line in f:
            read_id, target, kmer_count = line.split()
            expected_classifications.append([read_id, target, kmer_count])
            
        if mpc.pid == 0:
            offline_classifications = offline_ganon(mpc, parsed_hierarchy, [filter_config], 'tests/data/ganon/bac.sim.1.fasta')
            assert_eq(f'Offline Ganon', offline_classifications, expected_classifications)
        
        online_classifications = sequre_ganon(mpc, parsed_hierarchy, [filter_config], 'tests/data/ganon/bac.sim.1.fasta', modulus)
        if mpc.pid != 0: assert_eq(f'Sequre Ganon ({"ring" if modulus.popcnt() == 1 else "field"})', online_classifications, expected_classifications)
