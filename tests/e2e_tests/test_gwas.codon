from numpy.create import zeros_like

from ..utils import assert_eq, assert_eq_approx

from sequre.types.sharetensor import Sharetensor
from sequre.types.multiparty_union import MPU
from sequre.utils.param import int_t

from .. import \
    open_input_files, \
    load_phenotypes_and_covariates, \
    load_dosage, \
    quality_control, \
    population_stratification_analysis, \
    cochran_armitage, \
    gwas_protocol


def test_cochran_armitage(mpc, raw_components, raw_pheno, raw_geno, modulus):
    alg_struct = "ring" if modulus.popcnt() == 1 else "field"
    print(f'CP{mpc.pid}:\tTesting Sequre Cochran-Armitage on {alg_struct} ... \n')

    indv_per_party = 8
    indv_count = indv_per_party * (mpc.comms.number_of_parties - 1)
    snp_count = 32
    components_count = 4
    
    raw_components = raw_components[:components_count, :indv_count]
    raw_components_t = raw_components.T
    raw_pheno = raw_pheno[:indv_count]
    raw_geno = raw_geno[:indv_count, :snp_count]
    
    mpc_components = Sharetensor.enc(mpc, raw_components, 1, modulus)
    mpc_pheno = Sharetensor.enc(mpc, raw_pheno, 1, modulus)
    mpc_geno = Sharetensor.enc(mpc, raw_geno, 1, modulus)

    partition_components = raw_components_t[(mpc.pid - 1) * indv_per_party: mpc.pid * indv_per_party] if mpc.pid else zeros_like(raw_components_t)
    partition_pheno = raw_pheno[(mpc.pid - 1) * indv_per_party: mpc.pid * indv_per_party] if mpc.pid else zeros_like(raw_pheno)
    partition_geno = raw_geno[(mpc.pid - 1) * indv_per_party: mpc.pid * indv_per_party] if mpc.pid else zeros_like(raw_geno)
    
    mpu_components = MPU[Tuple[int, int], float](mpc, partition_components, "partition").T
    mpu_pheno = MPU[Tuple[int], float](mpc, partition_pheno, "partition").T
    mpu_geno = MPU[Tuple[int, int], float](mpc, partition_geno, "partition")

    mpc.comms.sequential(lambda: print(f"CP{mpc.pid}:\tCochran-Armitage test data for debugging on {alg_struct}: components", raw_components), False)
    if mpc.pid == 0:
        assert_eq(f"CP{mpc.pid}:\tSafe-checking Cochran-Armitage data loading shapes (MPC) on {alg_struct}: components", mpc_components.shape, list(raw_components.shape))
        assert_eq(f"CP{mpc.pid}:\tSafe-checking Cochran-Armitage data loading shapes (MPU) on {alg_struct}: components", mpu_components.shape, raw_components.shape)
    else:
        assert_eq_approx(f"CP{mpc.pid}:\tSafe-checking Cochran-Armitage data loading (MPC) on {alg_struct}: components", mpc_components.reveal(mpc), raw_components)
        assert_eq_approx(f"CP{mpc.pid}:\tSafe-checking Cochran-Armitage data loading (MPU) on {alg_struct}: components", mpu_components.reveal(mpc), raw_components)
    
    mpc.comms.sequential(lambda: print(f"CP{mpc.pid}:\tCochran-Armitage test data for debugging on {alg_struct}: pheno", raw_pheno), False)
    if mpc.pid == 0:
        assert_eq(f"CP{mpc.pid}:\tSafe-checking Cochran-Armitage data loading shapes (MPC) on {alg_struct}: pheno", mpc_pheno.shape, list(raw_pheno.shape))
        assert_eq(f"CP{mpc.pid}:\tSafe-checking Cochran-Armitage data loading shapes (MPU) on {alg_struct}: pheno", mpu_pheno.shape, raw_pheno.shape)
    else:
        assert_eq_approx(f"CP{mpc.pid}:\tSafe-checking Cochran-Armitage data loading (MPC) on {alg_struct}: pheno", mpc_pheno.reveal(mpc), raw_pheno)
        assert_eq_approx(f"CP{mpc.pid}:\tSafe-checking Cochran-Armitage data loading (MPU) on {alg_struct}: pheno", mpu_pheno.reveal(mpc), raw_pheno)
    
    mpc.comms.sequential(lambda: print(f"CP{mpc.pid}:\tCochran-Armitage test data for debugging on {alg_struct}: geno", raw_geno), False)
    if mpc.pid == 0:
        assert_eq(f"CP{mpc.pid}:\tSafe-checking Cochran-Armitage data loading shapes (MPC) on {alg_struct}: geno", mpc_geno.shape, list(raw_geno.shape))
        assert_eq(f"CP{mpc.pid}:\tSafe-checking Cochran-Armitage data loading shapes (MPU) on {alg_struct}: geno", mpu_geno.shape, raw_geno.shape)
    else:
        assert_eq_approx(f"CP{mpc.pid}:\tSafe-checking Cochran-Armitage data loading (MPC) on {alg_struct}: geno", mpc_geno.reveal(mpc), raw_geno)
        assert_eq_approx(f"CP{mpc.pid}:\tSafe-checking Cochran-Armitage data loading (MPU) on {alg_struct}: geno", mpu_geno.reveal(mpc), raw_geno)

    raw_assoc = cochran_armitage(mpc, raw_components, raw_pheno, raw_geno)
    mpc_assoc = cochran_armitage(mpc, mpc_components, mpc_pheno, mpc_geno)

    if mpc.pid == 0:
        assert_eq(f"CP{mpc.pid}:\tSafe-checking Cochran-Armitage result shape (MPC) on {alg_struct}", mpc_assoc.shape, list(raw_assoc.shape))
    else:
        assert_eq_approx(f"CP{mpc.pid}:\tSequre Cochran-Armitage (MPC) on {alg_struct}", mpc_assoc.reveal(mpc), raw_assoc)
    
    mpu_assoc = cochran_armitage(mpc, mpu_components, mpu_pheno, mpu_geno)

    if mpc.pid == 0:
        assert_eq(f"CP{mpc.pid}:\tSafe-checking Cochran-Armitage result shape (MPU) on {alg_struct}", mpu_assoc.shape, raw_assoc.shape)
    else:
        assert_eq_approx(f"CP{mpc.pid}:\tSequre Cochran-Armitage (MPU) on {alg_struct}", mpu_assoc.reveal(mpc), raw_assoc)
    
    print(f'CP{mpc.pid}:\tSequre Cochran-Armitage on {"ring" if modulus.popcnt() == 1 else "field"} tests passed.\n')


def test_gwas_sections(mpc, modulus):
    print(f'CP{mpc.pid}:\tTesting Sequre GWAS sections on {"ring" if modulus.popcnt() == 1 else "field"} ... \n')

    num_inds = 1000
    num_snps = 1000
    pca_components = 5
    pca_oversamples = 5
    pca_power_iterations = 1
    
    with open('tests/data/output/gwas.txt') as f:
        expected_output = [float(e.strip()) for e in next(f).split(',')]
        
        (f_pheno, f_cov, f_geno, f_miss,
        f_geno_mask, f_miss_mask) = open_input_files(mpc, True)

        snp_pos, pheno, cov = load_phenotypes_and_covariates(mpc, f_pheno, f_cov, True, modulus)
        
        g, miss, dosage = load_dosage(
            mpc, f_geno, f_geno_mask, f_miss, f_miss_mask,
            [int_t(1) for _ in range(num_inds)],
            [int_t(1) for _ in range(num_snps)],
            num_inds, num_snps, modulus)

        (snp_pos, pheno, cov, g_mean, g_std_bern_inv,
        ikeep, gwas_snp_keep_mask) = quality_control(
            mpc, num_inds, num_snps, snp_pos,
            pheno, cov, g, miss, dosage)
        
        components = population_stratification_analysis(
            mpc, pca_components, pca_oversamples, pca_power_iterations,
            snp_pos, cov, g_mean, g_std_bern_inv, ikeep,
            gwas_snp_keep_mask, miss, dosage)
        
        filtered_dosage = dosage.filter(ikeep).T.filter(gwas_snp_keep_mask).T
        gwas_result = cochran_armitage(mpc, components, pheno, filtered_dosage)
        
        if mpc.pid:
            assert_eq_approx(f'Sequre GWAS sections ({"ring" if modulus.popcnt() == 1 else "field"})', gwas_result.reveal(mpc).tolist(), expected_output, error=0.05)
        
    test_cochran_armitage(mpc, components.reveal(mpc), pheno.reveal(mpc), filtered_dosage.reveal(mpc), modulus)

    print(f'CP{mpc.pid}:\tSequre GWAS sections on {"ring" if modulus.popcnt() == 1 else "field"} tests passed.\n')


def test_gwas_e2e(mpc, modulus):
    print(f'CP{mpc.pid}:\tTesting Sequre GWAS on {"ring" if modulus.popcnt() == 1 else "field"} ... \n')

    with open('tests/data/output/gwas.txt') as f:
        expected_output = [float(e.strip()) for e in next(f).split(',')]
        gwas_result = mpc.comms.print_fp(gwas_protocol(mpc, True, modulus).share, modulus)
        if mpc.pid:
            assert_eq_approx(f'Sequre GWAS ({"ring" if modulus.popcnt() == 1 else "field"})', gwas_result, expected_output, error=0.05)

    print(f'CP{mpc.pid}:\tSequre GWAS on {"ring" if modulus.popcnt() == 1 else "field"} tests passed.\n')


def test_gwas(mpc, modulus):
    test_gwas_sections(mpc, modulus)
    test_gwas_e2e(mpc, modulus)