from ..utils import assert_geq, score_linear_classificator

from sequre.utils.param import *
from sequre.mpc.env import MPCEnv
from .. import sequre_opal, offline_opal, load_dico, OPAL_TARGET_DICO_LABEL


def test_opal[TP](mpc: MPCEnv[TP], modulus: TP):
    taxid_path = f'tests/data/opal/A1.train.taxid'
    
    with open('tests/data/output/opal.txt') as f:
        dico, _ = load_dico(taxid_path)
        ground_truth = [int(dico[int(e.strip())] == OPAL_TARGET_DICO_LABEL) for e in f] * 2 - 1
        if mpc.pid == 0:
            result = offline_opal(True)
            accuracy, precision, recall, f1 = score_linear_classificator(result, ground_truth)
            print(f'Accuracy stats:\n'
                  f'\tOffline accuracy: {accuracy}.\n'
                  f'\tOffline precision: {precision}.\n'
                  f'\tOffline recall: {recall}.\n'
                  f'\tOffline F1: {f1}.\n')
            assert_geq('Opal offline accuracy', accuracy, 0.35)
            assert_geq('Opal offline precision', precision, 0.1)
            assert_geq('Opal offline recall', recall, 0.3)
            assert_geq('Opal offline F1', f1, 0.15)

        result = sequre_opal(mpc, True, modulus).print(mpc)
        accuracy, precision, recall, f1 = score_linear_classificator(result, ground_truth)
        if mpc.pid == 2:
            print(f'Accuracy stats:\n'
                  f'\tOnline accuracy: {accuracy}.\n'
                  f'\tOnline precision: {precision}.\n'
                  f'\tOnline recall: {recall}.\n'
                  f'\tOnline F1: {f1}.\n')
        if mpc.pid != 0:
            assert_geq('Opal online accuracy', accuracy, 0.35)
            assert_geq('Opal online precision', precision, 0.1)
            assert_geq('Opal online recall', recall, 0.3)
            assert_geq('Opal online F1', f1, 0.15)

    print(f'Opal ({"ring" if modulus.popcnt() == 1 else "field"}) passed at {mpc.pid}!\n')
