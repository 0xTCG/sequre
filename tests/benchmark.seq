from ..applications.gwas import gwas_protocol
from ..applications.dti import dti_protocol
from ..applications.opal import sequre_opal as opal
from ..applications.ganon import sequre_ganon as ganon, FilterConfig
from ..applications.utils.data_sharing import share_all_data

from utils import time_frame
from ..playground import playground

from sequre.stdlib.lin_alg import qr_fact_square, tridiag, eigen_decomp, orthonormal_basis
from sequre.types.utils import double_to_fp
from sequre.types.shared_tensor import SharedTensor
from sequre.utils.param import int_t


################################### Wrappers #####################################
def playground_wrapper(mpc, modulus, a, b, c, d, e, f, g, h):
    playground(mpc, a, b, c, d, e, f, g, h)

def lin_alg_wrapper(mpc, modulus, sv_mat):
    qr_fact_square(mpc, sv_mat)
    tridiag(mpc, sv_mat)
    eigen_decomp(mpc, sv_mat)
    orthonormal_basis(mpc, sv_mat)

def gwas_wrapper(mpc, modulus):
    gwas_protocol(mpc, True, modulus)

def dti_wrapper(mpc, modulus):
    dti_protocol(mpc, True, modulus, False)

def opal_wrapper(mpc, modulus, coverage):
    opal(mpc, True, modulus, coverage)[0]

def ganon_wrapper(mpc, modulus, read_limit):
    parsed_hierarchy = {
        "level_1": {
                "window_size": 0,
                "kmer_size": 19,
                "offset": 1,
                "rel_filter": 1,
                "abs_filter": 0,
                "alphabet_size": 5  # the size of the nucleotide alphabeth -- 5 in case of SeqAn's IBF (A,C,G,N,T)
            }
        }

    filter_config = FilterConfig(
        ibf_path="data/ganon/opal_dataset_ibf.bin",
        map_path="data/ganon/opal_dataset_map.txt",
        rel_cutoff=0.25,
        abs_cutoff=0.0,
        bin_count=63,
        hash_count=4)

    ganon(mpc, parsed_hierarchy, [filter_config], 'tests/data/opal/test.fragments.fasta', modulus, read_limit)

##################################################################################


def benchmark(mpc, run_playground, modulus):
    a = SharedTensor(mpc.comms.share([int_t(i) for i in range(10)], modulus), modulus)
    b = SharedTensor(mpc.comms.share(
        [int_t(1), int_t(2), int_t(1), int_t(2), int_t(3),
         int_t(4), int_t(3), int_t(4), int_t(1), int_t(5)], modulus), modulus)
    c = SharedTensor(mpc.comms.share([int_t(i) for i in range(10)], modulus), modulus)
    d = SharedTensor(mpc.comms.share(
        [int_t(1), int_t(2), int_t(1), int_t(2), int_t(3),
         int_t(4), int_t(3), int_t(4), int_t(1), int_t(5)], modulus), modulus)
    e = SharedTensor(mpc.comms.share([int_t(i) for i in range(100000)], modulus), modulus)
    f = SharedTensor(mpc.comms.share(int_t(7), modulus), modulus)
    g = SharedTensor(mpc.comms.share(int_t(13), modulus), modulus)
    h = SharedTensor(mpc.comms.share(int_t(19), modulus), modulus)

    if run_playground:
        time_frame(mpc, playground_wrapper, 'Playground', modulus, a, b, c, d, e, f, g, h)
    else:
        h_mat = [[double_to_fp(float(i + j), modulus) for i in range(50)] for j in range(50)]
        sv_mat = SharedTensor(h_mat, modulus)
        sv_mat.get_partitions(mpc)
        sv_mat.fp = True

        share_all_data(mpc, True, modulus, TP=int_t)

        time_frame(mpc, lin_alg_wrapper, 'Linear algebra', modulus, sv_mat)
        time_frame(mpc, gwas_wrapper, 'Genome-wide association study', modulus)
        time_frame(mpc, dti_wrapper, 'Drug target interaction inference', modulus)
        time_frame(mpc, opal_wrapper, 'Opal 0.1x', modulus, 0.1)
        time_frame(mpc, opal_wrapper, 'Opal 15x', modulus, 15)
        time_frame(mpc, ganon_wrapper, 'Ganon', modulus, 100)
