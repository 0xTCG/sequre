from ..utils.param import AF_UNIX, SOCK_STREAM
from ..types.builtin import sockaddr_un

from C import socket(int, int, int) -> int
from C import bind(int, ptr[sockaddr_un], int) -> int
from C import connect(int, ptr[sockaddr_un], int) -> int
from C import perror(cobj)
from C import memcpy(cobj, cobj, int)


from common import listen_socket, accept_socket, close_socket


class CSocket:
    sock_fd: int
    socket_address: str
    serveraddr: sockaddr_un

    def __init__(self: CSocket, file_address: str, ip_address: str = '0.0.0.0'):
        self.sock_fd = -1
        self.socket_address = file_address
        self.serveraddr = self._set_serveraddr(file_address)

    def socket(self: CSocket):
        close_socket(self.sock_fd)
        self.sock_fd = socket(AF_UNIX, SOCK_STREAM, 0)
        if self.sock_fd == -1:
            perror(f'Socket not instantiated'.c_str())
            raise ValueError(f'Socket not instantiated')

    def connect(self: CSocket) -> bool:
        serveraddr = self.serveraddr
        connection: int = connect(self.sock_fd, __ptr__(serveraddr), len(self.socket_address) + 2)

        if connection != 0:
            perror(f'Could not connect at {self.socket_address}'.c_str())

        return connection == 0

    def bind(self: CSocket):
        serveraddr = self.serveraddr
        rc: int = bind(self.sock_fd, __ptr__(serveraddr), len(self.socket_address) + 2)
        if rc < 0:
            perror(f'Server not binded at {self.socket_address} and fd {self.sock_fd}'.c_str())
            raise ValueError(f'Server not binded at {self.socket_address} and fd {self.sock_fd}')
        else:
            print(f'Server binded at {self.socket_address}')

    def open_channel(self: CSocket):
        self.socket()
        self.bind()
        listen_socket(self.sock_fd)
        self.sock_fd = accept_socket(self.sock_fd)

    def _set_serveraddr(self: CSocket, socket_address: str) -> sockaddr_un:
        serveraddr = sockaddr_un(AF_UNIX, ptr[byte](len(socket_address)))
        serveraddr_ptr = ptr[byte](__ptr__(serveraddr).as_byte())
        memcpy(serveraddr_ptr, ptr[byte](__ptr__(AF_UNIX).as_byte()), 2)
        memcpy(serveraddr_ptr + 2, socket_address.c_str(), len(socket_address))
        return serveraddr
