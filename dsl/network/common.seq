from ..utils.param import SHUT_RDWR, int_t
from ..utils.utils import field_size

from C import listen(int, int) -> int
from C import accept(int, int, int) -> int
from C import shutdown(int, int) -> int
from C import perror(cobj)
from C import recv(int, cobj, int, int) -> int
from C import send(int, cobj, int, int) -> int
from C import close(int) -> int
from C import memcpy(cobj, cobj, int)


def close_socket(sock_fd: int):
    if sock_fd != -1:
        shutdown(sock_fd, SHUT_RDWR)
        close(sock_fd)


def listen_socket(sock_fd):
    rc: int = listen(sock_fd, 3)
    if rc == -1:
        perror(f'Server not listening: {rc}'.c_str())
        raise ValueError('Server not listening.')
    else:
        print(f'Server listening at fd {sock_fd}')


def accept_socket(sock_fd):
    accepted_fd: int = accept(sock_fd, 0, 0)
    if accepted_fd == -1:
        perror(f'Socket could not accept connection'.c_str())
        raise ValueError('Socket could not accept connection.')
    else:
        print(f'Server accepted at fd {sock_fd}')

    close_socket(sock_fd)
    return accepted_fd


def snd(sock_fd, data, elem_count: int, fs: int) -> int:
    totalsent: int = 0
    msg_len = elem_count * fs
    buffer = ptr[byte](msg_len)

    for i, value in enumerate(data):
        p = ptr[byte](__ptr__(value).as_byte())
        memcpy(buffer + i * fs, p, fs)

    while totalsent < msg_len:
        sent: int = send(sock_fd, buffer + totalsent, msg_len - totalsent, 0)
        if sent == 0:
            perror('Send socket connection broken'.c_str())
            raise ValueError(f'Socket connection broken for msg_len of {msg_len}')
        totalsent += sent
    
    return totalsent


def receive[T](sock_fd, elem_count: int):
    bytes_recd = 0
    offset = 0
    fs = field_size[T]()
    msg_len = elem_count * fs
    buffer = ptr[byte](msg_len)

    while bytes_recd < msg_len:
        received: int = recv(sock_fd, buffer + offset, msg_len - bytes_recd, 0)
        if received <= 0:
            perror('Receive socket connection broken'.c_str())
            raise ValueError(f'Socket connection broken for msg_len of {msg_len - bytes_recd}')
        bytes_recd += received
        buffered = received + offset 
        offset = buffered % fs
        limit = buffered - offset
        # TODO: #123 Investigate if socket offset is natural thing to happen
        if offset != 0: print('Sockets offset by: ', offset)
        # TODO: #84 Recursevily figure out if T contains int_t bellow
        if isinstance(T, int_t):
            for i in range(0, limit, fs): yield ptr[int_t](buffer + i)[0]
        else:
            for i in range(0, limit, fs): yield ptr[u8](buffer + i)[0]
        memcpy(buffer, buffer + limit, offset)
