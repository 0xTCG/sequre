from math import ceil, log2, sqrt

from ..lattiseq.rlwe import \
    SecretKey, \
    PublicKey, \
    RelinearizationKey, \
    RotationKeySet, \
    EvaluationKey
from ..lattiseq.ckks import \
    Parameters, \
    EncoderComplex128, \
    PkEncryptor, \
    Decryptor, \
    Evaluator, \
    new_evaluator, \
    new_encoder_complex, \
    new_encryptor, \
    new_decryptor



# CryptoParams aggregates all ckks scheme information
class CryptoParams:
    sk: SecretKey
    aggregate_sk: SecretKey
    pk: PublicKey
    rlk: RelinearizationKey
    rotks: RotationKeySet
    params: Parameters

    encoder: EncoderComplex128
    encryptor: PkEncryptor
    decryptor: Decryptor
    evaluator: Evaluator

    prec: u64

    def __init__(self, params: Parameters):
        self.params = params

    def initialize(
            self, sk: SecretKey, aggregate_sk: SecretKey,
            pk: PublicKey, rlk: RelinearizationKey, rtks: RotationKeySet, prec: u64):
        
        self.evaluator = new_evaluator(self.params, EvaluationKey(rlk=rlk, rtks=rtks))
        self.encoder = new_encoder_complex(self.params)  # TODO: #218 Replace with big encoder
        self.encryptor = new_encryptor(self.params, pk)
        self.decryptor = new_decryptor(self.params, aggregate_sk)

        self.sk = sk
        self.aggregate_sk = aggregate_sk
        self.pk = pk
        self.rlk = rlk
        self.rotks = rtks

        # self.prec = # TODO: #218 Replace with big encoder


# NewCryptoParams initializes CryptoParams with the given values
def new_crypto_params(
        params: Parameters, sk: SecretKey, aggregate_sk: SecretKey,
        pk: PublicKey, rlk: RelinearizationKey, prec: u64) -> CryptoParams:
    return CryptoParams(
        params=params, sk=sk, aggregate_sk=aggregate_sk,
        pk=pk, rlk=rlk, prec=prec)


# RotationType defines how much we should rotate and in which direction
class RotationType:
    value: int
    side: bool

    def is_right(self) -> bool:
        return self.side
    
    def is_left(self) -> bool:
        return not self.side


# Generate rotKeys for power of two shifts up to # of slots
# and for every shift up to smallDim
def generate_rot_keys(slots: int, small_dim: int, baby_flag: bool) -> list[RotationType]:
    rotations = list[RotationType]()
    # l is the closest larger pow of 2 to slots
    l = slots if slots.popcnt() == 1 else (1 << slots.bitlen())

    rot = 1
    for _ in range(int(ceil(log2(float(l))))):
        rotations.append(RotationType(value=rot, side=False))
        rotations.append(RotationType(value=rot, side=True))
        rot *= 2

    # for baby-step giant-step rotations
    if baby_flag:
        rootl = int(ceil(sqrt(float(slots))))
        for i in range(1, rootl):
            rotations.append(RotationType(value=i, side=False))
            rotations.append(RotationType(value=i * rootl, side=False))

    # for moving the innersum value to its new position
    for i in range(1, small_dim):
        rotations.append(RotationType(value=i, side=True))

    return rotations
