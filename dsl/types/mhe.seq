from ..lattiseq.rlwe import \
    SecretKey, \
    PublicKey, \
    RelinearizationKey, \
    RotationKeySet, \
    EvaluationKey
from ..lattiseq.ckks import \
    Parameters, \
    EncoderComplex128, \
    PkEncryptor, \
    Decryptor, \
    Evaluator, \
    new_evaluator, \
    new_encoder_complex, \
    new_encryptor, \
    new_decryptor


# CryptoParams aggregates all ckks scheme information
class CryptoParams:
    sk: SecretKey
    aggregate_sk: SecretKey
    pk: PublicKey
    rlk: RelinearizationKey
    rotks: RotationKeySet
    params: Parameters

    encoder: EncoderComplex128
    encryptor: PkEncryptor
    decryptor: Decryptor
    evaluator: Evaluator

    prec: u64

    def __init__(self, params: Parameters):
        self.params = params

    def initialize(
            self, sk: SecretKey, aggregate_sk: SecretKey,
            pk: PublicKey, rlk: RelinearizationKey, prec: u64):
        
        self.evaluator = new_evaluator(self.params, EvaluationKey(rlk=rlk))
        self.encoder = new_encoder_complex(self.params)  # TODO: #218 Replace with big encoder
        self.encryptor = new_encryptor(self.params, pk)
        self.decryptor = new_decryptor(self.params, aggregate_sk)

        self.sk = sk
        self.aggregate_sk = aggregate_sk
        self.pk = pk
        self.rlk = rlk
        self.prec = prec  # TODO: #218 Replace with big encoder


# NewCryptoParams initializes CryptoParams with the given values
def new_crypto_params(
        params: Parameters, sk: SecretKey, aggregate_sk: SecretKey,
        pk: PublicKey, rlk: RelinearizationKey, prec: u64) -> CryptoParams:
    return CryptoParams(
        params=params, sk=sk, aggregate_sk=aggregate_sk,
        pk=pk, rlk=rlk, prec=prec)
