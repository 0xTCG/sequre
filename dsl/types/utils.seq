from ..utils.param import *


NBIT_K = NBIT_K  # TODO: Ibrahim
NBIT_F = NBIT_F  # TODO: Ibrahim


def __double_to_fp[TP](x: float, modulus: TP, k: int = NBIT_K, f: int = NBIT_F) -> TP:
    negative = False
    
    if x < 0:
        x = -x
        negative = True

    x_fp = (TP(int(x)) << f) & ((1 << (k - 1)) - 1)

    x_frac = x - int(x)
    for fbit in range(f - 1, -1, -1):
        x_frac *= 2
        if (x_frac >= 1):
            x_frac -= int(x_frac)
            x_fp = x_fp | (1 << fbit)
    
    return x_fp.neg_mod(modulus) if negative else x_fp


def __fp_to_double_mat[TP](a: list[list[TP]], modulus: TP, k: int, f: int) -> list[list[float]]:
    rows, cols = a.shape()
    twokm1 = 1 << (k - 1)

    sn = [[(-1.0 if a[i][j] > twokm1 else 1.0) for j in range(cols)] for i in range(rows)]
    x = [[(a[i][j].neg_mod(modulus) if a[i][j] > twokm1 else a[i][j]) for j in range(cols)] for i in range(rows)]
    x_trunc = x & ((1 << (k - 1)) - 1)
    x_int = x_trunc >> f
    x_float = [[float(int(e)) for e in row] for row in x_int]

    # TODO: consider better ways of doing this
    x_frac = [[0.0 for _ in range(cols)] for _ in range(rows)]
    for bi in range(f):
        x_frac = [[(x_frac[i][j] + 1 if (x_trunc[i][j] & (1 << bi)) != 0 else x_frac[i][j]) for j in range(cols)] for i in range(rows)]
        x_frac /= 2

    return (x_float + x_frac) * sn


def __fp_to_double_vec[TP](a: list[TP], modulus: TP, k: int, f: int) -> list[float]:
    return __fp_to_double_mat([a], modulus, k, f, TP=TP)[0]


def __fp_to_double_elem[TP](a: TP, modulus: TP, k: int, f: int) -> float:
    return __fp_to_double_mat([[a]], modulus, k, f, TP=TP)[0][0]


def int_to_fp[TP](a: int, modulus: TP, k: int = NBIT_K, f: int = NBIT_F) -> TP:
    sn = 1 if a >= 0 else -1

    az_shift = TP(a << f)
    az_trunc = az_shift & ((1 << (k - 1)) - 1)

    return az_trunc.mul_mod(sn, modulus)


def double_to_fp[TP](x, modulus: TP, k: int = NBIT_K, f: int = NBIT_F):
    if isinstance(x, list[list[float]]):
        return [[__double_to_fp(e, modulus, k, f) for e in row] for row in x]
    elif isinstance(x, list[float]):
        return [__double_to_fp(e, modulus, k, f) for e in x]
    elif isinstance(x, float):
        return __double_to_fp(x, modulus, k, f)
    else:
        raise TypeError(f"Invalid type of {x}.\n It should be either, float, list[float] or list[list[float]]")


def fp_to_double(a, modulus, k = NBIT_K, f = NBIT_F):
    if isinstance(a, list[list[int_t]]):
        return __fp_to_double_mat(a, modulus, k, f)
    if isinstance(a, list[int_t]):
        return __fp_to_double_vec(a, modulus, k, f)
    if isinstance(a, int_t):
        return __fp_to_double_elem(a, modulus, k, f)
    
    raise TypeError(f"Invalid type of {a}.\n It should be either, UInt[N], list[UInt[N]] or list[list[UInt[N]]]")


def num_to_bits[TP](a: list[TP], bitlen: int, little_end: bool = False) -> list[list[int]]:
    b = list[list[type(SECOND_FIELD_SIZE)]](len(a))

    for i in range(len(a)):
        row = list[type(SECOND_FIELD_SIZE)](bitlen)
        order_generator = range(bitlen - 1, -1, -1) if little_end else range(bitlen)
        for j in order_generator:
            row.append(type(SECOND_FIELD_SIZE)((a[i] & (TP(1) << (bitlen - 1 - j))) != 0))
        b.append(row)
    
    return b
