""" Module containing all params """
from ..settings import *

# Debug toggle. Set to True to run Sequre in debug mode.
DEBUG = False
# Optimizations toggles
BEAVER_CACHING = True
MATRIX_OPT = True
MODULUS_OPT = True
PATTERN_MATHCING_OPT = True

# Sequre intrinsic types
int_t = UInt[128]
MODULUS_BITS: int = 127
FIELD_SIZE = (int_t(1) << MODULUS_BITS) - 1  # Make sure it is a Mersenne prime for better performance
SECOND_FIELD_SIZE = 23
THIRD_FIELD_SIZE = 11
NBIT_K: int = 40
NBIT_F: int = 20
NBIT_V: int = 60

RING_SIZE = int_t(1) << MODULUS_BITS
SECOND_RING_SIZE = 16
RING_MASK = RING_SIZE - 1

IS_MERSENNE_FIELD = ((FIELD_SIZE + 1).popcnt() == 1) or ((FIELD_SIZE + 1) == 0)
MOD_CONST = int_t.get_mod_const(FIELD_SIZE)
SECOND_MOD_CONST = int.get_mod_const(SECOND_FIELD_SIZE)
THIRD_MOD_CONST = int.get_mod_const(THIRD_FIELD_SIZE)
assert RING_SIZE.popcnt() == 1, "Ring size not a power of 2."
assert FIELD_SIZE < RING_SIZE, f"Ring size should be larger than field size. Your ring size: {RING_SIZE}, and field size: {FIELD_SIZE}."
assert SECOND_FIELD_SIZE < 128, f"Second field size must be less than 128"
assert THIRD_FIELD_SIZE < 128, f"Third field size must be less than 128"
print(f'Field size: {FIELD_SIZE}\nRing size: {RING_SIZE}\n')

# IP params
IP_ADDRESS = [TRUSTED_DEALER, *COMPUTING_PARTIES]
# Ports
# The party with smaller port listens on the port
# and the other connects to it. Make sure the firewall
# setting of the listener allows these ports.
DATA_SHARING_PORT = 9090
PORT_P0_P1 = 9001
PORT_P0_P2 = PORT_P0_P1 + 1
PORT_P1_P2 = PORT_P0_P2 + 1
DATA_SHARING_PORTS = [DATA_SHARING_PORT, DATA_SHARING_PORT + 1, DATA_SHARING_PORT + 2]  # In case the run is on a localhost
# Socket params
ALL_PORTS: list[int] = [PORT_P0_P1, PORT_P0_P2, PORT_P1_P2]
AF_UNIX: int = 1
AF_INET: int = 2
SOCK_STREAM: int = 1
SHUT_RDWR: int = 2
# UNIX socket params
AF_PREFIX: str = "sock."
P0_P1_SOCKET_PATH: str = f'{AF_PREFIX}{PORT_P0_P1}'
P0_P2_SOCKET_PATH: str = f'{AF_PREFIX}{PORT_P0_P2}'
P1_P2_SOCKET_PATH: str = f'{AF_PREFIX}{PORT_P1_P2}'

# Stdlib
DIV_MAX_N: int = 100000
MATMUL_LEAF_SIZE: int = 64
SIGMOID_APPROX_PATH: str = 'data/sigmoid_approx.txt'
EIGEN_DECOMP_ITER_PER_EVAL: int = 5
