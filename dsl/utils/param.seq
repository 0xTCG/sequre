"""
Sequre configuration module
"""

from ..settings import *

# Optimizations toggles
BEAVER_CACHING = True
MATRIX_OPT = True
MODULUS_OPT = True
PATTERN_MATHCING_OPT = True

# Parameters are set explicitly until migrating to new version of Codon for better performance
MODULUS_BITS: int = 174 if isinstance(int_t, UInt[192]) else 127
NUM_BYTES: int = 22 if isinstance(int_t, UInt[192]) else 16
MERSENNE_OFFSET = 3 if isinstance(int_t, UInt[192]) else 1
NBIT_K: int = 64 if isinstance(int_t, UInt[192]) else 40
NBIT_F: int = 32 if isinstance(int_t, UInt[192]) else 20
NBIT_V: int = 64 if isinstance(int_t, UInt[192]) else 60
FIELD_SIZE = (int_t(1) << MODULUS_BITS) - MERSENNE_OFFSET
SECOND_FIELD_SIZE = 37 if isinstance(int_t, UInt[192]) else 23
THIRD_FIELD_SIZE = 17 if isinstance(int_t, UInt[192]) else 13
RING_SIZE = int_t(1) << MODULUS_BITS
SECOND_RING_SIZE = 16
RING_MASK = RING_SIZE - 1

MOD_CONST = int_t.get_mod_const(FIELD_SIZE)
SECOND_MOD_CONST = int.get_mod_const(SECOND_FIELD_SIZE)
THIRD_MOD_CONST = int.get_mod_const(THIRD_FIELD_SIZE)

assert isinstance(int_t, UInt[192]) or isinstance(int_t, UInt[128]), "This version of Sequre supports only u128 or u192 long integers."
assert RING_SIZE.popcnt() == 1, "Ring size not a power of 2."
assert FIELD_SIZE < RING_SIZE, f"Ring size should be larger than field size. Your ring size: {RING_SIZE}, and field size: {FIELD_SIZE}."
assert SECOND_FIELD_SIZE < 128, f"Second field size must be less than 128"
assert THIRD_FIELD_SIZE < 128, f"Third field size must be less than 128"
assert NBIT_K + NBIT_F + NBIT_V < MODULUS_BITS, "FP config overflows the size of modulus."

print(f'Field size: {FIELD_SIZE}\nRing size: {RING_SIZE}\n')

# IP/port params
IP_ADDRESS = [TRUSTED_DEALER, *COMPUTING_PARTIES]
DATA_SHARING_PORTS = [DATA_SHARING_PORT, DATA_SHARING_PORT + 1, DATA_SHARING_PORT + 2]  # In case the run is on a localhost
# Socket params
ALL_PORTS: list[int] = [PORT_P0_P1, PORT_P0_P2, PORT_P1_P2]
AF_UNIX: int = 1
AF_INET: int = 2
SOCK_STREAM: int = 1
SHUT_RDWR: int = 2
# UNIX socket params
AF_PREFIX: str = "sock."
P0_P1_SOCKET_PATH: str = f'{AF_PREFIX}{PORT_P0_P1}'
P0_P2_SOCKET_PATH: str = f'{AF_PREFIX}{PORT_P0_P2}'
P1_P2_SOCKET_PATH: str = f'{AF_PREFIX}{PORT_P1_P2}'

# Stdlib
DIV_MAX_N: int = 100000
MATMUL_LEAF_SIZE: int = 64
SIGMOID_APPROX_PATH: str = 'data/sigmoid_approx.txt'
EIGEN_DECOMP_ITER_PER_EVAL: int = 5
