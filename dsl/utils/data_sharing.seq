import os

from ..network.common import send_to_socket
from ..network.connect import connect
from ..network.socket import CSocket

from ..mpc.env import MPCEnv
from ..types.shared_tensor import SharedTensor as Stensor

from utils import zeros
from param import DATA_SHARING_PORTS, IP_ADDRESS, int_t, FIELD_SIZE


MODULUS = FIELD_SIZE  # TODO: Read from config


def broadcast(sockets, val):
    for socket in sockets: send_to_socket(socket, val)


def share(sockets, val):
    r = val.rand(MODULUS)

    send_to_socket(sockets[1], r)
    send_to_socket(sockets[2], val.sub_mod(r, MODULUS))


def secret_share(*args):
    sockets = []
    
    for i in range(3):  # Number of CPs
        if os.getenv('LOCAL', ''): raise NotImplementedError("Local secret sharing should be done through mpc.comms.share before issue #160 if done")
        else: sockets.append(CSocket(str(DATA_SHARING_PORTS[i]), IP_ADDRESS[i]))
    
        if (not connect(sockets[i])):
            raise ValueError(f"Failed to connect with CP{i}")
    
    number_of_args = len(args).to_int_t()
    broadcast(sockets, number_of_args)

    for arg in args:
        m, n = arg.shape()
        broadcast(sockets, m.to_int_t())
        broadcast(sockets, n.to_int_t())
        share(sockets, arg.to_fp(MODULUS))
    
    print('Secret sharing done!')


def pool_shares():
    pid = int(os.getenv('PID', '-1'))
    if pid < 0: raise ValueError("Computing party ID is not provided.")
    
    mpc = MPCEnv[int_t](pid, local=False)  # TODO: #160 Implement local network setup for pooling shares
    print(f"Initialized MPC at CP{pid}")
    
    number_of_args = int(mpc.comms.receive[int_t](mpc.pid))

    args = []

    for _ in range(number_of_args):
        m = int(mpc.comms.receive[int_t](mpc.pid))
        n = int(mpc.comms.receive[int_t](mpc.pid))
        arg = mpc.comms.receive[int_t](mpc.pid, [m, n]) if mpc.pid != 0 else zeros(m, n)
        sv = Stensor[typeof(arg)](arg, MODULUS)
        sv.fp = True
        args.append(sv)
    
    return mpc, args
