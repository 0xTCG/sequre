from ..attributes import sequre_beaver
from ..utils.utils import ones, ones_vec
from internal import Internal as sq
import time


@sequre_beaver
def _forward_pass(mpc, x, w, relu_alpha, relu_beta):
    z_2 = sq.dot(mpc, x, w)
    c_0 = z_2 > 0
    c_1 = c_0 * relu_alpha  # (c_0 * relu_alpha - (c_0 - 1) * relu_beta)

    c_1.get_partitions(mpc)

    return z_2 * c_1, c_1


@sequre_beaver
def logireg(mpc, X, y, eta, epochs, relu_alpha, relu_beta):
    w = X[0].ones()

    # SGD
    for i in range(epochs):
        if mpc.pid == 2: print(f'Epoch: {i + 1}/{epochs}')
        for feature_vector, label in zip(X, y):
            # Forward pass
            z, c_1 = _forward_pass(mpc, feature_vector, w, relu_alpha, relu_beta)
            # Backward pass
            w = w + feature_vector * eta * label * c_1 * (1 - z * label > 0)

    return w


@sequre_beaver
def predict(mpc, X, w, relu_alpha, relu_beta):
    return _forward_pass(mpc, X, w, relu_alpha, relu_beta)[0]
