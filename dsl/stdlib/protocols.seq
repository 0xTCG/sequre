from sequre.attributes import sequre_beaver
from sequre.types.shared_tensor import SharedTensor as Stensor


@sequre_beaver
def prefix_carry(mpc, s, p, k):
    """
    TODO: #143 Solution bellow is can be improved.
    See chapters 6.1 and 6.4 in
        Unconditionally Secure Constant-Rounds MPC for Equality, Comparison, Bits and Exponentiation
        by Damgard et al.
    """
    modulus = s.modulus
    s_t = s.T
    p_t = p.T
    k_t = k.T

    convolution = [s_t.share[0], p_t.share[0], k_t.share[0]]
    prefix_convolutions = [Stensor[typeof(convolution)](convolution, modulus)]
    
    for i in range(len(s_t) - 1):
        propagate = prefix_convolutions[-1] * p_t[i + 1]
        
        propagate[0] += s_t[i + 1]
        propagate[2] += k_t[i + 1]

        prefix_convolutions.append(propagate)

    prefix_carries = [e.share[0] for e in prefix_convolutions]

    return Stensor[typeof(prefix_carries)](prefix_carries, modulus).T


@sequre_beaver
def carries(mpc, a_bits, b_bits):
    """
    Computes the carry-overs when adding the two provided secret-shared bit representations.
    See chapter 6.3 in
        Unconditionally Secure Constant-Rounds MPC for Equality, Comparison, Bits and Exponentiation
        by Damgard et al.
    """
    s = a_bits * b_bits
    p = a_bits + b_bits - s * 2
    k = 1 - s - p
    return prefix_carry(mpc, s, p, k)


@sequre_beaver
def bit_add(mpc, a_bits, b_bits):
    """
    Performs the bitwise addition of the inputs -- the secret-shared bit-decompositions.
    See chapter 6.2 in
        Unconditionally Secure Constant-Rounds MPC for Equality, Comparison, Bits and Exponentiation
        by Damgard et al.
    """
    c = carries(mpc, a_bits, b_bits)
    c_t = c.T
    d_t = (a_bits + b_bits - c * 2).T
    d_t[1:] = d_t[1:] + c_t[:-1]
    d_t[0] = a_bits.T[0] + b_bits.T[0] - c_t[0] * 2
    d_t.share.append(c_t.share[-1])  # TODO: #144 Implement append/pop in SharedTensor

    return d_t.T


from ..utils.param import MODULUS_BITS, SECOND_FIELD_SIZE, FIELD_SIZE, int_t
from ..types.utils import num_to_bits


# @sequre_beaver
def bit_decomposition(mpc, a, bitlen = MODULUS_BITS, small_modulus = SECOND_FIELD_SIZE, modulus = FIELD_SIZE):
    raise NotImplementedError()
