"""
Ported from https://github.com/tuneinsight/lattigo/tree/master/ring
"""

import random

import utils

from common import big_uint, BIG_INT_LEN

from ..utils.utils import zeros_vec, zeros


SMALL_PRIMES = [
	2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
	73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173,
	179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,
	283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409,
	419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541,
	547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659,
	661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809,
	811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941,
	947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069,
	1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223,
	1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373,
	1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511,
	1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657,
	1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811,
	1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987,
	1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129,
	2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287,
	2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423,
	2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617,
	2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741,
	2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903,
	2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079,
	3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257,
	3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413,
	3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571,
	3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727,
	3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907,
	3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057,
	4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231,
	4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409,
	4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583,
	4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751,
	4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937,
	4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087,
	5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279,
	5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443,
	5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639,
	5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791,
	5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939,
	5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133,
	6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301,
	6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473,
	6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673,
	6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833,
	6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997,
	7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207,
	7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411,
	7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561,
	7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723,
	7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919,
	7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111,
	8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291,
	8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501,
	8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677,
	8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831,
	8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011,
	9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199,
	9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377,
	9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533,
	9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733,
	9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887,
	9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099,
	10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271,
	10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459,
	10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657,
	10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859,
	10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059,
	11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251,
	11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443,
	11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657,
	11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833,
	11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011,
	12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211,
	12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401,
	12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553,
	12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739,
	12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923,
	12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109,
	13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309,
	13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499,
	13513, 13523, 13537, 13553, 13567, 13577, 13591, 13597, 13613, 13619, 13627, 13633, 13649, 13669, 13679, 13681, 13687, 13691, 13693, 13697,
	13709, 13711, 13721, 13723, 13729, 13751, 13757, 13759, 13763, 13781, 13789, 13799, 13807, 13829, 13831, 13841, 13859, 13873, 13877, 13879,
	13883, 13901, 13903, 13907, 13913, 13921, 13931, 13933, 13963, 13967, 13997, 13999, 14009, 14011, 14029, 14033, 14051, 14057, 14071, 14081,
	14083, 14087, 14107, 14143, 14149, 14153, 14159, 14173, 14177, 14197, 14207, 14221, 14243, 14249, 14251, 14281, 14293, 14303, 14321, 14323,
	14327, 14341, 14347, 14369, 14387, 14389, 14401, 14407, 14411, 14419, 14423, 14431, 14437, 14447, 14449, 14461, 14479, 14489, 14503, 14519,
	14533, 14537, 14543, 14549, 14551, 14557, 14561, 14563, 14591, 14593, 14621, 14627, 14629, 14633, 14639, 14653, 14657, 14669, 14683, 14699,
	14713, 14717, 14723, 14731, 14737, 14741, 14747, 14753, 14759, 14767, 14771, 14779, 14783, 14797, 14813, 14821, 14827, 14831, 14843, 14851,
	14867, 14869, 14879, 14887, 14891, 14897, 14923, 14929, 14939, 14947, 14951, 14957, 14969, 14983, 15013, 15017, 15031, 15053, 15061, 15073,
	15077, 15083, 15091, 15101, 15107, 15121, 15131, 15137, 15139, 15149, 15161, 15173, 15187, 15193, 15199, 15217, 15227, 15233, 15241, 15259,
	15263, 15269, 15271, 15277, 15287, 15289, 15299, 15307, 15313, 15319, 15329, 15331, 15349, 15359, 15361, 15373, 15377, 15383, 15391, 15401,
	15413, 15427, 15439, 15443, 15451, 15461, 15467, 15473, 15493, 15497, 15511, 15527, 15541, 15551, 15559, 15569, 15581, 15583, 15601, 15607,
	15619, 15629, 15641, 15643, 15647, 15649, 15661, 15667, 15671, 15679, 15683, 15727, 15731, 15733, 15737, 15739, 15749, 15761, 15767, 15773,
	15787, 15791, 15797, 15803, 15809, 15817, 15823, 15859, 15877, 15881, 15887, 15889, 15901, 15907, 15913, 15919, 15923, 15937, 15959, 15971,
	15973, 15991, 16001, 16007, 16033, 16057, 16061, 16063, 16067, 16069, 16073, 16087, 16091, 16097, 16103, 16111, 16127, 16139, 16141, 16183,
	16187, 16189, 16193, 16217, 16223, 16229, 16231, 16249, 16253, 16267, 16273, 16301, 16319, 16333, 16339, 16349, 16361, 16363, 16369, 16381,
	16411, 16417, 16421, 16427, 16433, 16447, 16451, 16453, 16477, 16481, 16487, 16493, 16519, 16529, 16547, 16553, 16561, 16567, 16573, 16603,
	16607, 16619, 16631, 16633, 16649, 16651, 16657, 16661, 16673, 16691, 16693, 16699, 16703, 16729, 16741, 16747, 16759, 16763, 16787, 16811,
	16823, 16829, 16831, 16843, 16871, 16879, 16883, 16889, 16901, 16903, 16921, 16927, 16931, 16937, 16943, 16963, 16979, 16981, 16987, 16993,
	17011, 17021, 17027, 17029, 17033, 17041, 17047, 17053, 17077, 17093, 17099, 17107, 17117, 17123, 17137, 17159, 17167, 17183, 17189, 17191,
	17203, 17207, 17209, 17231, 17239, 17257, 17291, 17293, 17299, 17317, 17321, 17327, 17333, 17341, 17351, 17359, 17377, 17383, 17387, 17389]
StandardRing = 0
ConjugateInvariantRing = 1

# BRedParams computes the parameters for the BRed algorithm.
# Returns ((2^128)/q)/(2^64) and (2^128)/q mod 2^64.
# Relies on fact that 2^128 = d * q + r, where d = (2^128 - 1) / q and r = ((2^128 - 1) % q) + 1
def bred_params(q: u64):
    # q_big = q.ext_double()
    # d = u128(-1) // q_big
    # r = u128(-1) - d * q_big + u128(1)

    # if r == q_big: d += u128(1)

    # mhi = (d >> u128(64)).trunc_half()
    # mlo = d.trunc_half()

    # return [mhi, mlo]
    big_r = big_uint(1) << big_uint(128)
    big_r = big_r.bigint_floordiv(q.ext_to_bigint())

    mhi = (big_r >> big_uint(64)).trunc_to_u64()
    mlo = big_r.trunc_to_u64()

    return [mhi, mlo]


# BRed computes x*y mod q.
def bred(x, y, q, u):
    mhi, mlo = u64(x).mul_overflow(u64(y))
    r = mhi * u[0]
    hhi, hlo = mlo.mul_overflow(u[0])
    r += hhi
    lhi, _ = mlo.mul_overflow(u[1])
    s0, carry = hlo.add_overflow(lhi)
    r += carry
    hhi, hlo = mhi.mul_overflow(u[1])
    r += hhi
    _, carry = hlo.add_overflow(s0)
    r += carry
    r = mlo - r * q
    if r >= q: r -= q
    return r


# ModExp performs the modular exponentiation x^e mod p,
# x and p are required to be at most 64 bits to avoid an overflow.
def mod_exp_u64(x, e, p):
    params = bred_params(p)
    result = u64(1)

    while e:
        if e & type(e)(1) == type(e)(1): result = bred(result, x, p, params)
        x = type(x)(bred(x, x, p, params))
        e >>= type(e)(1)

    return result


# MForm switches a to the Montgomery domain by computing
# a*2^64 mod q.
def mform(a, q, u):
    mhi, _ = a.mul_overflow(u[1])
    r = -(a * u[0] + mhi) * q
    if r >= q: r -= q
    return r


# MRed computes x * y * (1/2^64) mod q.
def mred(x, y, q, q_inv):
    mhi, mlo = x.mul_overflow(y)
    hhi, _ = (mlo * q_inv).mul_overflow(q)
    r = mhi - hhi + q
    if r >= q: r -= q
    return r


# ModexpMontgomery performs the modular exponentiation x^e mod p,
# where x is in Montgomery form, and returns x^e in Montgomery form.
def mod_exp_montgomery(x, e, q, q_inv, bred_params):
    result = mform(u64(1), q, bred_params)

    while e:
        if e & 1 == 1: result = mred(result, x, q, q_inv)
        x = mred(x, x, q, q_inv)
        e >>= 1
    
    return result


# gcd computes the greatest common divisor gcd(a,b) for a,b uint64 variables
def gcd(a, b):
    if a == u64(0) or b == u64(0): return u64(0)
    while b != u64(0): a, b = b, a.__naive_mod(b)

    return a


# polynomialPollardsRho calculates x1^2 + c mod x2, and is used in factorizationPollardsRho
def polynomial_pollards_rho(x1, x2, c):
    z = mod_exp_u64(x1, 2, x2)  # x1^2 mod x2
    z += u64(c)  # (x1^2 mod x2) + 1
    z = z.__naive_mod(x2)  # (x1^2 + 1) mod x2
    return z


# factorizationPollardsRho realizes Pollard's Rho algorithm for fast prime factorization,
# but this function only returns one factor per call
def factorization_pollards_rho(m):
    # c is used to change the ring in Pollard's Rho algorithm,
    # Every time the algorithm fails to get a factor, c is increased and a retry starts,
    # because Pollard's Rho algorithm sometimes will miss some small prime factors.
    for c in range(1, 10):
        x, y, d = u64(2), u64(2), u64(1)

        while d != u64(0):
            # Walk, walk and eventually meet \o/
            x = polynomial_pollards_rho(x, m, c)
            y = polynomial_pollards_rho(polynomial_pollards_rho(y, m, c), m, c)

            if y > x:  # swap to avoid overflow
                x, y = y, x

            d = gcd(x - y, m)

            if d > u64(1): return d

    return u64(0)


# getFactors returns all the prime factors of m.
def get_factors(n):
    m = n
    factors = []

    # first, append small prime factors
    for i in range(len(SMALL_PRIMES)):
        small_prime = u64(SMALL_PRIMES[i])
        add_factor = False
        while m.__naive_mod(small_prime) == u64(0):
            m //= small_prime
            add_factor = True

        if add_factor: factors.append(small_prime)

    if m == u64(1): return factors

	# second, find other prime factors
    while True:
        factor = factorization_pollards_rho(m)
        if factor == u64(0):
            factors.append(m)
            break

        m //= factor
        if len(factors) > 0 and factor == factors[len(factors) - 1]: continue
        factors.append(factor)

    return factors


# primitiveRoot computes one primitive root (the smallest) of for the given prime q
def primitive_root(q):
    not_found_primitive_root = True

    factors = get_factors(q - u64(1)) # Factor q-1, might be slow

    g = 2

    while not_found_primitive_root:
        g += 1
        for factor in factors:
            # if for any factor of q-1, g^(q-1)/factor = 1 mod q, g is not a primitive root
            if mod_exp_u64(g, (q - u64(1)) // factor, q) == u64(1):
                not_found_primitive_root = True
                break
            not_found_primitive_root = False
    
    return g


# CRed reduce returns a mod q where a is between 0 and 2*q-1.
def cred(a, q):
    if a >= q: return a - q
    return a


# MRedConstant computes x * y * (1/2^64) mod q in constant time.
# The result is between 0 and 2*q-1.
def mred_constant(x, y, q, q_inv):
	ahi, alo = x.mul_overflow(y)
	h, _ = (alo * q_inv).mul_overflow(q)
	return ahi - h + q


# butterfly computes X, Y = U + V * Psi, U - V * Psi mod q.
def butterfly(u, v, psi, two_q, four_q, q, q_inv):
	if u >= four_q: u -= four_q
	v = mred_constant(v, psi, q, q_inv)
	return u + v, u + two_q - v


# BRedAdd computes a mod q.
def bred_add(a: u64, q: u64, u: list[u64]):
	mhi, _ = a.mul_overflow(u[0])
	r = a - mhi * q
	if r >= q: r -= q
	return r


# ReduceVec returns p2 = p1 mod qi.
def reduce_vec(p1, p2, qi, bred_params):
    for j in range(len(p1)):
        p2[j] = bred_add(p1[j], qi, bred_params)


# invbutterfly computes X, Y = U + V, (U - V) * Psi mod q.
def invbutterfly(u, v, psi, two_q, four_q, q, q_inv):
    x = u + v
    if x >= two_q: x -= two_q
    # At the moment it is not possible to use MRedConstant if q > 61 bits
    y = mred_constant(u + four_q - v, psi, q, q_inv)
    return x, y


# MFormVec returns p2 = p1 * 2^64 mod qi.
def mform_vec(p1, p2, qi, bred_params):
	for j in range(len(p1)):
		p2[j] = mform(p1[j], qi, bred_params)


# MulScalarMontgomeryVec returns p2 = p1*scalarMont mod qi.
def mul_scalar_montgomery_vec(p1, p2, scalar_mont, qi, mred_params):
	for j in range(len(p1)):
		p2[j] = mred(p1[j], scalar_mont, qi, mred_params)


# MulCoeffsMontgomeryVec returns p3 = p1*p2 mod qi.
def mul_coeffs_montgomery_vec(p1, p2, p3, qi, mred_params):
	for j in range(len(p1)):
		p3[j] = mred(p1[j], p2[j], qi, mred_params)


# MulCoeffsMontgomeryAndSubVec returns p3 = p3 - p1*p2 mod qi.
def mul_coeffs_montgomery_and_sub_vec(p1, p2, p3, qi, mred_params):
	for j in range(len(p1)):
		p3[j] = cred(p3[j] + (qi - mred(p1[j], p2[j], qi, mred_params)), qi)


# NegVec returns p2 = -p1 mod qi.
def neg_vec(p1: list[u64], p2: list[u64], qi: u64):
	for j in range(len(p1)): p2[j] = qi - p1[j]


# AddVec returns p3 = p1 + p2 mod qi.
def add_vec(p1: list[u64], p2: list[u64], p3: list[u64], qi: u64):
	for j in range(len(p1)): p3[j] = cred(p1[j] + p2[j], qi)


# NTTLazy computes the NTT on the input coefficients using the input parameters with output values in the range [0, 2q-1].
def ntt_lazy(coeffs_in: list[u64], coeffs_out: list[u64], n, ntt_psi, q, q_inv, bred_params):
    four_q = q * u64(4)
    two_q = q * u64(2)

    # Copy the result of the first round of butterflies on p2 with approximate reduction
    t = n >> 1
    f = ntt_psi[1]

    for jx in range(t):
        jy = jx + t
        V = mred_constant(coeffs_in[jy], f, q, q_inv)
        coeffs_out[jx], coeffs_out[jy] = coeffs_in[jx] + V, coeffs_in[jx] + two_q - V

	# Continue the rest of the second to the n-1 butterflies on p2 with approximate reduction

    m = 2

    while m < n:
        reduce = int(m.bitlen()) & 1 == 1
        t >>= 1

        if t >= 8:
            for i in range(m):
                j1 = (i * t) << 1
                j2 = j1 + t
                f = ntt_psi[m + i]

                if reduce:
                    for jx in range(j1, j2):
                        jy = jx + t
                        coeffs_out[jx], coeffs_out[jy] = butterfly(coeffs_out[jx], coeffs_out[jy], f, two_q, four_q, q, q_inv)
                else:
                    for jx in range(j1, j2):
                        jy = jx + t
                        V = mred_constant(coeffs_out[jy], f, q, q_inv)
                        coeffs_out[jx], coeffs_out[jy] = coeffs_out[jx] + V, coeffs_out[jx] + two_q - V
        elif t == 4:
            if reduce:
                i = m
                j1 = 0

                while i < m * 2:
                    for j in range(4):
                        coeffs_out[j1 + j], coeffs_out[j1 + j + 4] = butterfly(
                            coeffs_out[j1 + j], coeffs_out[j1 + j + 4], ntt_psi[i], two_q, four_q, q, q_inv)
                        coeffs_out[j1 + j + 8], coeffs_out[j1 + j + 12] = butterfly(
                            coeffs_out[j1 + j + 8], coeffs_out[j1 + j + 12], ntt_psi[i + 1], two_q, four_q, q, q_inv)
                    
                    i += 2
                    j1 += 16
            else:
                i = m
                j1 = 0

                while i < 2 * m:
                    for j in range(4):
                        V = mred_constant(coeffs_out[j1 + j + 4], ntt_psi[i], q, q_inv)
                        coeffs_out[j1 + j], coeffs_out[j1 + j + 4] = coeffs_out[j1 + j] + V, coeffs_out[j1 + j] + two_q - V
                        V = mred_constant(coeffs_out[j1 + j + 12], ntt_psi[i + 1], q, q_inv)
                        coeffs_out[j1 + j + 8], coeffs_out[j1 + j + 12] = coeffs_out[j1 + j + 8] + V, coeffs_out[j1 + j + 8] + two_q - V
                    
                    i += 2
                    j1 += 16

        elif t == 2:
            if reduce:
                i = m
                j1 = 0

                while i < 2 * m:
                    coeffs_out[j1], coeffs_out[j1 + 2] = butterfly(
                        coeffs_out[j1], coeffs_out[j1 + 2], ntt_psi[i], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 1], coeffs_out[j1 + 3] = butterfly(
                        coeffs_out[j1 + 1], coeffs_out[j1 + 3], ntt_psi[i], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 4], coeffs_out[j1 + 6] = butterfly(
                        coeffs_out[j1 + 4], coeffs_out[j1 + 6], ntt_psi[i + 1], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 5], coeffs_out[j1 + 7] = butterfly(
                        coeffs_out[j1 + 5], coeffs_out[j1 + 7], ntt_psi[i + 1], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 8], coeffs_out[j1 + 10] = butterfly(
                        coeffs_out[j1 + 8], coeffs_out[j1 + 10], ntt_psi[i + 2], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 9], coeffs_out[j1 + 11] = butterfly(
                        coeffs_out[j1 + 9], coeffs_out[j1 + 11], ntt_psi[i + 2], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 12], coeffs_out[j1 + 14] = butterfly(
                        coeffs_out[j1 + 12], coeffs_out[j1 + 14], ntt_psi[i + 3], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 13], coeffs_out[j1 + 15] = butterfly(
                        coeffs_out[j1 + 13], coeffs_out[j1 + 15], ntt_psi[i + 3], two_q, four_q, q, q_inv)

                    i += 4
                    j1 += 16
            else:
                i = m
                j1 = 0

                while i < 2 * m:
                    V = mred_constant(coeffs_out[j1 + 2], ntt_psi[i], q, q_inv)
                    coeffs_out[j1], coeffs_out[j1 + 2] = coeffs_out[j1] + V, coeffs_out[j1] + two_q - V

                    V = mred_constant(coeffs_out[j1 + 3], ntt_psi[i], q, q_inv)
                    coeffs_out[j1 + 1], coeffs_out[j1 + 3] = coeffs_out[j1 + 1] + V, coeffs_out[j1 + 1] + two_q - V

                    V = mred_constant(coeffs_out[j1 + 6], ntt_psi[i + 1], q, q_inv)
                    coeffs_out[j1 + 4], coeffs_out[j1 + 6] = coeffs_out[j1 + 4] + V, coeffs_out[j1 + 4] + two_q - V

                    V = mred_constant(coeffs_out[j1 + 7], ntt_psi[i + 1], q, q_inv)
                    coeffs_out[j1 + 5], coeffs_out[j1 + 7] = coeffs_out[j1 + 5] + V, coeffs_out[j1 + 5] + two_q - V

                    V = mred_constant(coeffs_out[j1 + 10], ntt_psi[i + 2], q, q_inv)
                    coeffs_out[j1 + 8], coeffs_out[j1 + 10] = coeffs_out[j1 + 8] + V, coeffs_out[j1 + 8] + two_q - V

                    V = mred_constant(coeffs_out[j1 + 11], ntt_psi[i + 2], q, q_inv)
                    coeffs_out[j1 + 9], coeffs_out[j1 + 11] = coeffs_out[j1 + 9] + V, coeffs_out[j1 + 9] + two_q - V

                    V = mred_constant(coeffs_out[j1 + 14], ntt_psi[i + 3], q, q_inv)
                    coeffs_out[j1 + 12], coeffs_out[j1 + 14] = coeffs_out[j1 + 12] + V, coeffs_out[j1 + 12] + two_q - V

                    V = mred_constant(coeffs_out[j1 + 15], ntt_psi[i + 3], q, q_inv)
                    coeffs_out[j1 + 13], coeffs_out[j1 + 15] = coeffs_out[j1 + 13] + V, coeffs_out[j1 + 13] + two_q - V

                    i += 4
                    j1 += 16

        else:
            i = m
            j1 = 0
			
            while i < 2 * m:
                for j in range(8):
                    coeffs_out[j1 + j * 2], coeffs_out[j1 + j * 2 + 1] = butterfly(
                        coeffs_out[j1 + j * 2], coeffs_out[j1 + j * 2 + 1], ntt_psi[i + j], two_q, four_q, q, q_inv)

                i += 8
                j1 += 16

        m <<= 1


def inv_ntt_core(coeffs_in, coeffs_out, n, ntt_psi_inv, q, q_inv):
    f = u64(0)

    # Copy the result of the first round of butterflies on p2 with approximate reduction
    t = 1
    h = n >> 1
    two_q = q << u64(1)
    four_q = q << u64(2)

    i, j = h, 0

    while i < 2 * h:
        for j1 in range(8):
            j2 = j + j1 * 2 
            coeffs_out[j2], coeffs_out[j2 + 1] = invbutterfly(
                coeffs_in[j2], coeffs_in[j2 + 1], ntt_psi_inv[i + j1], two_q, four_q, q, q_inv)
        i, j = i+8, j+16

    # Continue the rest of the second to the n-1 butterflies on p2 with approximate reduction
    t <<= 1
    m = n >> 1
    
    while m > 1:
        
        h = m >> 1

        if t >= 8:
            i, j1, j2 = 0, 0, t - 1
            
            while i < h:
                f = ntt_psi_inv[h + i]
                jx, jy = j1, j1 + t

                while jx <= j2:
                    for j in range(8):
                        coeffs_out[jx + j], coeffs_out[jy + j] = invbutterfly(
                            coeffs_out[jx + j], coeffs_out[jy + j], f, two_q, four_q, q, q_inv)
                    jx, jy = jx+8, jy+8
                
                i, j1, j2 = i + 1, j1 + 2 * t, j2 + 2 * t

        elif t == 4:
            i, j1 = h, 0
            while i < 2 * h:
                coeffs_out[j1], coeffs_out[j1 + 4] = invbutterfly(
                    coeffs_out[j1], coeffs_out[j1 + 4], ntt_psi_inv[i], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 1], coeffs_out[j1 + 5] = invbutterfly(
                    coeffs_out[j1 + 1], coeffs_out[j1 + 5], ntt_psi_inv[i], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 2], coeffs_out[j1 + 6] = invbutterfly(
                    coeffs_out[j1 + 2], coeffs_out[j1 + 6], ntt_psi_inv[i], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 3], coeffs_out[j1 + 7] = invbutterfly(
                    coeffs_out[j1 + 3], coeffs_out[j1 + 7], ntt_psi_inv[i], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 8], coeffs_out[j1 + 12] = invbutterfly(
                    coeffs_out[j1 + 8], coeffs_out[j1 + 12], ntt_psi_inv[i + 1], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 9], coeffs_out[j1 + 13] = invbutterfly(
                    coeffs_out[j1 + 9], coeffs_out[j1 + 13], ntt_psi_inv[i + 1], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 10], coeffs_out[j1 + 14] = invbutterfly(
                    coeffs_out[j1 + 10], coeffs_out[j1 + 14], ntt_psi_inv[i + 1], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 11], coeffs_out[j1 + 15] = invbutterfly(
                    coeffs_out[j1 + 11], coeffs_out[j1 + 15], ntt_psi_inv[i + 1], two_q, four_q, q, q_inv)

                i, j1 = i + 2, j1 + 4 * t
        else:
            i, j1 = h, 0
            while i < 2 * h:
                coeffs_out[j1], coeffs_out[j1 + 2] = invbutterfly(
                    coeffs_out[j1], coeffs_out[j1 + 2], ntt_psi_inv[i], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 1], coeffs_out[j1 + 3] = invbutterfly(
                    coeffs_out[j1 + 1], coeffs_out[j1 + 3], ntt_psi_inv[i], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 4], coeffs_out[j1 + 6] = invbutterfly(
                    coeffs_out[j1 + 4], coeffs_out[j1 + 6], ntt_psi_inv[i + 1], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 5], coeffs_out[j1 + 7] = invbutterfly(
                    coeffs_out[j1 + 5], coeffs_out[j1 + 7], ntt_psi_inv[i + 1], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 8], coeffs_out[j1 + 10] = invbutterfly(
                    coeffs_out[j1 + 8], coeffs_out[j1 + 10], ntt_psi_inv[i + 2], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 9], coeffs_out[j1 + 11] = invbutterfly(
                    coeffs_out[j1 + 9], coeffs_out[j1 + 11], ntt_psi_inv[i + 2], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 12], coeffs_out[j1 + 14] = invbutterfly(
                    coeffs_out[j1 + 12], coeffs_out[j1 + 14], ntt_psi_inv[i + 3], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 13], coeffs_out[j1 + 15] = invbutterfly(
                    coeffs_out[j1 + 13], coeffs_out[j1 + 15], ntt_psi_inv[i + 3], two_q, four_q, q, q_inv)

                i, j1 = i + 4, j1 + 8 * t

        t <<= 1
        m >>= 1


# NTT computes the NTT on the input coefficients using the input parameters.
def ntt(coeffs_in: list[u64], coeffs_out: list[u64], n: int, ntt_psi: list[u64], q: u64, mred_params:u64, bred_params: list[u64]):
    ntt_lazy(coeffs_in, coeffs_out, n, ntt_psi, q, mred_params, bred_params)
    reduce_vec(coeffs_out, coeffs_out, q, bred_params)


# InvNTT computes the InvNTT transformation on the input coefficients using the input parameters.
def inv_ntt(coeffs_in, coeffs_out, n, ntt_psi_inv, ntt_n_inv, q, q_inv):
    inv_ntt_core(coeffs_in, coeffs_out, n, ntt_psi_inv, q, q_inv)
    mul_scalar_montgomery_vec(coeffs_out, coeffs_out, ntt_n_inv, q, q_inv)


# MRedParams computes the parameter q_inv = (q^-1) mod 2^64,
# required for MRed.
def mred_params(q):
	q_inv = u64(1)
	for _ in range(63):
		q_inv *= q
		q *= q

	return q_inv


# Poly is the structure that contains the coefficients of a polynomial.
class Poly:
    coeffs: list[list[u64]]  # Dimension-2 slice of coefficients (re-slice of buff)
    buff: list[u64]  # Dimension-1 slice of coefficient
    is_ntt: bool
    is_mform: bool
    
    def __bool__(self):
        return bool(self.buff)
    
    def __eq__(self, other: Poly) -> bool:
        return self.coeffs == other.coeffs
    
    def __ne__(self, other: Poly) -> bool:
         return not self == other
        
    def __str__(self) -> str:
        return f"""\tPolynomial:
                \tBuff[:100]: {self.buff[:100]}
                \tBuff sum: {sum(self.buff)}
                \tShape: ({len(self.coeffs)}, {len(self.coeffs[0])})
        """
    
    def set(self, other: Poly):
        self.coeffs = other.coeffs
        self.buff = other.buff
        self.is_ntt = other.is_ntt
        self.is_mform = other.is_mform
    
    def copy_values(self, other: Poly):
        self.coeffs = copy(other.coeffs)
        self.buff = copy(other.buff)

    # n returns the number of coefficients of the polynomial, which equals the degree of the Ring cyclotomic polynomial.
    def n(self):
        return len(self.coeffs[0])

    # level returns the current number of moduli minus 1.
    def level(self):
        return len(self.coeffs) - 1
    
    # resize resizes the level of the target polynomial to the provided level.
    # If the provided level is larger than the current level, then allocates zero
    # coefficients, otherwise dereferences the coefficients above the provided level.
    def resize(self, level: int):
        n = self.n()
        if self.level() > level:
            self.buff = self.buff[:n * (level + 1)]
            self.coeffs = self.coeffs[:level + 1]
        elif level > self.level():
            self.buff.extend(zeros_vec(n * (level - self.level()), TP=u64))
            self.coeffs = list[list](n * (level + 1))
            for i in range(level + 1): self.coeffs.append(self.buff[i * n : (i + 1) * n])
    
    def update_buffer(self):
        # TODO: Deprecate.
        idx = 0
        for row in self.coeffs:
            for e in row:
                self.buff[idx] = e
                idx += 1


# new_poly creates a new polynomial with n coefficients set to zero and level+1 moduli.
def new_poly(n, level):
    pol = Poly()

    pol.buff = zeros_vec(n * (level + 1), TP=u64)
    pol.coeffs = zeros(level + 1, n, TP=u64)

    return pol


# NumberTheoreticTransformerStandard computes the standard nega-cyclic NTT in the ring Z[X]/(X^n+1).
class NumberTheoreticTransformerStandard:
    name: str

    def __init__(self):
        self.name = "standard"
    
    # forward_lvl writes the forward NTT in Z[X]/(X^n+1) of p1 on p2.
    # Only computes the NTT for the first level+1 moduli.
    def forward_lvl(r, level: int, p1: Poly, p2: Poly):
        for x in range(level + 1):
            ntt(p1.coeffs[x], p2.coeffs[x], r.n, r.ntt_psi[x], r.modulus[x], r.mred_params[x], r.bred_params[x])
        p2.update_buffer()
    
    # backward_lvl writes the backward NTT in Z[X]/(X^n+1) on p2.
    # Only computes the NTT for the first level+1 moduli.
    def backward_lvl(r, level, p1, p2):
        for x in range(level + 1):
            inv_ntt(p1.coeffs[x], p2.coeffs[x], r.n, r.ntt_psi_inv[x], r.ntt_n_inv[x], r.modulus[x], r.mred_params[x])
        p2.update_buffer()
    
    # forward_lazy_lvl writes the forward NTT in Z[X]/(X^n+1) of p1 on p2.
    # Only computes the NTT for the first level+1 moduli and returns values in the range [0, 2q-1].
    def forward_lazy_lvl(r, level, p1, p2):
        for x in range(level + 1):
            ntt_lazy(p1.coeffs[x], p2.coeffs[x], r.n, r.ntt_psi[x], r.modulus[x], r.mred_params[x], r.bred_params[x])
        p2.update_buffer()


# NumberTheoreticTransformerConjugateInvariant computes the NTT in the ring Z[X+X^-1]/(X^2N+1).
# Z[X+X^-1]/(X^2N+1) is a closed sub-ring of Z[X]/(X^2N+1). Note that the input polynomial only needs to be size n
# since the right half does not provide any additional information.
# See "Approximate Homomorphic Encryption over the Conjugate-invariant Ring", https:#eprint.iacr.org/2018/952.
# The implemented approach is more efficient than the one proposed in the referenced work.
# It avoids the linear map Z[X + X^-1]/(X^2N + 1) <-> Z[X]/(X^n - 1) by instead directly computing the left
# half of the NTT of Z[X + X^-1]/(X^2N + 1) since the right half provides no additional information, which
# allows to (re)use nega-cyclic NTT.
class NumberTheoreticTransformerConjugateInvariant:
    name: str

    def __init__(self):
        self.name = "conjugate_invariant"


class Ring:
    # Polynomial nb.Coefficients
    n: int
    # moduli
    modulus: list[u64]
    # 2^bit_length(Qi) - 1
    mask: list[u64]
    # Indicates whether NTT can be used with the current ring.
    allows_ntt: bool
    # Product of the moduli for each level
    modulus_at_level: list[big_uint]
    # Fast reduction parameters
    bred_params: list[list[u64]]
    mred_params: list[u64]
    rescale_params: list[list[u64]]
    # NTT Parameters
    nth_root: u64
    psi_mont: list[u64]  #2N-th primitive root in Montgomery form
    psi_inv_mont: list[u64]  #2N-th inverse primitive root in Montgomery form
    ntt_psi: list[list[u64]]  #powers of the inverse of the 2N-th primitive root in Montgomery form (in bit-reversed order)
    ntt_psi_inv: list[list[u64]]  #powers of the inverse of the 2N-th primitive root in Montgomery form (in bit-reversed order)
    ntt_n_inv: list[u64]  #[n^-1] mod Qi in Montgomery form

    ntt_type: str

    def __bool__(self):
        return bool(self.n)
    
    def __str__(self):
        return f"""\tRing:
                \tN: {self.n}
                \tModuli[:10]: {self.modulus[:10]}
                \mask[:10]: {self.mask[:10]}
                \modulus_at_level[:10]: {self.modulus_at_level[:10]}
        """
    
    def set_parameters(self, n, modulus):
	    # Checks if n is a power of 2
        if (n < 16) or (n & (n - 1)) != 0 and n != 0:
            raise ValueError("invalid ring degree (must be a power of 2 >= 8)")

        if len(modulus) == 0:
            raise ValueError("invalid modulus (must be a non-empty []uint64)")

        if not utils.all_distinct(modulus):
            raise ValueError("invalid modulus (moduli are not distinct)")

        self.allows_ntt = False
        self.n = n

        self.modulus = list[u64](len(modulus))
        self.mask = list[u64](len(modulus))

        for qi in modulus:
            self.modulus.append(qi)
            self.mask.append((u64(1) << qi.bitlen()) - u64(1))

        # Computes bigQ for all levels
        self.modulus_at_level = list[big_uint](len(modulus))
        self.modulus_at_level.append(self.modulus[0].ext_to_bigint())

        num_bits_total = 1
        for m in self.modulus:
            num_bits_total += int(m.bitlen())

        assert num_bits_total <= BIG_INT_LEN, (
            f"moduli product too large for the bigint in use."
            f" Increase the bigint size. Current bigint size: {BIG_INT_LEN}."
            f" Required size: {num_bits_total}")

        for i in range(1, len(self.modulus)):
            self.modulus_at_level.append(self.modulus_at_level[i - 1] * self.modulus[i].ext_to_bigint())
        
        # Computes the fast reduction parameters
        self.bred_params = list[list[u64]](len(modulus))
        self.mred_params = list[u64](len(modulus))

        for i, qi in enumerate(self.modulus):
            # Computes the fast modular reduction parameters for the Ring
            self.bred_params.append(bred_params(qi))

            # If qi is not a power of 2, we can compute the MRedParams (otherwise, it
            # would return an error as there is no valid Montgomery form mod a power of 2)
            if (qi & (qi - u64(1))) != u64(0) and qi != u64(0):
                self.mred_params.append(mred_params(qi))
            else: self.mred_params.append(u64(0))
        
    def set_number_theoretic_transformer(self, ntt):
        self.ntt_type = ntt
    
    # type returns the type of the ring which might be either `StandardRing` or `ConjugateInvariantRing`.
    def type(self) -> int:
        if self.ntt_type == NumberTheoreticTransformerStandard().name:
            return StandardRing
        elif self.ntt_type ==  NumberTheoreticTransformerConjugateInvariant().name:
            return ConjugateInvariantRing
        else: raise ValueError("invalid NumberTheoreticTransformer type")

    # gen_ntt_params checks that n has been correctly initialized, and checks that each modulus is a prime congruent to 1 mod 2N (i.e. NTT-friendly).
    # Then, it computes the variables required for the NTT. The purpose of ValidateParameters is to validate that the moduli allow the NTT, and to compute the
    # NTT parameters.
    def gen_ntt_params(self, nth_root):
        if self.n == 0 or not self.modulus:
            raise ValueError("invalid r parameters (missing)")

        if self.n == 0 or not self.modulus or nth_root < u64(1):
            raise ValueError("error : invalid r parameters (missing)")

        # Checks if each qi is prime and equal to 1 mod nth_root
        for i, qi in enumerate(self.modulus):
            if not utils.is_prime(qi):
                raise ValueError(f"invalid modulus (modulus[{i}] is not prime)")

            if qi & (nth_root - u64(1)) != u64(1):
                self.allows_ntt = False
                raise ValueError("invalid modulus (modulus[{i}] != 1 mod nth_root)")

        self.nth_root = nth_root
        self.rescale_params = [[] for _ in range(len(self.modulus) - 1)]

        for j in range(len(self.modulus) - 1, 0, -1):
            self.rescale_params[j - 1] = list[u64](j)

            for i in range(j):
                self.rescale_params[j - 1].append(
                    mform(
                        self.modulus[i] - mod_exp_u64(self.modulus[j], self.modulus[i] - u64(2), self.modulus[i]),
                        self.modulus[i], self.bred_params[i]))
        
        self.psi_mont = list[u64](len(self.modulus))
        self.psi_inv_mont = list[u64](len(self.modulus))
        self.ntt_psi = [[] for _ in range(len(self.modulus))]
        self.ntt_psi_inv = [[] for _ in range(len(self.modulus))]
        self.ntt_n_inv = list[u64](len(self.modulus))

        log_nth_root = int((nth_root >> u64(1)).bitlen()) - 1

        for i, qi in enumerate(self.modulus):
            # 1.1 Computes n^(-1) mod q in Montgomery form
            self.ntt_n_inv.append(mform(mod_exp_u64(nth_root >> u64(1), qi - u64(2), qi), qi, self.bred_params[i]))

            # 1.2 Computes Psi and PsiInv in Montgomery form
            self.ntt_psi[i] = zeros_vec(int(nth_root >> u64(1)), TP=u64)
            self.ntt_psi_inv[i] = zeros_vec(int(nth_root >> u64(1)), TP=u64)

            # Finds a 2N-th primitive Root
            g = primitive_root(qi)

            power = (qi - u64(1)) // nth_root
            powerInv = (qi - u64(1)) - power

            # Computes Psi and PsiInv in Montgomery form
            psi_mont = mform(mod_exp_u64(g, power, qi), qi, self.bred_params[i])
            psi_inv_mont = mform(mod_exp_u64(g, powerInv, qi), qi, self.bred_params[i])

            self.psi_mont.append(psi_mont)
            self.psi_inv_mont.append(psi_inv_mont)

            self.ntt_psi[i][0] = mform(u64(1), qi, self.bred_params[i])
            self.ntt_psi_inv[i][0] = mform(u64(1), qi, self.bred_params[i])

            # Computes ntt_psi[j] = ntt_psi[j-1]*Psi and ntt_psi_inv[j] = ntt_psi_inv[j-1]*PsiInv
            for j in range(1, int(nth_root >> u64(1))):
                index_reverse_prev = (j - 1).bit_reverse_subset(log_nth_root)
                index_reverse_next = j.bit_reverse_subset(log_nth_root)

                self.ntt_psi[i][index_reverse_next] = mred(
                    self.ntt_psi[i][index_reverse_prev], psi_mont, qi, self.mred_params[i])
                self.ntt_psi_inv[i][index_reverse_next] = mred(
                    self.ntt_psi_inv[i][index_reverse_prev], psi_inv_mont, qi, self.mred_params[i])

        self.allows_ntt = True

    # new_poly creates a new polynomial with all coefficients set to 0.
    def new_poly(self):
        return new_poly(self.n, len(self.modulus) - 1)

    # ntt_lvl computes the NTT of p1 and returns the result on p2.
    # The value level defines the number of moduli of the input polynomials.
    def ntt_lvl(self, level: int, p1: Poly, p2: Poly):
        if self.ntt_type == NumberTheoreticTransformerStandard().name:
            NumberTheoreticTransformerStandard.forward_lvl(self, level, p1, p2)
        else: raise NotImplementedError()
    
    # mform_lvl switches p1 to the Montgomery domain for the moduli from q_0 up to q_level and writes the result on p2.
    def mform_lvl(self, level, p1, p2):
        for i in range(level + 1):
            mform_vec(p1.coeffs[i][:self.n], p2.coeffs[i], self.modulus[i], self.bred_params[i])
        p2.update_buffer()
    
    # mul_coeffs_montgomery multiplies p1 by p2 coefficient-wise with a
    # Montgomery modular reduction and returns the result on p3.
    def mul_coeffs_montgomery(self, p1, p2, p3):
        self.mul_coeffs_montgomery_lvl(self.min_level_ternary(p1, p2, p3), p1, p2, p3)
    
    def min_level_ternary(self, p1, p2, p3):
        return min(min(len(self.modulus) - 1, p1.level()), min(p2.level(), p3.level()))
    
    # mul_coeffs_montgomery_lvl multiplies p1 by p2 coefficient-wise with a Montgomery
    # modular reduction for the moduli from q_0 up to q_level and returns the result on p3.
    def mul_coeffs_montgomery_lvl(self, level, p1, p2, p3):
        for i in range(level + 1):
            mul_coeffs_montgomery_vec(p1.coeffs[i][:self.n], p2.coeffs[i][:self.n], p3.coeffs[i], self.modulus[i], self.mred_params[i])
        p3.update_buffer()
    
    # mul_scalar_bigint_lvl multiplies each coefficient of p1 by a big.Int scalar
    # for the moduli from q_0 up to q_level and writes the result on p2.
    def mul_scalar_bigint_lvl(self, level, p1, scalar, p2 ):
        for i in range(level + 1):
            scalarQi = scalar.bigint_mod(self.modulus[i].ext_to_bigint())
            mul_scalar_montgomery_vec(p1.coeffs[i][:self.n], p2.coeffs[i], mform(bred_add(scalarQi, self.modulus[i], self.bred_params[i]), self.modulus[i], self.bred_params[i]), self.modulus[i], self.mred_params[i])
            p2.update_buffer()
    
    # mul_scalar multiplies each coefficient of p1 by a scalar and writes the result on p2.
    def mul_scalar(self, p1, scalar, p2):
        self.mul_scalar_lvl(self.min_level_binary(p1, p2), p1, scalar, p2)
    
    def min_level_binary(self, p1, p2):
        return min(min(len(self.modulus) - 1, p1.level()), p2.level())
    
    # mul_scalar_lvl multiplies each coefficient of p1 by a scalar for the moduli from q_0 up to q_level and writes the result on p2.
    def mul_scalar_lvl(self, level, p1, scalar, p2):
        for i in range(level + 1):
            mul_scalar_montgomery_vec(p1.coeffs[i][:self.n], p2.coeffs[i], mform(bred_add(u64(scalar), self.modulus[i], self.bred_params[i]), self.modulus[i], self.bred_params[i]), self.modulus[i], self.mred_params[i])
        p2.update_buffer()
    
    # new_poly_lvl creates a new polynomial with all coefficients set to 0.
    def new_poly_lvl(self, level):
        return new_poly(self.n, level)
    
    # mul_coeffs_montgomery_and_sub_lvl multiplies p1 by p2 coefficient-wise with
    # a Montgomery modular reduction and subtracts the result from p3.
    def mul_coeffs_montgomery_and_sub_lvl(self, level, p1, p2, p3):
        for i in range(level + 1):
            mul_coeffs_montgomery_and_sub_vec(p1.coeffs[i][:self.n], p2.coeffs[i][:self.n], p3.coeffs[i], self.modulus[i], self.mred_params[i])
        p3.update_buffer()
    
    # inv_ntt_lvl computes the inverse-NTT of p1 and returns the result on p2.
    # The value level defines the number of moduli of the input polynomials.
    def inv_ntt_lvl(self, level, p1, p2):
        if self.ntt_type == NumberTheoreticTransformerStandard().name:
            NumberTheoreticTransformerStandard.backward_lvl(self, level, p1, p2)
        else: raise NotImplementedError()
    
    # ntt_lazy_lvl computes the NTT of p1 and returns the result on p2.
    # The value level defines the number of moduli of the input polynomials.
    # Output values are in the range [0, 2q-1]
    def ntt_lazy_lvl(self, level: int, p1: Poly, p2: Poly):
        if self.ntt_type == NumberTheoreticTransformerStandard().name:
            NumberTheoreticTransformerStandard.forward_lazy_lvl(self, level, p1, p2)
        else: raise NotImplementedError()
    
    # neg_lvl sets the coefficients of p1 to their additive inverse for
    # the moduli from q_0 up to q_level and writes the result on p2.
    def neg_lvl(self, level: int, p1: Poly, p2: Poly):
        for i in range(level + 1): neg_vec(p1.coeffs[i][:self.n], p2.coeffs[i], self.modulus[i])
        p2.update_buffer()
    
    # add_lvl adds p1 to p2 coefficient-wise for the moduli from
    # q_0 up to q_level and writes the result on p3.
    def add_lvl(self, level: int, p1: Poly, p2: Poly, p3: Poly):
        for i in range(level + 1): add_vec(p1.coeffs[i][:self.n], p2.coeffs[i][:self.n], p3.coeffs[i], self.modulus[i])
        p3.update_buffer()
    
    # reduce_lvl applies a modular reduction on the coefficients of p1
    # for the moduli from q_0 up to q_level and writes the result on p2.
    def reduce_lvl(self, level: int, p1: Poly, p2: Poly):
        for i in range(level + 1):
            reduce_vec(p1.coeffs[i][:self.n], p2.coeffs[i], self.modulus[i], self.bred_params[i])
        p2.update_buffer()
    
    # poly_to_bigint reconstructs p1 and returns the result in an array of Int.
    # gap defines coefficients X^{i*gap} that will be reconstructed.
    # For example, if gap = 1, then all coefficients are reconstructed, while
    # if gap = 2 then only coefficients X^{2*i} are reconstructed.
    def poly_to_bigint(self, p1: Poly, gap: int, coeffs_bigint: list[big_uint]):
        self.poly_to_bigint_lvl(p1.level(), p1, gap, coeffs_bigint)
    
    # poly_to_bigint_lvl reconstructs p1 and returns the result in an array of Int.
    # gap defines coefficients X^{i*gap} that will be reconstructed.
    # For example, if gap = 1, then all coefficients are reconstructed, while
    # if gap = 2 then only coefficients X^{2*i} are reconstructed.
    def poly_to_bigint_lvl(self, level: int, p1: Poly, gap: int, coeffs_bigint: list[big_uint]):
        crt_reconstruction = list[big_uint](level + 1)
        modulus_bigint = self.modulus_at_level[level]

        for i in range(level + 1):
            qib = self.modulus[i].ext_to_bigint()
            crt_reconstruction.append(modulus_bigint.bigint_floordiv(qib))
            crt_reconstruction[i] *= crt_reconstruction[i].mod_inv(qib).bigint_mod(qib)

        i, j = 0, 0

        while j < self.n:
            coeffs_bigint[i] = big_uint(0)
            for k in range(level + 1):
                coeffs_bigint[i] += p1.coeffs[k][j].ext_to_bigint() * crt_reconstruction[k]
            coeffs_bigint[i] = coeffs_bigint[i].bigint_mod(modulus_bigint)
            i, j = i + 1, j + gap


class BaseSampler:
    prng: random.Random
    base_ring: Ring

    def __str__(self) -> str:
        return f"""\tBase sampler:
                \tBase ring: {self.base_ring}
        """


class UniformSampler(BaseSampler):
    random_buffer_n: list[byte]

    def __init__(self, prng, base_ring, random_buffer_n):
        self.prng = prng
        self.base_ring = base_ring
        self.random_buffer_n = random_buffer_n
    
    def __bool__(self):
        return bool(len(self.random_buffer_n))
    
    def __str__(self) -> str:
        return f"""\tUniformSampler:
                \t{self.get_base_sampler()}
        """
    
    def get_base_sampler(self):
        return BaseSampler(self.prng, self.base_ring)
    
    # read_lvl generates a new polynomial with coefficients following a uniform distribution over [0, Qi-1].
    def read_lvl(self, level, pol):
        ptr_, random_uint = 0, u64(0)
        self.random_buffer_n = self.prng.getrandbytes(self.base_ring.n)

        for j in range(level + 1):
            qi = self.base_ring.modulus[j]
            # Starts by computing the mask
            mask = self.base_ring.mask[j]
            ptmp = pol.coeffs[j]

            # Iterates for each modulus over each coefficient
            for i in range(self.base_ring.n):
                # Samples an integer between [0, qi-1]
                while True:
                    # Refills the buff if it runs empty
                    if ptr_ == self.base_ring.n:
                        self.random_buffer_n = self.prng.getrandbytes(self.base_ring.n)
                        ptr_ = 0

                    # Reads bytes from the buff
                    random_uint = ptr[u64](self.random_buffer_n.arr.ptr + ptr_)[0] & mask
                    ptr_ += 8

                    # If the integer is between [0, qi-1], breaks the loop
                    if random_uint < qi: break

                ptmp[i] = random_uint
        
        pol.update_buffer()


# ModupParams stores the necessary parameters for RNS basis extension.
class ModupParams:
    # Parameters for basis extension from q to P
    # (q/Qi)^-1) (mod each Qi) (in Montgomery form)
    qoverqiinvqi: list[u64]
    # q/qi (mod each Pj) (in Montgomery form)
    qoverqimodp: list[list[u64]]
	# q*v (mod each Pj) for v in [1,...,k] where k is the number of Pj moduli
    vtimesqmodp: list[list[u64]]

class BasisExtender:
    ringq: Ring
    ringp: Ring
    params_q_to_p: list[ModupParams]
    params_p_to_q: list[ModupParams]
    mod_down_params_p_to_q: list[list[u64]]
    mod_down_params_q_to_p: list[list[u64]]

    buffq: Poly
    buffp: Poly

    def __str__(self) -> str:
        return f"""\tBasisExtender:
                \tringQ: {self.ringq}
                \tringP: {self.ringp}
                \tbuffQ: {self.buffq}
                \tbuffP: {self.buffp}
        """


# GaussianSampler keeps the state of a truncated Gaussian polynomial sampler.
class GaussianSampler(BaseSampler):
    sigma: float
    bound: int
    random_buffer_n: list[byte]
    ptr: u64

    def __str__(self) -> str:
        return f"""\tGaussianSampler:
                \tSigma: {self.sigma}
                \tBound: {self.bound}
                \tPtr: {self.ptr}
        """
    
    # read_lvl samples a truncated Gaussian polynomial at the provided level, in the default ring, standard deviation and bound.
    def read_lvl(self, level, pol):
        self.read_lvl(level, pol, self.base_ring, self.sigma, self.bound)
    
    def read_lvl(self, level, pol, ring, sigma, bound):
        coeff_int, sign = u64(0), u64(0)
        modulus = ring.modulus[:level + 1]

        for i in range(ring.n):
            while True:
                coeff_flo, sign = self.norm_float_64()
                coeff_int = u64(int(coeff_flo * sigma + 0.5))
                if coeff_int <= u64(bound): break

            for j, qi in enumerate(modulus):
                pol.coeffs[j][i] = u64(1)  # TODO: Revert: (coeff_int * sign) | (qi - coeff_int) * (sign ^ u64(1))
        
        pol.update_buffer()
    
    # NormFloat64 returns a normally distributed float64 in
    # the range [-math.MaxFloat64, +math.MaxFloat64], bounds included,
    # with standard normal distribution (mean = 0, stddev = 1).
    # To produce a different normal distribution, callers can
    # adjust the output using:
    #  sample = NormFloat64() * desiredStdDev + desiredMean
    def norm_float_64(self):
        r = self.prng.gauss(mu=0, sigma=1)
        return abs(r), u64(r < 0)
    
    # read_and_add_lvl samples a truncated Gaussian polynomial at the given level for the receiver's default standard deviation and bound and adds it on "pol".
    def read_and_add_lvl(self, level: int, pol: Poly):
        self.read_and_add_from_dist_lvl(level, pol, self.base_ring, self.sigma, self.bound)
    
    # read_and_add_from_dist_lvl samples a truncated Gaussian polynomial at the given level in the provided ring, standard deviation and bound and adds it on "pol".
    def read_and_add_from_dist_lvl(self, level: int, pol: Poly, ring: Ring, sigma: float, bound: int):
        modulus = ring.modulus[:level + 1]
        coeff_flo, sign, coeff_int = 0.0, u64(0), u64(0)

        for i in range(ring.n):
            while True:
                coeff_flo, sign = self.norm_float_64()
                coeff_int = u64(int(coeff_flo * sigma + 0.5))
                if coeff_int <= u64(bound): break

            for j, qi in enumerate(modulus):
                pol.coeffs[j][i] = cred(pol.coeffs[j][i] + ((coeff_int * sign) | (qi - coeff_int) * (sign ^ u64(1))), qi)
        
        pol.update_buffer()


# TernarySampler keeps the state of a polynomial sampler in the ternary distribution.
class TernarySampler(BaseSampler):
    matrix_proba: list[list[u8]]  # (2)(RING_PRECISION - 1)
    matrix_values: list[list[u64]]  # ()(3)
    p: float
    hw: int
    sample_name: str

    def __str__(self) -> str:
        return f"""\tTernarySampler:
                \tmatrixValues: {self.matrix_values}
                \tp: {self.p}
                \thw: {self.hw}
                \tsample_name: {self.sample_name}
        """

    def sample(self, lvl: int, r: Poly):
        if self.sample_name == 'samplesparse':
            self.sample_sparse(lvl, r)
        else: raise NotImplementedError()
    
    def sample_sparse(self, lvl: int, pol: Poly):
        if self.hw > self.base_ring.n:
            self.hw = self.base_ring.n

        index = list[int](self.base_ring.n)
        for i in range(self.base_ring.n): index.append(i)

        random_bytes = self.prng.getrandbytes((self.hw + 7) // 8)
        pointer = 0

        for i in range(self.hw):
            bit_len = int((self.base_ring.n - i).bitlen()) - 1  # rejection sampling of a random variable between [0, len(index)]

            j = self.prng.getrandbits(bit_len)
            while j >= self.base_ring.n - i:
                j = self.prng.getrandbits(bit_len)

            coeff = (int(random_bytes[0]) >> (i & 7)) & 1  # random binary digit [0, 1] from the random bytes (0 = 1, 1 = -1)
            for k in range(lvl + 1):
                pol.coeffs[k][index[j]] = self.matrix_values[k][coeff + 1]

            # Remove the element in position j of the slice (order not preserved)
            index[j] = index[len(index)-1]
            index = index[:len(index)-1]

            pointer += 1

            if pointer == 8:
                random_bytes = random_bytes[1:]
                pointer = 0

        for i in index:
            for k in range(lvl + 1):
                pol.coeffs[k][i] = u64(0)
        
        pol.update_buffer()
    
    def initialize_matrix(self, montgomery):
        self.matrix_values = zeros(len(self.base_ring.modulus), 3, TP=u64)

        # [0] = 0
        # [1] = 1 * 2^64 mod qi
        # [2] = (qi - 1) * 2^64 mod qi

        for i, Qi in enumerate(self.base_ring.modulus):
            self.matrix_values[i][0] = u64(0)

            if montgomery:
                self.matrix_values[i][1] = mform(u64(1), Qi, self.base_ring.bred_params[i])
                self.matrix_values[i][2] = mform(Qi - u64(1), Qi, self.base_ring.bred_params[i])
            else:
                self.matrix_values[i][1] = u64(1)
                self.matrix_values[i][2] = Qi - u64(1)
    
    # read samples a polynomial into pol.
    def read(self, pol):
	    self.sample(len(self.base_ring.modulus) - 1, pol)


# NewRingWithCustomNTT creates a new RNS Ring with degree n and coefficient moduli moduli with user-defined NTT transform and primitive Nth root of unity.
# moduli should be a non-empty []uint64 with distinct prime elements. All moduli must also be equal to 1 modulo the root of unity.
# n must be a power of two larger than 8. An error is returned with a nil *Ring in the case of non NTT-enabling parameters.
def new_ring_with_custom_ntt(n, moduli, ntt, nth_root):
    r = Ring()
    r.set_parameters(n, moduli)
    r.set_number_theoretic_transformer(ntt)
    r.gen_ntt_params(u64(nth_root))

    return r


def new_ring_from_type(n, moduli, ring_type):
    if ring_type == StandardRing:
        return new_ring_with_custom_ntt(n, moduli, NumberTheoreticTransformerStandard().name, 2 * n)
    if ring_type == ConjugateInvariantRing:
        return new_ring_with_custom_ntt(n, moduli, NumberTheoreticTransformerConjugateInvariant().name, 4 * n)
    raise ValueError("invalid ring type")


# GenerateNTTPrimesQ generates "levels" different nth_root NTT-friendly
# primes starting from 2**LogQ and alternating between upward and downward.
def generate_ntt_primes_q(logq, nth_root, levels):
    primes = []
    q_pow2 = u64(1 << logq)
    next_prime = q_pow2 + u64(1)
    previous_prime = q_pow2 + u64(1)
    checkfornextprime = True
    checkforpreviousprime = True

    while True:
        if not (checkfornextprime or checkforpreviousprime):
            raise ValueError("generateNTTPrimesQ error: cannot generate enough primes for the given parameters")

        if checkfornextprime:
            if next_prime > u64(0xffffffffffffffff) - u64(nth_root):
                checkfornextprime = False
            else:
                if utils.is_prime(next_prime):
                    primes.append(next_prime)
                    if len(primes) == levels: return primes
                next_prime += u64(nth_root)

        if checkforpreviousprime:
            if previous_prime < u64(nth_root):
                checkforpreviousprime = False
            else:
                previous_prime -= u64(nth_root)
				
                if utils.is_prime(previous_prime):
                    primes.append(previous_prime)
                    if len(primes) == levels: return primes


# GenerateNTTPrimesP generates "levels" different nth_root NTT-friendly
# primes starting from 2**LogP and downward.
# Special case were primes close to 2^{LogP} but with a smaller bit-size than LogP are sought.
def generate_ntt_primes_p(logP, nth_root, n):
    primes = []
    p_pow2 = u64(1 << logP)
    x = p_pow2 + u64(1)

    while True:
        # We start by subtracting 2N to ensure that the prime bit-length is smaller than LogP
        if x > u64(nth_root):
            x -= u64(nth_root)
            if utils.is_prime(x):
                primes.append(x)
                if len(primes) == n: return primes
        else: raise ValueError("generateNTTPrimesP error: cannot generate enough primes for the given parameters")


# GenerateNTTPrimes generates n nth_root NTT friendly primes given logq = size of the primes.
# It will return all the appropriate primes, up to the number of n, with the
# best available deviation from the base power of 2 for the given n.
def generate_ntt_primes(logq, nth_root, n):
    assert logq < 62, "logq must be between 1 and 61"

    if logq == 61: return generate_ntt_primes_p(logq, nth_root, n)
    return generate_ntt_primes_q(logq, nth_root, n)


# NewUniformSampler creates a new instance of UniformSampler from a PRNG and ring definition.
def new_uniform_sampler(prng, base_ring):
    return UniformSampler(
        prng=prng,
        base_ring=base_ring,
        random_buffer_n=zeros_vec(base_ring.n, TP=byte))


# GenModUpParams generates the ModupParams for basis extension from q to P and P to q.
def gen_mod_up_params(q, P):
    bred_params_q = list[list[u64]](len(q))
    mred_params_q = list[u64](len(q))
    bred_params_p = list[list[u64]](len(P))
    mred_params_p = list[u64](len(P))

    for qi in q:
        bred_params_q.append(bred_params(qi))
        mred_params_q.append(mred_params(qi))

    for pi in P:
        bred_params_p.append(bred_params(pi))
        mred_params_p.append(mred_params(pi))

    qoverqiinvqi = list[u64](len(q))
    qoverqimodp = list[list[u64]](len(P))

    for _ in range(len(P)):
        q_row = list[u64](len(q))
        for _ in range(len(q)): q_row.append(u64(0))
        qoverqimodp.append(q_row)

    for i, qi in enumerate(q):
        qi_star = mform(u64(1), qi, bred_params_q[i])

        for j in range(len(q)):
            if j != i: qi_star = mred(qi_star, mform(q[j], qi, bred_params_q[i]), qi, mred_params_q[i])

        # (q/Qi)^-1) * r (mod Qi) (in Montgomery form)
        qoverqiinvqi.append(mod_exp_montgomery(qi_star, int(qi - u64(2)), qi, mred_params_q[i], bred_params_q[i]))

        for j, pj in enumerate(P):
            # (q/qi * r) (mod Pj) (in Montgomery form)
            qi_star = u64(1)
            for u in range(len(q)):
                if u != i: qi_star = mred(qi_star, mform(q[u], pj, bred_params_p[j]), pj, mred_params_p[j])

            qoverqimodp[j][i] = mform(qi_star, pj, bred_params_p[j])

    vtimesqmodp = list[list[u64]](len(P))
    for j, pj in enumerate(P):
        vtimesqmodp.append(list[u64](len(q) + 1))
		# Correction Term (v*q) mod each Pj

        q_mod_pi = u64(1)
        for qi in q: q_mod_pi = mred(q_mod_pi, mform(qi, pj, bred_params_p[j]), pj, mred_params_p[j])

        v = pj - q_mod_pi
        vtimesqmodp[j].append(u64(0))
        for i in range(1, len(q) + 1): vtimesqmodp[j].append(cred(vtimesqmodp[j][i - 1] + v, pj))
    
    return ModupParams(
        qoverqiinvqi=qoverqiinvqi,
        qoverqimodp=qoverqimodp,
        vtimesqmodp=vtimesqmodp)

def gen_mod_down_params(ringq, ringp):
    params = list[list[u64]](len(ringp.modulus))

    bred_params = ringq.bred_params
    mred_params = ringq.mred_params

    for j in range(len(ringp.modulus)):
        params.append(list[u64](len(ringq.modulus)))
        for i, qi in enumerate(ringq.modulus):
            params[j].append(mod_exp_u64(ringp.modulus[j], qi - u64(2), qi))
            params[j].append(mform(params[j][i], qi, bred_params[i]))

            if j > 0: params[j][i] = mred(params[j][i], params[j - 1][i], qi, mred_params[i])

    return params

def new_basis_extender(ringq, ringp):
    new_params = BasisExtender()

    new_params.ringq = ringq
    new_params.ringp = ringp

    new_params.params_q_to_p = list[ModupParams](len(ringq.modulus))
    for i in range(len(ringq.modulus)):
        new_params.params_q_to_p.append(gen_mod_up_params(ringq.modulus[:i + 1], ringp.modulus))

    new_params.params_p_to_q = list[ModupParams](len(ringp.modulus))
    for i in range(len(ringp.modulus)):
        new_params.params_p_to_q.append(gen_mod_up_params(ringp.modulus[:i + 1], ringq.modulus))

    new_params.mod_down_params_p_to_q = gen_mod_down_params(ringq, ringp)
    new_params.mod_down_params_q_to_p = gen_mod_down_params(ringp, ringq)

    new_params.buffq = ringq.new_poly()
    new_params.buffp = ringp.new_poly()

    return new_params

# NewGaussianSampler creates a new instance of GaussianSampler from a PRNG, a ring definition and the truncated
# Gaussian distribution parameters. Sigma is the desired standard deviation and bound is the maximum coefficient norm in absolute
# value.
def new_gaussian_sampler(prng, base_ring, sigma, bound):
    return GaussianSampler(
        prng=prng,
        random_buffer_n=[byte(0) for _ in range(1024)],
        ptr=u64(0),
        base_ring=base_ring,
        sigma=sigma,
        bound=bound)

# NewTernarySamplerWithHammingWeight creates a new instance of a fixed-hamming-weight TernarySampler from a PRNG, the ring definition and the desired
# hamming weight for the output polynomials. If "montgomery" is set to true, polynomials read from this sampler
# are in Montgomery form.
def new_ternary_sampler_with_hamming_weight(prng, base_ring, hw, montgomery):
    ternary_sampler = TernarySampler(
        base_ring=base_ring,
        prng=prng,
        hw=hw,
        sample_name="samplesparse")
    ternary_sampler.initialize_matrix(montgomery)
    return ternary_sampler

# CopyValuesLvl copies the values of p0 on p1, up to level+1 moduli.
def copy_values_lvl(level, p0, p1):
    for i in range(level + 1): p1.coeffs[i] = copy(p0.coeffs[i])
    p1.buff[:p1.n() * (level + 1)] = copy(p0.buff)

# CopyLvl copies the coefficients of p0 on p1 within the given Ring.
# Copies for up to level+1 moduli.
# Expects the degree of both polynomials to be identical.
# Transfers the is_ntt and is_mform flags.
def copy_lvl(level, p0, p1):
	copy_values_lvl(level, p0, p1)
	p1.is_ntt = p0.is_ntt
	p1.is_mform = p0.is_mform
