import ckks, drlwe

from drlwe import PCKSProtocol as DRLWEPCKSProtocol
from drlwe import CKGProtocol as DRLWECKGProtocol


# PCKSProtocol is the structure storing the parameters for the collective public key-switching.
class PCKSProtocol(DRLWEPCKSProtocol):
    def __init__(self, pcks_protocol):
        self.params = pcks_protocol.params
        self.sigma_smudging = pcks_protocol.sigma_smudging

        self.tmp_qp = pcks_protocol.tmp_qp
        self.tmp_p = pcks_protocol.tmp_p

        self.basis_extender = pcks_protocol.basis_extender
        self.gaussian_sampler = pcks_protocol.gaussian_sampler
        self.ternary_sampler_montgomery_q = pcks_protocol.ternary_sampler_montgomery_q
    
    # KeySwitch performs the actual keyswitching operation on a ciphertext ct and put the result in ct_out.
    def key_switch(self, ct_in: ckks.Ciphertext, combined: drlwe.PCKSShare, ct_out: ckks.Ciphertext):
        self.drlwe_key_switch(ct_in.get_rlwe_ciphertext(), combined, ct_out.get_rlwe_ciphertext())
        ct_out.set_scale(ct_in.scale)


# new_pcks_protocol creates a new PCKSProtocol object and will be used to re-encrypt a Ciphertext ctx encrypted under a secret-shared key mong j parties under a new
# collective public-key.
def new_pcks_protocol(params: ckks.Parameters, sigma_smudging: float) -> PCKSProtocol:
	return PCKSProtocol(drlwe.new_pcks_protocol(params.get_rlwe_params(), sigma_smudging))


# NewCKGProtocol creates a new drlwe.CKGProtocol instance from the CKKS parameters
def new_ckg_protocol(params: ckks.Parameters) -> DRLWECKGProtocol:
	return drlwe.new_ckg_protocol(params.get_rlwe_params())


# NewRKGProtocol creates a new drlwe.RKGProtocol instance from the CKKS parameters
def new_rkg_protocol(params: ckks.Parameters) -> drlwe.RKGProtocol:
	return drlwe.new_rkg_protocol(params.get_rlwe_params())
