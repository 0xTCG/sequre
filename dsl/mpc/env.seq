from comms import MPCComms
from prg import MPCPRG
from arithmetic import MPCArithmetic
from polynomial import MPCPolynomial
from boolean import MPCBoolean
from fp import MPCFP
from he import MPCHE


class MPCEnv[TP]:
    pid: int
    local: bool
    comms: MPCComms[TP]
    prg: MPCPRG
    arithmetic: MPCArithmetic[TP]
    polynomial: MPCPolynomial[TP]
    boolean: MPCBoolean[TP]
    fp: MPCFP[TP]
    he: MPCHE[TP]

    def __init__(self: MPCEnv[TP], pid: int, local: bool, expect_data_sharing: bool = False):
        self.pid = pid
        self.local = local

        # PRGs & Network
        self.prg = MPCPRG(self.pid)
        self.comms = MPCComms[TP](
            self.prg,
            self.local,
            expect_data_sharing)
        
        # MPC
        self.arithmetic = MPCArithmetic[TP](self.comms)
        self.polynomial = MPCPolynomial[TP](self.arithmetic)
        self.boolean = MPCBoolean[TP](self.polynomial)
        self.fp = MPCFP[TP](self.boolean)
        
        # HE
        self.he = MPCHE(comms=self.comms)
    
    def reset_stats(self):
        self.comms.reset_stats()
        self.arithmetic.reset_stats()
        self.fp.reset_stats()
    
    def print_stats(self, file_stream = None):
        self.comms.print_stats(file_stream)
        self.arithmetic.print_stats(file_stream)
        self.fp.print_stats(file_stream)
    
    def done(self):
        self.comms.sync_parties()
        self.comms.clean_up()
        print(f'CP{self.pid} is done!')
    