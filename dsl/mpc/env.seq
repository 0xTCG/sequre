from comms import MPCComms
from prg import MPCPRG
from arithmetic import MPCArithmetic
from polynomial import MPCPolynomial
from boolean import MPCBoolean
from fp import MPCFP
from optimizations import MPCOptimizations


class MPCEnv[TP]:
    pid: int
    local: bool
    comms: MPCComms[TP]
    prg: MPCPRG
    arithmetic: MPCArithmetic[TP]
    polynomial: MPCPolynomial[TP]
    boolean: MPCBoolean[TP]
    fp: MPCFP[TP]
    optimizations: MPCOptimizations[TP]

    def __init__(self: MPCEnv[TP], pid: int, local: bool):
        self.pid = pid
        self.local = local

        self.prg = MPCPRG(self.pid)
        self.comms = MPCComms[TP](self.pid, self.prg, local)
        self.arithmetic = MPCArithmetic[TP](
            pid=self.pid,
            prg=self.prg,
            comms=self.comms)
        self.polynomial = MPCPolynomial[TP](
            pid=self.pid,
            prg=self.prg,
            comms=self.comms,
            arithmetic=self.arithmetic)
        self.boolean = MPCBoolean[TP](
            pid=self.pid,
            prg=self.prg,
            comms=self.comms,
            arithmetic=self.arithmetic,
            polynomial=self.polynomial)
        self.fp = MPCFP[TP](
            pid=self.pid,
            prg=self.prg,
            comms=self.comms,
            arithmetic=self.arithmetic,
            polynomial=self.polynomial,
            boolean=self.boolean)
        self.optimizations = MPCOptimizations[TP](
            pid=self.pid,
            prg=self.prg,
            comms=self.comms,
            arithmetic=self.arithmetic,
            polynomial=self.polynomial)
    
    def reset_stats(self):
        self.comms.reset_stats()
        self.arithmetic.reset_stats()
        self.fp.reset_stats()
    
    def print_stats(self, file_stream = None):
        self.comms.print_stats(file_stream)
        self.arithmetic.print_stats(file_stream)
        self.fp.print_stats(file_stream)
    
    def done(self):
        self.comms.sync_parties()
        self.comms.clean_up()
        print(f'CP{self.pid} is done!')
    