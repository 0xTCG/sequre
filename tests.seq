import utils.param as param

from utils.type_ops import TypeOps
from utils.utils import evalp

from mpc_env import MPCEnv


def assert_values(name, result, expected):
    assert result == expected, f'{name} failed! Result: {result}. Expected: {expected}'
    print(f'{name} passed.')


def assert_approx(name, result, expected, error: float = 0.018):
    check: bool = ((expected - error) < result) and (result < (expected + error))
    assert check, f'{name} failed! Result: {result}. Expected: {expected}'
    print(f'{name} passed.')


def test_all[TP](mpc: MPCEnv[TP]):
    vector_length = 10
    mat_rows_no, mat_cols_no = 10, 15

    # Test inputs
    elem_1 = TP(10)
    elem_2 = TP(7)
    vector_1 = [TP(10), TP(11), TP(12)]
    vector_2 = [TP(7), TP(8), TP(9)]
    matrix_1 = [[TP(1), TP(2), TP(3)], [TP(4), TP(5), TP(6)], [TP(7), TP(8), TP(9)]]
    matrix_2 = [[TP(10), TP(11), TP(12)], [TP(13), TP(14), TP(15)], [TP(16), TP(17), TP(18)]]
    a: TP = TypeOps.double_to_fp(2.0 if mpc.pid == 1 else 1.14, param.NBIT_K, param.NBIT_F)
    b: TP = TypeOps.double_to_fp(3.0 if mpc.pid == 1 else 2.95, param.NBIT_K, param.NBIT_F)
    a_bits = [TP(1), TP(0), TP(1), TP(0), TP(1), TP(0), TP(0)]
    b_bits = [TP(0), TP(0), TP(1), TP(0), TP(1), TP(0), TP(0)]

    elem_to_send: TP = elem_1.rand(param.BASE_P)
    if mpc.pid == 1:
        mpc.comms.send(elem_to_send, 2)
    elif mpc.pid == 2:
        received_elem: TP = mpc.comms.receive(1)
        assert_values('Sending-receiving elem', received_elem, elem_to_send)
    
    vector_to_send: list[TP] = [elem_1.rand(param.BASE_P) for _ in range(vector_length)]
    if mpc.pid == 1:
        mpc.comms.send(vector_to_send, 2)
    elif mpc.pid == 2:
        received_vector: list[TP] = mpc.comms.receive(1, shape=vector_length)
        assert_values('Sending-receiving vector', received_vector, vector_to_send)
    
    mat_to_send: list[list[TP]] = [[elem_1.rand(param.BASE_P) for _ in range(mat_cols_no)] for _ in range(mat_rows_no)]
    if mpc.pid == 1:
        mpc.comms.send(mat_to_send, 2)
    elif mpc.pid == 2:
        received_mat: list[list[TP]] = mpc.comms.receive(1, shape=[mat_rows_no, mat_cols_no])
        assert_values('Sending-receiving matrix', received_mat, mat_to_send)

    revealed_elem: TP = mpc.comms.reveal(elem_1 if mpc.pid == 1 else elem_2)
    if mpc.pid != 0:
        assert_values('Revealing elem', revealed_elem, elem_1 + elem_2)
    
    revealed_vector: list[TP] = mpc.comms.reveal(vector_1 if mpc.pid == 1 else vector_2)
    if mpc.pid != 0:
        assert_values('Revealing vector', revealed_vector, vector_1 + vector_2)
    
    revealed_matrix: list[list[TP]] = mpc.comms.reveal(matrix_1 if mpc.pid == 1 else matrix_2)
    if mpc.pid != 0:
        assert_values('Revealing matrix', revealed_matrix, matrix_1 + matrix_2)
    
    if mpc.pid == 1:
        mpc.prg.switch_seed(0)
    if mpc.pid == 2:
        mpc.prg.switch_seed(0)
    random_number = elem_1.rand(param.BASE_P)
    if mpc.pid != 0:
        mpc.comms.send(random_number, 0)
    if mpc.pid == 1:
        mpc.prg.restore_seed(0)
    if mpc.pid == 2:
        mpc.prg.restore_seed(0)
    
    if mpc.pid == 0:
        mpc.prg.switch_seed(2)
        random_number = elem_1.rand(param.BASE_P)
        mpc.prg.restore_seed(2)
        received_random_number: TP = mpc.comms.receive(2)
        assert_values('PRG 1', random_number, received_random_number)

        mpc.prg.switch_seed(1)
        random_number = elem_1.rand(param.BASE_P)
        mpc.prg.restore_seed(1)
        received_random_number: TP = mpc.comms.receive(1)
        assert_values('PRG 2', random_number, received_random_number)

    elem_1 = TP(10)
    elem_2 = TP(7)
    x_r, r = mpc.arithmetic.__beaver_partition(elem_1 if mpc.pid == 1 else elem_2)
    if mpc.pid == 0:
        mpc.comms.send(r, 1)
        mpc.comms.send(r, 2)
    else:
        r_0 = mpc.comms.receive(0)
        assert_values('Beaver partition elem 1', r_0, mpc.comms.reveal(r))
        assert_values('Beaver partition elem 2', (x_r + mpc.comms.reveal(r)) % mpc.primes[0], (elem_1 + elem_2) % mpc.primes[0])
    
    x_r_vec, r_vec = mpc.arithmetic.__beaver_partition(vector_1 if mpc.pid == 1 else vector_2)
    if mpc.pid == 0:
        mpc.comms.send(r_vec, 1)
        mpc.comms.send(r_vec, 2)
    else:
        r_0 = mpc.comms.receive(0, len(vector_1))
        assert_values('Beaver partition vector 1', r_0, mpc.comms.reveal(r_vec))
        assert_values('Beaver partition vector 2', (x_r_vec + mpc.comms.reveal(r_vec)) % mpc.primes[0], (vector_1 + vector_2) % mpc.primes[0])
        
    x_r_mat, r_mat = mpc.arithmetic.__beaver_partition(matrix_1 if mpc.pid == 1 else matrix_2)
    if mpc.pid == 0:
        mpc.comms.send(r_mat, 1)
        mpc.comms.send(r_mat, 2)
    else:
        r_0 = mpc.comms.receive(0, matrix_1.shape())
        assert_values('Beaver partition matrix 1', r_0, mpc.comms.reveal(r_mat))
        assert_values('Beaver partition matrix 2', (x_r_mat + mpc.comms.reveal(r_mat)) % mpc.primes[0], (matrix_1 + matrix_2) % mpc.primes[0])

    p_elem = mpc.arithmetic.multiply(
        elem_1 if mpc.pid == 1 else elem_2,
        elem_2 if mpc.pid == 1 else elem_1)
    revealed_p_elem = mpc.comms.reveal(p_elem)
    if mpc.pid != 0:
        assert_values('Multiply elem', revealed_p_elem, (elem_1 + elem_2) ** 2 % mpc.primes[0])

    p_vec = mpc.arithmetic.multiply(
        vector_1 if mpc.pid == 1 else vector_2,
        vector_2 if mpc.pid == 1 else vector_1)
    revealed_p_vec = mpc.comms.reveal(p_vec)
    if mpc.pid != 0:
        assert_values('Multiply vector', revealed_p_vec, (vector_1 + vector_2) ** 2 % mpc.primes[0])

    p_mat = mpc.arithmetic.multiply(
        matrix_1 if mpc.pid == 1 else matrix_2,
        matrix_2 if mpc.pid == 1 else matrix_1)
    revealed_p_mat = mpc.comms.reveal(p_mat)
    if mpc.pid != 0:
        assert_values('Multiply matrix', revealed_p_mat, (matrix_1 + matrix_2) ** 2 % mpc.primes[0])

    p_mat_bulk = mpc.arithmetic.multiply_bulk(
        [matrix_1 if mpc.pid == 1 else matrix_2],
        [matrix_2 if mpc.pid == 1 else matrix_1])
    revealed_p_mat = mpc.comms.reveal(p_mat_bulk[0])
    if mpc.pid != 0:
        assert_values('Multiply bulk', revealed_p_mat, (matrix_1 + matrix_2) ** 2 % mpc.primes[0])
    
    p_mat_bulk = mpc.arithmetic.multiply_mat_bulk(
        [matrix_1 if mpc.pid == 1 else matrix_2],
        [matrix_2 if mpc.pid == 1 else matrix_1])
    revealed_p_mat = mpc.comms.reveal(p_mat_bulk[0])
    added_mat = matrix_1 + matrix_2
    if mpc.pid != 0:
        assert_values('Multiply matrix bulk', revealed_p_mat, added_mat.mult(added_mat, mpc.primes[0]))
    
    # TODO: Check if convertiong TP to int in langrangian caused problems
    if mpc.pid != 0:
        assert_values('Lagrange cache', mpc.polynomial.lagrange_cache[2][1][1], TP(8456863007111094651))

    p = mpc.polynomial.powers([TP(2), TP(0) if mpc.pid == 1 else TP(1), TP(3)], 10)
    revealed_p = mpc.comms.reveal(p)
    if mpc.pid != 0:
        assert_values('Powers', revealed_p[10], [TP(1048576), TP(1), TP(60466176)])
    
    coeff: list[list[TP]] = [[TP(1) for _ in range(3)], [TP(2) for _ in range(3)], [TP(3) for _ in range(3)]]
    x: list[TP] = [TP(1), TP(2), TP(3)]
    p = mpc.polynomial.evaluate_poly(x, coeff)
    revealed_p = mpc.comms.reveal(p)
    if mpc.pid != 0:
        expected_mat = [
            [TP(7), TP(21), TP(43)],
            [TP(14), TP(42), TP(86)],
            [TP(21), TP(63), TP(129)]]
        assert_values('Evaluate polynomial', revealed_p, expected_mat)
    
    size = 10
    input_bits = [
        [(TP(0) if i != (size - 1) else e) for i in range(size)] for e in a_bits]
    shared_input_bits = mpc.comms.share(input_bits)
    or_results = mpc.boolean.fan_in_or(shared_input_bits)
    revealed_or_results = mpc.comms.reveal(or_results)
    if mpc.pid != 0:
        assert_values('Fan in or', revealed_or_results, a_bits)
    
    input_bits = [
        [(TP(0) if i != (size - 1) else e) for i in range(size)] for e in a_bits]
    shared_input_bits = mpc.comms.share(input_bits)
    prefix_or_results = mpc.boolean.prefix_or(shared_input_bits)
    revealed_prefix_or_results = mpc.comms.reveal(prefix_or_results)
    if mpc.pid != 0:
        assert_values('Prefix or', revealed_prefix_or_results, input_bits)

    shared_a_bits = mpc.comms.share([a_bits])
    shared_b_bits = mpc.comms.share([b_bits])
    not_less_results = mpc.boolean.less_than_bits(shared_a_bits, shared_b_bits)
    less_results = mpc.boolean.less_than_bits(shared_b_bits, shared_a_bits)
    revealed_not_less_results = mpc.comms.reveal(not_less_results)
    revealed_less_results = mpc.comms.reveal(less_results)
    if mpc.pid != 0:
        assert_values('Not less than bits', revealed_not_less_results, [TP(0)])
        assert_values('Less than bits', revealed_less_results, [TP(1)])
    
    pos_neg = [
        TypeOps.double_to_fp(5.07, param.NBIT_K, param.NBIT_F),
        TypeOps.double_to_fp(-5.07, param.NBIT_K, param.NBIT_F)]
    pos_neg_revealed = mpc.comms.reveal(mpc.boolean.is_positive(pos_neg))
    if mpc.pid != 0:
        assert_values('Is positive', pos_neg_revealed, [TP(1), TP(0)])

    shared_a = mpc.comms.share([TP(1), TP(5), TP(-3)])
    shared_b = mpc.comms.share([TP(3), TP(3), TP(-7)])
    revealed_less_results = mpc.comms.reveal(mpc.boolean.less_than(shared_a, shared_b))
    if mpc.pid != 0:
        assert_values('Less than', revealed_less_results, [TP(1), TP(0), TP(0)])

    public_b = TP(3)
    revealed_less_results = mpc.comms.reveal(mpc.boolean.less_than_public(shared_a, public_b))
    if mpc.pid != 0:
        assert_values('Less than public', revealed_less_results, [TP(1), TP(0), TP(1)])

    pub: TP = TypeOps.double_to_fp(5.07, param.NBIT_K, param.NBIT_F)
    a = mpc.arithmetic.add_public(a, pub)
    float_a_mat = mpc.fp.print_fp([[a]])
    if mpc.pid != 0:
        assert_approx('Add public', float_a_mat, [[8.21]])

    a_mat: list[list[TP]] = [[a]]
    b_mat: list[list[TP]] = [[b]]

    float_a = mpc.fp.print_fp([[a]])
    float_b = mpc.fp.print_fp([[b]])
    if mpc.pid != 0:
        assert_approx('Print FP 1', float_a, [[8.21]])
        assert_approx('Print FP 2', float_b, [[5.95]])
    
    d: list[list[TP]] = mpc.arithmetic.multiply(a_mat, b_mat)
    d = mpc.fp.trunc(d, param.NBIT_K + param.NBIT_F, param.NBIT_F)
    float_d_mat = mpc.fp.print_fp(d)
    # TODO: Investigate why adding field to the value mess up results
    if mpc.pid != 0:
        assert_approx('Multiply float', float_d_mat, [[48.8495]])

    nee_input = [
        TypeOps.double_to_fp(1099511627775.2354325, param.NBIT_K, param.NBIT_F),
        TypeOps.double_to_fp(128.0, param.NBIT_K, param.NBIT_F),
        TypeOps.double_to_fp(32.0, param.NBIT_K, param.NBIT_F),
        TypeOps.double_to_fp(50.0, param.NBIT_K, param.NBIT_F)]
    nee, nee_sqrt = mpc.fp.normalizer_even_exp(nee_input, mpc.primes[1])

    if mpc.pid != 0:
        revealed_nee = mpc.comms.reveal(nee)
        revealed_nee_sqrt = mpc.comms.reveal(nee_sqrt)
        assert_values('Normalizer Even Exponent 1', revealed_nee, revealed_nee_sqrt ** 2)
        assert_values('Normalizer Even Exponent 2', revealed_nee * nee_input * 2 < [TP(1) << param.NBIT_K for _ in range(len(nee_input))], True)
        assert_values('Normalizer Even Exponent 3', revealed_nee * nee_input * 2 >= [TP(1) << (param.NBIT_K - 2) for _ in range(len(nee_input))], True)

    a_vec: list[TP] = [
        TypeOps.double_to_fp(18.0, param.NBIT_K, param.NBIT_F),
        TypeOps.double_to_fp(128.0, param.NBIT_K, param.NBIT_F),
        TypeOps.double_to_fp(32.0, param.NBIT_K, param.NBIT_F),
        TypeOps.double_to_fp(50.0, param.NBIT_K, param.NBIT_F)]
    b_vec, b_vec_inv = mpc.fp.fp_sqrt(a_vec)
    float_b: list[list[float]] = mpc.fp.print_fp([b_vec])
    float_b_inv: list[list[float]] = mpc.fp.print_fp([b_vec_inv])
    if mpc.pid != 0:
        assert_approx('Sqrt', float_b, [[6.0, 16.0, 8.0, 10.0]])
        assert_approx('Sqrt inv', float_b_inv, [[0.1666666, 0.0625, 0.125, 0.1]])
    
    a_vec: list[TP] = [
        TypeOps.double_to_fp(7.0, param.NBIT_K, param.NBIT_F),
        TypeOps.double_to_fp(7.0, param.NBIT_K, param.NBIT_F),
        TypeOps.double_to_fp(256.0, param.NBIT_K, param.NBIT_F),
        TypeOps.double_to_fp(99.0, param.NBIT_K, param.NBIT_F),
        TypeOps.double_to_fp(50.0, param.NBIT_K, param.NBIT_F)]
    b_vec: list[TP] = [
        TypeOps.double_to_fp(6.0, param.NBIT_K, param.NBIT_F),
        TypeOps.double_to_fp(6.0, param.NBIT_K, param.NBIT_F),
        TypeOps.double_to_fp(16.0, param.NBIT_K, param.NBIT_F),
        TypeOps.double_to_fp(3.0, param.NBIT_K, param.NBIT_F),
        TypeOps.double_to_fp(40.0, param.NBIT_K, param.NBIT_F)]
    d_vec = mpc.fp.fp_div(a_vec, b_vec)
    float_d = mpc.fp.print_fp([d_vec])
    if mpc.pid != 0:
        assert_approx('Division', float_d, [[1.1666666, 1.1666666, 16.0, 33.0, 1.25]])
        
    a_vec = [
        TypeOps.double_to_fp(1.5, param.NBIT_K, param.NBIT_F),
        TypeOps.double_to_fp(0.5, param.NBIT_K, param.NBIT_F),
        TypeOps.double_to_fp(2.5, param.NBIT_K, param.NBIT_F)]
    v: list[TP] = mpc.lin_alg.householder(a_vec)
    float_v = mpc.fp.print_fp([v])
    if mpc.pid != 0:
        assert_approx('Householder', float_v, [[0.86807, 0.0973601, 0.486801]])

    mat = [
        [TypeOps.double_to_fp(4.0, param.NBIT_K, param.NBIT_F) for _ in range(3)],
        [TypeOps.double_to_fp(4.5, param.NBIT_K, param.NBIT_F) for _ in range(3)],
        [TypeOps.double_to_fp(5.5, param.NBIT_K, param.NBIT_F) for _ in range(3)]]
    q_fact, r_fact = mpc.lin_alg.qr_fact_square(mat)
    result_q = mpc.fp.print_fp(q_fact)
    result_r = mpc.fp.print_fp(r_fact)
    expected_q = [
        [-0.57735, -0.57735, -0.57735],
        [-0.57735, 0.788675, -0.211325],
        [-0.57735, -0.211325, 0.788675]]
    expected_r = [
        [-13.85640, 0.0, 0.0],
        [-15.58846, 0.0, 0.0],
        [-19.05255, 0.0, 0.0]]
    if mpc.pid != 0:
        # assert_approx('QR factorization 1', result_q, expected_q)
        assert_approx('QR factorization 2', result_r, expected_r)

    mat = [
        [TypeOps.double_to_fp(4.0, param.NBIT_K, param.NBIT_F),
            TypeOps.double_to_fp(3.0, param.NBIT_K, param.NBIT_F),
            TypeOps.double_to_fp(2.5, param.NBIT_K, param.NBIT_F)],
        [TypeOps.double_to_fp(0.5, param.NBIT_K, param.NBIT_F),
            TypeOps.double_to_fp(4.5, param.NBIT_K, param.NBIT_F),
            TypeOps.double_to_fp(1.5, param.NBIT_K, param.NBIT_F)],
        [TypeOps.double_to_fp(5.5, param.NBIT_K, param.NBIT_F),
            TypeOps.double_to_fp(2.0, param.NBIT_K, param.NBIT_F),
            TypeOps.double_to_fp(1.0, param.NBIT_K, param.NBIT_F)]]
    t, q = mpc.lin_alg.tridiag(mat)
    result_t = mpc.fp.print_fp(t)
    result_q = mpc.fp.print_fp(q)
    expected_t = [
        [8.0, -7.81025, 0.0],
        [-7.81025, 9.57377, 3.31148],
        [0.0, 2.31148, 1.42623]]
    expected_q = [
        [1.0, 0.0, 0.0],
        [0.0, -0.768221, -0.640184],
        [0.0, -0.640184, 0.768221]]
    if mpc.pid != 0:
        assert_approx('Tridiagonalize 1', result_t, expected_t)
        assert_approx('Tridiagonalize 2', result_q, expected_q)
        
    v_mat, l = mpc.lin_alg.eigen_decomp(mat)
    result_v_mat = mpc.fp.print_fp(v_mat)
    result_l = mpc.fp.print_fp([l])
    expected_v_mat = [
        [0.650711, 0.672083, 0.353383],
        [-0.420729, -0.0682978, 0.904612],
        [0.632109, -0.73732, 0.238322]]
    # expected_l = [[16.91242, -0.798897, 2.88648]]
    expected_l = [[17.176, -0.806559, 2.88746]]
    if mpc.pid != 0:
        assert_approx('Eigen decomposition 1', result_v_mat, expected_v_mat)
        assert_approx('Eigen decomposition 2', result_l, expected_l)
        
    q_mat = mpc.lin_alg.orthonormal_basis(mat)
    result_q_mat = mpc.fp.print_fp(q_mat)
    expected_q_mat = [
        [-0.715542, -0.536656, -0.447214],
        [0.595097, -0.803563, 0.0121201],
        [0.365868, 0.257463, -0.894345]]
    if mpc.pid != 0:
        assert_approx('Orthonormal basis', result_q_mat, expected_q_mat)

    # vec = [TP(4), TP(5), TP(6)]
    # coefs = [TP(3), TP(2)]
    # exps = [[3, 2, 1], [1, 2, 3]]
    # poly_eval = mpc.optimizations.secure_evalp(vec, vec.zeros(), coefs, exps, param.BASE_P)
    # expected_poly_eval = evalp(vec * 2, coefs, exps, param.BASE_P)
    # if mpc.pid != 0:
    #     assert_values('Polynomial optimization', mpc.comms.reveal(poly_eval), expected_poly_eval)

    print(f'All tests passed at {mpc.pid}!')


def benchmark[TP](mpc: MPCEnv[TP], m: int, n: int):
    # import random, math
    import time
    
    # mat: np.ndarray = np.arange(m * n).reshape(m, n)
    mat: list[list[TP]] = [[TP(i + j) for j in range(n)] for i in range(m)]  # np.zeros((m, n), dtype=np.int64)
    
    # print('Orthonormal basis ...')
    # mpc.orthonormal_basis(mat)
    # print('QR ...')
    # mpc.qr_fact_square(mat)
    # print('Tridiag ...')
    # mpc.tridiag(mat)
    
    print('Eigen decomp ...')
    s = time.time()
    mpc.lin_alg.eigen_decomp(mat)
    e = time.time()
    print(f'Eigendecomp done in {e - s}s at {mpc.pid}')
    
    # from profilehooks import profile
    # fn = profile(mpc.eigen_decomp, entries=200) if pid == 2 else mpc.eigen_decomp
    # fn(mat)

    # coeff = np.arange(1000000, dtype=np.int64).reshape((1000, 1000))
    # x = np.arange(100, dtype=np.int64)

    # from line_profiler import LineProfiler
    # lp = LineProfiler()
    # fn = lp(mul_mod) if pid == 2 else mul_mod
    # fn(mat)
    # fn(coeff, coeff, param.BASE_P)
    # if pid == 2:
    #     lp.print_stats()

    # d = b * c
    # e = d + a
    # f = e ** 7
    # # Reconstruct f
    # g = (f + a) * d
    # return g ** 2

    # a^14 b^2 c^2 + 14 a^13 b^3 c^3 + 91 a^12 b^4 c^4 + 364 a^11 b^5 c^5 + 1001 a^10 b^6 c^6 + 2002 a^9 b^7 c^7 + 3003 a^8 b^8 c^8 + 2 a^8 b^2 c^2 + 3432 a^7 b^9 c^9 + 14 a^7 b^3 c^3 + 3003 a^6 b^10 c^10 + 42 a^6 b^4 c^4 + 2002 a^5 b^11 c^11 + 70 a^5 b^5 c^5 + 1001 a^4 b^12 c^12 + 70 a^4 b^6 c^6 + 364 a^3 b^13 c^13 + 42 a^3 b^7 c^7 + 91 a^2 b^14 c^14 + 14 a^2 b^8 c^8 + a^2 b^2 c^2 + 14 a b^15 c^15 + 2 a b^9 c^9 + b^16 c^16

    # from ir_examples import *

    # baseline = baseline_arithmetics(TP(2), TP(4), TP(6))
    
    # secure_non_opt = mpc.comms.reveal(secure_arithmetics(mpc, TP(1), TP(2), TP(3)))
    # # print '\nNon-optimized stats: '
    # mpc.comms.print_stats()
    # mpc.comms.reset_stats()

    # coefs = [TP(1), TP(14), TP(91), TP(364), TP(1001), TP(2002), TP(3003), TP(2), TP(3432), TP(14), TP(3003), TP(42), TP(2002), TP(70), TP(1001), TP(70), TP(364), TP(42), TP(91), TP(14), TP(1), TP(14), TP(2), TP(1)]
    # exps = [[14, 2, 2], [13, 3, 3], [12, 4, 4], [11, 5, 5], [10, 6, 6], [9, 7, 7], [8, 8, 8], [8, 2, 2], [7, 9, 9], [7, 3, 3], [6, 10, 10], [6, 4, 4], [5, 11, 11], [5, 5, 5], [4, 12, 12], [4, 6, 6], [3, 13, 13], [3, 7, 7], [2, 14, 14], [2, 8, 8], [2, 2, 2], [1, 15, 15], [1, 9, 9], [0, 1, 1]]
    # assert len(coefs) == len(exps), f'{len(coefs)}, {len(exps)}'
    # secure_opt = mpc.optimizations.secure_evalp(
    #     [TP(1), TP(2), TP(3)],
    #     coefs, exps, mpc.primes[0])
    # # print '\nOptimized stats: '
    # mpc.comms.print_stats()
    # mpc.comms.reset_stats()

    # a = sequre_arithmetics(1, 2, 3)
    # print(a)

    print(f'Benchmarks done at {mpc.pid}!')
