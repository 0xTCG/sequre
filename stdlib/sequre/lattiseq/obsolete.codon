"""
The list of obsolete methods.
Kept for testing only.
"""
from experimental.simd import Vec

from ring import Ring, ModupParams, _mm_mred, bred_add, mred_constant, invbutterfly
from ..utils.utils import zeros_vec
from ..utils.constants import SIMD_LANE_SIZE


# ReduceVec returns p2 = p1 mod qi.
def reduce_vec(p1, p2, qi, bred_param):
    for j in range(len(p1)):
        p2[j] = bred_add(p1[j], qi, bred_param)


# butterfly computes X, Y = U + v * Psi, U - v * Psi mod q.
def butterfly(u, v, psi, two_q, four_q, q, q_inv):
	if u >= four_q: u -= four_q
	v = mred_constant(v, psi, q, q_inv)
	return u + v, u + two_q - v


def _mm_butterfly_inplace_x2_old(u: Vec[u64, 4], ntt_psi: u64, two_q: u64, four_q: u64, q: u64, q_inv: u64) -> Vec[u64, 4]:
    u_list = u.scatter()
    u_list[0], u_list[2] = butterfly(u_list[0], u_list[2], ntt_psi, two_q, four_q, q, q_inv)
    u_list[1], u_list[3] = butterfly(u_list[1], u_list[3], ntt_psi, two_q, four_q, q, q_inv)
    return Vec[u64, 4](u_list)


def _mm_butterfly_inplace_x1_old(u: Vec[u64, 4], ntt_psi_0: u64, ntt_psi_1: u64, two_q: u64, four_q: u64, q: u64, q_inv: u64) -> Vec[u64, 4]:
    u_list = u.scatter()
    u_list[0], u_list[1] = butterfly(u_list[0], u_list[1], ntt_psi_0, two_q, four_q, q, q_inv)
    u_list[2], u_list[3] = butterfly(u_list[2], u_list[3], ntt_psi_1, two_q, four_q, q, q_inv)
    return Vec[u64, 4](u_list)


# Caution, returns the values in [0, 2q-1]
def mult_sum(
        v: list[u64], y: list[list[u64]], nb_pi: int, pj: u64,
        q_inv: u64, vtimesqmodp: list[u64], qoverqimodp: list[u64], lane_size: Static[int]):
    rlo = zeros_vec(lane_size, TP=u64)
    rhi = zeros_vec(lane_size, TP=u64)
    res = zeros_vec(lane_size, TP=u64)
	
    # Accumulates the sum on uint128 and does a lazy montgomery reduction at the end
    for i in range(nb_pi):
        for idx in range(lane_size):
            mhi, mlo = y[idx][i].mul_overflow_u64(qoverqimodp[i])
            rlo[idx], c = rlo[idx].add_overflow(mlo)
            rhi[idx] += mhi + c

    for idx in range(lane_size):
        hhi, _ = (rlo[idx] * q_inv).mul_overflow_u64(pj)
        res[idx] = rhi[idx] - hhi + pj + vtimesqmodp[int(v[idx])]

    return res

def reconstruct_rns(
        index: int, x: int, p: list[list[u64]], q: list[u64],
        q_inv: list[u64], qb_mont: list[u64]) -> tuple[list[u64], list[list[u64]]]:
    v = Vec[f64, SIMD_LANE_SIZE](0.0)
    y = list[Vec[u64, SIMD_LANE_SIZE]](32)

    for i in range(index):
        # TODO: Instantiate _mm_* vars once at param setup stage upstream
        _mm_p = Vec[u64, SIMD_LANE_SIZE](p[i].arr.ptr + x)
        _mm_q = Vec[u64, SIMD_LANE_SIZE](q[i])
        _mm_q_inv = Vec[u64, SIMD_LANE_SIZE](q_inv[i])
        _mm_qb_mont = Vec[u64, SIMD_LANE_SIZE](qb_mont[i])

        y.append(_mm_mred(_mm_p, _mm_qb_mont, _mm_q, _mm_q_inv))

        v = v + (y[i] / _mm_q)
    
    return v.to_u64().scatter(), y.scatter().transpose()


# ModUpExact takes p1 mod q and switches its basis to P, returning the result on p2.
# Caution, returns the values in [0, 2q-1]
def mod_up_exact(p1: list[list[u64]], p2: list[list[u64]], ring_q: Ring, ring_p: Ring, params: ModupParams):
    q = ring_q.modulus
    p = ring_p.modulus
    mred_params_q = ring_q.mred_params
    mred_params_p = ring_p.mred_params
    vtimesqmodp = params.vtimesqmodp
    qoverqiinvqi = params.qoverqiinvqi
    qoverqimodp = params.qoverqimodp

    # We loop over each coefficient and apply the basis extension
    for x in range(0, len(p1[0]), SIMD_LANE_SIZE):
        v, y = reconstruct_rns(len(p1), x, p1, q, mred_params_q, qoverqiinvqi)
        for j in range(len(p2)):
            p2[j][x:x + SIMD_LANE_SIZE] = mult_sum(v, y, len(p1), p[j], mred_params_p[j], vtimesqmodp[j], qoverqimodp[j], SIMD_LANE_SIZE)


# ntt_lazy computes the NTT on the input coefficients using the input parameters with output values in the range [0, 2q-1].
def ntt_lazy(coeffs_in: list[u64], coeffs_out: list[u64], n: int, ntt_psi: list[u64], q: u64, q_inv: u64):
    four_q = u64(4) * q
    two_q = u64(2) * q

    # Copy the result of the first round of butterflies on p2 with approximate reduction
    t = n >> 1
    F = ntt_psi[1]
    jx, jy = 0, t

    while jx <= t - 1:
        V = mred_constant(coeffs_in[jy + 0], F, q, q_inv)
        coeffs_out[jx + 0], coeffs_out[jy + 0] = coeffs_in[jx + 0] + V, coeffs_in[jx + 0] + two_q - V

        V = mred_constant(coeffs_in[jy + 1], F, q, q_inv)
        coeffs_out[jx + 1], coeffs_out[jy + 1] = coeffs_in[jx + 1] + V, coeffs_in[jx + 1] + two_q - V

        V = mred_constant(coeffs_in[jy + 2], F, q, q_inv)
        coeffs_out[jx + 2], coeffs_out[jy + 2] = coeffs_in[jx + 2] + V, coeffs_in[jx + 2] + two_q - V

        V = mred_constant(coeffs_in[jy + 3], F, q, q_inv)
        coeffs_out[jx + 3], coeffs_out[jy + 3] = coeffs_in[jx + 3] + V, coeffs_in[jx + 3] + two_q - V

        V = mred_constant(coeffs_in[jy + 4], F, q, q_inv)
        coeffs_out[jx + 4], coeffs_out[jy + 4] = coeffs_in[jx + 4] + V, coeffs_in[jx + 4] + two_q - V

        V = mred_constant(coeffs_in[jy + 5], F, q, q_inv)
        coeffs_out[jx + 5], coeffs_out[jy + 5] = coeffs_in[jx + 5] + V, coeffs_in[jx + 5] + two_q - V

        V = mred_constant(coeffs_in[jy + 6], F, q, q_inv)
        coeffs_out[jx + 6], coeffs_out[jy + 6] = coeffs_in[jx + 6] + V, coeffs_in[jx + 6] + two_q - V

        V = mred_constant(coeffs_in[jy + 7], F, q, q_inv)
        coeffs_out[jx + 7], coeffs_out[jy + 7] = coeffs_in[jx + 7] + V, coeffs_in[jx + 7] + two_q - V

        jx, jy = jx + 8, jy + 8
    
	# Continue the rest of the second to the n-1 butterflies on p2 with approximate reduction
    m = 2
    while m < n:
        reduce = (m.bitlen() & 1 == 1)
        t >>= 1

        if t >= 8:
            for i in range(m):
                j1 = (i * t) << 1
                j2 = j1 + t - 1
                F = ntt_psi[m + i]

                if reduce:
                    jx, jy = j1, j1 + t
                    while jx <= j2:
                        coeffs_out[jx + 0], coeffs_out[jy + 0] = butterfly(coeffs_out[jx + 0], coeffs_out[jy + 0], F, two_q, four_q, q, q_inv)
                        coeffs_out[jx + 1], coeffs_out[jy + 1] = butterfly(coeffs_out[jx + 1], coeffs_out[jy + 1], F, two_q, four_q, q, q_inv)
                        coeffs_out[jx + 2], coeffs_out[jy + 2] = butterfly(coeffs_out[jx + 2], coeffs_out[jy + 2], F, two_q, four_q, q, q_inv)
                        coeffs_out[jx + 3], coeffs_out[jy + 3] = butterfly(coeffs_out[jx + 3], coeffs_out[jy + 3], F, two_q, four_q, q, q_inv)
                        coeffs_out[jx + 4], coeffs_out[jy + 4] = butterfly(coeffs_out[jx + 4], coeffs_out[jy + 4], F, two_q, four_q, q, q_inv)
                        coeffs_out[jx + 5], coeffs_out[jy + 5] = butterfly(coeffs_out[jx + 5], coeffs_out[jy + 5], F, two_q, four_q, q, q_inv)
                        coeffs_out[jx + 6], coeffs_out[jy + 6] = butterfly(coeffs_out[jx + 6], coeffs_out[jy + 6], F, two_q, four_q, q, q_inv)
                        coeffs_out[jx + 7], coeffs_out[jy + 7] = butterfly(coeffs_out[jx + 7], coeffs_out[jy + 7], F, two_q, four_q, q, q_inv)

                        jx, jy = jx + 8, jy + 8
                else:
                    jx, jy = j1, j1 + t
                    while jx <= j2:
                        V = mred_constant(coeffs_out[jy + 0], F, q, q_inv)
                        coeffs_out[jx + 0], coeffs_out[jy + 0] = coeffs_out[jx + 0]+V, coeffs_out[jx + 0]+two_q-V

                        V = mred_constant(coeffs_out[jy + 1], F, q, q_inv)
                        coeffs_out[jx + 1], coeffs_out[jy + 1] = coeffs_out[jx + 1]+V, coeffs_out[jx + 1]+two_q-V

                        V = mred_constant(coeffs_out[jy + 2], F, q, q_inv)
                        coeffs_out[jx + 2], coeffs_out[jy + 2] = coeffs_out[jx + 2]+V, coeffs_out[jx + 2]+two_q-V

                        V = mred_constant(coeffs_out[jy + 3], F, q, q_inv)
                        coeffs_out[jx + 3], coeffs_out[jy + 3] = coeffs_out[jx + 3]+V, coeffs_out[jx + 3]+two_q-V

                        V = mred_constant(coeffs_out[jy + 4], F, q, q_inv)
                        coeffs_out[jx + 4], coeffs_out[jy + 4] = coeffs_out[jx + 4]+V, coeffs_out[jx + 4]+two_q-V

                        V = mred_constant(coeffs_out[jy + 5], F, q, q_inv)
                        coeffs_out[jx + 5], coeffs_out[jy + 5] = coeffs_out[jx + 5]+V, coeffs_out[jx + 5]+two_q-V

                        V = mred_constant(coeffs_out[jy + 6], F, q, q_inv)
                        coeffs_out[jx + 6], coeffs_out[jy + 6] = coeffs_out[jx + 6]+V, coeffs_out[jx + 6]+two_q-V

                        V = mred_constant(coeffs_out[jy + 7], F, q, q_inv)
                        coeffs_out[jx + 7], coeffs_out[jy + 7] = coeffs_out[jx + 7]+V, coeffs_out[jx + 7]+two_q-V

                        jx, jy = jx+8, jy+8
        elif t == 4:
            if reduce:
                i, j1 = m, 0
                while i < 2 * m:
                    coeffs_out[j1 + 0], coeffs_out[j1 + 4] = butterfly(coeffs_out[j1 + 0], coeffs_out[j1 + 4], ntt_psi[i + 0], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 1], coeffs_out[j1 + 5] = butterfly(coeffs_out[j1 + 1], coeffs_out[j1 + 5], ntt_psi[i + 0], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 2], coeffs_out[j1 + 6] = butterfly(coeffs_out[j1 + 2], coeffs_out[j1 + 6], ntt_psi[i + 0], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 3], coeffs_out[j1 + 7] = butterfly(coeffs_out[j1 + 3], coeffs_out[j1 + 7], ntt_psi[i + 0], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 8], coeffs_out[j1 + 12] = butterfly(coeffs_out[j1 + 8], coeffs_out[j1 + 12], ntt_psi[i + 1], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 9], coeffs_out[j1 + 13] = butterfly(coeffs_out[j1 + 9], coeffs_out[j1 + 13], ntt_psi[i + 1], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 10], coeffs_out[j1 + 14] = butterfly(coeffs_out[j1 + 10], coeffs_out[j1 + 14], ntt_psi[i + 1], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 11], coeffs_out[j1 + 15] = butterfly(coeffs_out[j1 + 11], coeffs_out[j1 + 15], ntt_psi[i + 1], two_q, four_q, q, q_inv)

                    i, j1 = i + 2, j1 + 4 * t
            else:
                i, j1 = m, 0
                while i < 2 * m:
                    V = mred_constant(coeffs_out[j1 + 4], ntt_psi[i + 0], q, q_inv)
                    coeffs_out[j1 + 0], coeffs_out[j1 + 4] = coeffs_out[j1 + 0]+V, coeffs_out[j1 + 0]+two_q-V

                    V = mred_constant(coeffs_out[j1 + 5], ntt_psi[i + 0], q, q_inv)
                    coeffs_out[j1 + 1], coeffs_out[j1 + 5] = coeffs_out[j1 + 1]+V, coeffs_out[j1 + 1]+two_q-V

                    V = mred_constant(coeffs_out[j1 + 6], ntt_psi[i + 0], q, q_inv)
                    coeffs_out[j1 + 2], coeffs_out[j1 + 6] = coeffs_out[j1 + 2]+V, coeffs_out[j1 + 2]+two_q-V

                    V = mred_constant(coeffs_out[j1 + 7], ntt_psi[i + 0], q, q_inv)
                    coeffs_out[j1 + 3], coeffs_out[j1 + 7] = coeffs_out[j1 + 3]+V, coeffs_out[j1 + 3]+two_q-V

                    V = mred_constant(coeffs_out[j1 + 12], ntt_psi[i + 1], q, q_inv)
                    coeffs_out[j1 + 8], coeffs_out[j1 + 12] = coeffs_out[j1 + 8]+V, coeffs_out[j1 + 8]+two_q-V

                    V = mred_constant(coeffs_out[j1 + 13], ntt_psi[i + 1], q, q_inv)
                    coeffs_out[j1 + 9], coeffs_out[j1 + 13] = coeffs_out[j1 + 9]+V, coeffs_out[j1 + 9]+two_q-V

                    V = mred_constant(coeffs_out[j1 + 14], ntt_psi[i + 1], q, q_inv)
                    coeffs_out[j1 + 10], coeffs_out[j1 + 14] = coeffs_out[j1 + 10]+V, coeffs_out[j1 + 10]+two_q-V

                    V = mred_constant(coeffs_out[j1 + 15], ntt_psi[i + 1], q, q_inv)
                    coeffs_out[j1 + 11], coeffs_out[j1 + 15] = coeffs_out[j1 + 11]+V, coeffs_out[j1 + 11]+two_q-V

                    i, j1 = i + 2, j1 + 4 * t
        elif t == 2:
            if reduce:
                i, j1 = m, 0
                while i < 2 * m:
                    coeffs_out[j1 + 0], coeffs_out[j1 + 2] = butterfly(coeffs_out[j1 + 0], coeffs_out[j1 + 2], ntt_psi[i + 0], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 1], coeffs_out[j1 + 3] = butterfly(coeffs_out[j1 + 1], coeffs_out[j1 + 3], ntt_psi[i + 0], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 4], coeffs_out[j1 + 6] = butterfly(coeffs_out[j1 + 4], coeffs_out[j1 + 6], ntt_psi[i + 1], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 5], coeffs_out[j1 + 7] = butterfly(coeffs_out[j1 + 5], coeffs_out[j1 + 7], ntt_psi[i + 1], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 8], coeffs_out[j1 + 10] = butterfly(coeffs_out[j1 + 8], coeffs_out[j1 + 10], ntt_psi[i + 2], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 9], coeffs_out[j1 + 11] = butterfly(coeffs_out[j1 + 9], coeffs_out[j1 + 11], ntt_psi[i + 2], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 12], coeffs_out[j1 + 14] = butterfly(coeffs_out[j1 + 12], coeffs_out[j1 + 14], ntt_psi[i + 3], two_q, four_q, q, q_inv)
                    coeffs_out[j1 + 13], coeffs_out[j1 + 15] = butterfly(coeffs_out[j1 + 13], coeffs_out[j1 + 15], ntt_psi[i + 3], two_q, four_q, q, q_inv)

                    i, j1 = i+4, j1+8*t
            else:
                i, j1 = m, 0
                while i < 2 * m:
                    V = mred_constant(coeffs_out[j1 + 2], ntt_psi[i + 0], q, q_inv)
                    coeffs_out[j1 + 0], coeffs_out[j1 + 2] = coeffs_out[j1 + 0]+V, coeffs_out[j1 + 0]+two_q-V

                    V = mred_constant(coeffs_out[j1 + 3], ntt_psi[i + 0], q, q_inv)
                    coeffs_out[j1 + 1], coeffs_out[j1 + 3] = coeffs_out[j1 + 1]+V, coeffs_out[j1 + 1]+two_q-V

                    V = mred_constant(coeffs_out[j1 + 6], ntt_psi[i + 1], q, q_inv)
                    coeffs_out[j1 + 4], coeffs_out[j1 + 6] = coeffs_out[j1 + 4]+V, coeffs_out[j1 + 4]+two_q-V

                    V = mred_constant(coeffs_out[j1 + 7], ntt_psi[i + 1], q, q_inv)
                    coeffs_out[j1 + 5], coeffs_out[j1 + 7] = coeffs_out[j1 + 5]+V, coeffs_out[j1 + 5]+two_q-V

                    V = mred_constant(coeffs_out[j1 + 10], ntt_psi[i + 2], q, q_inv)
                    coeffs_out[j1 + 8], coeffs_out[j1 + 10] = coeffs_out[j1 + 8]+V, coeffs_out[j1 + 8]+two_q-V

                    V = mred_constant(coeffs_out[j1 + 11], ntt_psi[i + 2], q, q_inv)
                    coeffs_out[j1 + 9], coeffs_out[j1 + 11] = coeffs_out[j1 + 9]+V, coeffs_out[j1 + 9]+two_q-V

                    V = mred_constant(coeffs_out[j1 + 14], ntt_psi[i + 3], q, q_inv)
                    coeffs_out[j1 + 12], coeffs_out[j1 + 14] = coeffs_out[j1 + 12]+V, coeffs_out[j1 + 12]+two_q-V

                    V = mred_constant(coeffs_out[j1 + 15], ntt_psi[i + 3], q, q_inv)
                    coeffs_out[j1 + 13], coeffs_out[j1 + 15] = coeffs_out[j1 + 13]+V, coeffs_out[j1 + 13]+two_q-V

                    i, j1 = i + 4, j1 + 8 * t
        else:
            i, j1 = m, 0
            while i < 2 * m:
                coeffs_out[j1 + 0], coeffs_out[j1 + 1] = butterfly(coeffs_out[j1 + 0], coeffs_out[j1 + 1], ntt_psi[i + 0], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 2], coeffs_out[j1 + 3] = butterfly(coeffs_out[j1 + 2], coeffs_out[j1 + 3], ntt_psi[i + 1], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 4], coeffs_out[j1 + 5] = butterfly(coeffs_out[j1 + 4], coeffs_out[j1 + 5], ntt_psi[i + 2], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 6], coeffs_out[j1 + 7] = butterfly(coeffs_out[j1 + 6], coeffs_out[j1 + 7], ntt_psi[i + 3], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 8], coeffs_out[j1 + 9] = butterfly(coeffs_out[j1 + 8], coeffs_out[j1 + 9], ntt_psi[i + 4], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 10], coeffs_out[j1 + 11] = butterfly(coeffs_out[j1 + 10], coeffs_out[j1 + 11], ntt_psi[i + 5], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 12], coeffs_out[j1 + 13] = butterfly(coeffs_out[j1 + 12], coeffs_out[j1 + 13], ntt_psi[i + 6], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 14], coeffs_out[j1 + 15] = butterfly(coeffs_out[j1 + 14], coeffs_out[j1 + 15], ntt_psi[i + 7], two_q, four_q, q, q_inv)

                i, j1 = i + 8, j1 + 16

        m <<= 1


def ntt(coeffs_in: list[u64], coeffs_out: list[u64], n: int, ntt_psi: list[u64], q: u64, mred_param: u64, bred_param: u64):
    ntt_lazy(coeffs_in, coeffs_out, n, ntt_psi, q, mred_param)
    reduce_vec(coeffs_out, coeffs_out, q, bred_param)


def inv_ntt_core(coeffs_in, coeffs_out, n, ntt_psi_inv, q, q_inv):
    f = u64(0)

    # Copy the result of the first round of butterflies on p2 with approximate reduction
    t = 1
    h = n >> 1
    two_q = q << u64(1)
    four_q = q << u64(2)

    i, j = h, 0

    while i < 2 * h:
        for j1 in range(8):
            j2 = j + j1 * 2 
            coeffs_out[j2], coeffs_out[j2 + 1] = invbutterfly(
                coeffs_in[j2], coeffs_in[j2 + 1], ntt_psi_inv[i + j1], two_q, four_q, q, q_inv)
        i, j = i+8, j+16

    # Continue the rest of the second to the n-1 butterflies on p2 with approximate reduction
    t <<= 1
    m = n >> 1
    
    while m > 1:
        
        h = m >> 1

        if t >= 8:
            i, j1, j2 = 0, 0, t - 1
            
            while i < h:
                f = ntt_psi_inv[h + i]
                jx, jy = j1, j1 + t

                while jx <= j2:
                    for j in range(8):
                        coeffs_out[jx + j], coeffs_out[jy + j] = invbutterfly(
                            coeffs_out[jx + j], coeffs_out[jy + j], f, two_q, four_q, q, q_inv)
                    jx, jy = jx+8, jy+8
                
                i, j1, j2 = i + 1, j1 + 2 * t, j2 + 2 * t

        elif t == 4:
            i, j1 = h, 0
            while i < 2 * h:
                coeffs_out[j1], coeffs_out[j1 + 4] = invbutterfly(
                    coeffs_out[j1], coeffs_out[j1 + 4], ntt_psi_inv[i], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 1], coeffs_out[j1 + 5] = invbutterfly(
                    coeffs_out[j1 + 1], coeffs_out[j1 + 5], ntt_psi_inv[i], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 2], coeffs_out[j1 + 6] = invbutterfly(
                    coeffs_out[j1 + 2], coeffs_out[j1 + 6], ntt_psi_inv[i], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 3], coeffs_out[j1 + 7] = invbutterfly(
                    coeffs_out[j1 + 3], coeffs_out[j1 + 7], ntt_psi_inv[i], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 8], coeffs_out[j1 + 12] = invbutterfly(
                    coeffs_out[j1 + 8], coeffs_out[j1 + 12], ntt_psi_inv[i + 1], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 9], coeffs_out[j1 + 13] = invbutterfly(
                    coeffs_out[j1 + 9], coeffs_out[j1 + 13], ntt_psi_inv[i + 1], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 10], coeffs_out[j1 + 14] = invbutterfly(
                    coeffs_out[j1 + 10], coeffs_out[j1 + 14], ntt_psi_inv[i + 1], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 11], coeffs_out[j1 + 15] = invbutterfly(
                    coeffs_out[j1 + 11], coeffs_out[j1 + 15], ntt_psi_inv[i + 1], two_q, four_q, q, q_inv)

                i, j1 = i + 2, j1 + 4 * t
        else:
            i, j1 = h, 0
            while i < 2 * h:
                coeffs_out[j1], coeffs_out[j1 + 2] = invbutterfly(
                    coeffs_out[j1], coeffs_out[j1 + 2], ntt_psi_inv[i], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 1], coeffs_out[j1 + 3] = invbutterfly(
                    coeffs_out[j1 + 1], coeffs_out[j1 + 3], ntt_psi_inv[i], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 4], coeffs_out[j1 + 6] = invbutterfly(
                    coeffs_out[j1 + 4], coeffs_out[j1 + 6], ntt_psi_inv[i + 1], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 5], coeffs_out[j1 + 7] = invbutterfly(
                    coeffs_out[j1 + 5], coeffs_out[j1 + 7], ntt_psi_inv[i + 1], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 8], coeffs_out[j1 + 10] = invbutterfly(
                    coeffs_out[j1 + 8], coeffs_out[j1 + 10], ntt_psi_inv[i + 2], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 9], coeffs_out[j1 + 11] = invbutterfly(
                    coeffs_out[j1 + 9], coeffs_out[j1 + 11], ntt_psi_inv[i + 2], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 12], coeffs_out[j1 + 14] = invbutterfly(
                    coeffs_out[j1 + 12], coeffs_out[j1 + 14], ntt_psi_inv[i + 3], two_q, four_q, q, q_inv)
                coeffs_out[j1 + 13], coeffs_out[j1 + 15] = invbutterfly(
                    coeffs_out[j1 + 13], coeffs_out[j1 + 15], ntt_psi_inv[i + 3], two_q, four_q, q, q_inv)

                i, j1 = i + 4, j1 + 8 * t

        t <<= 1
        m >>= 1
