from pickler import pickle, unpickle

from copy import copy

import rlwe, ringqp, ring, utils


# PCKSShare represents a party's share in the PCKS protocol.
class PCKSShare:
	value: list[ring.Poly]  # [2]

	def __setitem__(self, idx: int, val: ring.Poly):
		self.value[idx] = val
    
	def __getitem__(self, idx: int) -> ring.Poly:
		return self.value[idx]


# CKGShare is a struct storing the CKG protocol's share.
class CKGShare:
	value: ringqp.Poly


# RKGShare is a share in the RKG protocol.
class RKGShare:
	value: list[list[list[ringqp.Poly]]]  # [][][2]


# CKSShare is a type for the CKS protocol shares.
class CKSShare:
	value: ring.Poly

	def __pickle__(self, jar: Jar, pasteurized: bool):
		pickle(self.value, jar, pasteurized)
    
	def __unpickle__(jar: Jar, pasteurized: bool) -> CKSShare:
		return CKSShare(value=unpickle(jar, pasteurized, ring.Poly))
	
	def pickle_size(self) -> int:
		return self.value.pickle_size()


# RTGShare is represent a Party's share in the RTG protocol.
class RTGShare:
	value: list[list[ringqp.Poly]]


# CKSProtocol is the structure storing the parameters and and precomputations for the collective key-switching protocol.
class CKSProtocol:
	params: rlwe.Parameters
	sigma_smudging: float
	gaussian_sampler: ring.GaussianSampler
	basis_extender: ring.BasisExtender
	tmp_qp: ringqp.Poly
	tmp_delta: ring.Poly

	# AllocateShare allocates the shares of the CKSProtocol
	def _allocate_share(self, level: int) -> CKSShare:
		return CKSShare(self.params.ring_q.new_poly_lvl(level))
	
	# AggregateShares is the second part of the unique round of the CKSProtocol protocol. Upon receiving the j-1 elements each party computes :
	# [ctx[0] + sum((skInput_i - skOutput_i) * ctx[0] + e_i), ctx[1]]
	def _aggregate_shares(self, share1: CKSShare, share2: CKSShare, share_out: CKSShare):
		self.params.ring_q.add_lvl(share1.value.level(), share1.value, share2.value, share_out.value)
	
	# GenShare computes a party's share in the CKS protocol.
	# ct1 is the degree 1 element of the rlwe.Ciphertext to keyswitch, i.e. ct1 = rlwe.Ciphertext.value[1].
	# NTT flag for ct1 is expected to be set correctly.
	def _gen_share(self, sk_input: rlwe.SecretKey, sk_output: rlwe.SecretKey, c1: ring.Poly, share_out: CKSShare):
		ring_q = self.params.ring_q
		ring_p = self.params.ring_p
		ring_qp = self.params.ring_qp()

		level_q = min(share_out.value.level(), c1.level())
		level_p = self.params.p_count() - 1

		ring_q.sub_lvl(level_q, sk_input.value.q, sk_output.value.q, self.tmp_delta)

		ct1 = c1
		if not c1.is_ntt:
			c1.temp_vectorize()
			self.tmp_qp.q.temp_vectorize()
			ring_q._mm_ntt_lazy_lvl(level_q, c1, self.tmp_qp.q)
			c1.temp_scatter()
			self.tmp_qp.q.temp_scatter()
			ct1 = self.tmp_qp.q

		# a * (skIn - skOut) mod q
		ring_q.mul_coeffs_montgomery_constant_lvl(level_q, ct1, self.tmp_delta, share_out.value)

		if ring_p:
			# p * a * (skIn - skOut) mod QP (mod p = 0)
			ring_q.mul_scalar_bigint_lvl(level_q, share_out.value, ring_p.modulus_at_level[level_p], share_out.value)

		if not c1.is_ntt:
			# InvNTT(p * a * (skIn - skOut)) mod QP (mod p = 0)
			ring_q.inv_ntt_lazy_lvl(level_q, share_out.value, share_out.value)

			# Samples e in q
			self.gaussian_sampler.read_lvl(level_q, self.tmp_qp.q)

			if ring_p:
				# Extend e to p (assumed to have norm < qi)
				ring_qp.extend_basis_small_norm_and_center(self.tmp_qp.q, level_p, None, self.tmp_qp.p)

			# InvNTT(p * a * (skIn - skOut) + e) mod QP (mod p = e)
			ring_q.add_lvl(level_q, share_out.value, self.tmp_qp.q, share_out.value)

			if ring_p:
				# InvNTT(p * a * (skIn - skOut) + e) * (1/p) mod QP (mod p = e)
				self.basis_extender.mod_down_qp_to_q(level_q, level_p, share_out.value, self.tmp_qp.p, share_out.value)

		else:
			# Sample e in q
			self.gaussian_sampler.read_lvl(level_q, self.tmp_qp.q)

			if ring_p:
				# Extend e to p (assumed to have norm < qi)
				ring_qp.extend_basis_small_norm_and_center(self.tmp_qp.q, level_p, None, self.tmp_qp.p)

			# Takes the error to the NTT domain
			share_out.value.temp_vectorize()
			ring_q._mm_inv_ntt_lvl(level_q, share_out.value, share_out.value)
			share_out.value.temp_scatter()
			# p * a * (skIn - skOut) + e mod q (mod p = 0, so p = e)
			ring_q.add_lvl(level_q, share_out.value, self.tmp_qp.q, share_out.value)

			if ring_p:
				# (p * a * (skIn - skOut) + e) * (1/p) mod QP (mod p = e)
				self.basis_extender.mod_down_qp_to_q(level_q, level_p, share_out.value, self.tmp_qp.p, share_out.value)

			share_out.value.temp_vectorize()
			ring_q._mm_ntt_lvl(level_q, share_out.value, share_out.value)
			share_out.value.temp_scatter()

		share_out.value.resize(level_q)


# PCKSProtocol is the structure storing the parameters for the collective public key-switching.
class PCKSProtocol:
	params: rlwe.Parameters
	sigma_smudging: float

	tmp_qp: ringqp.Poly
	tmp_p: list[ring.Poly]  # [2]

	basis_extender: ring.BasisExtender
	gaussian_sampler: ring.GaussianSampler
	ternary_sampler_montgomery_q: ring.TernarySampler

	def __init__(
			self, params: rlwe.Parameters, sigma_smudging: float, tmp_qp: ringqp.Poly,
			gaussian_sampler: ring.GaussianSampler, ternary_sampler_montgomery_q: ring.TernarySampler):
		self.params = params
		self.sigma_smudging = sigma_smudging
		self.tmp_qp = tmp_qp
		self.gaussian_sampler = gaussian_sampler
		self.ternary_sampler_montgomery_q = ternary_sampler_montgomery_q

	# AllocateShare allocates the shares of the PCKS protocol.
	def allocate_share(self, level_q: int) -> PCKSShare:
		return PCKSShare([self.params.ring_q.new_poly_lvl(level_q), self.params.ring_q.new_poly_lvl(level_q)])
	
	# GenShare is the first part of the unique round of the PCKSProtocol protocol. Each party computes the following :
	# [s_i * ct[1] + (u_i * pk[0] + e_0i)/p, (u_i * pk[1] + e_1i)/p]
	# and broadcasts the result to the other j-1 parties.
	# ct1 is the degree 1 element of the rlwe.Ciphertext to keyswitch, i.e. ct1 = rlwe.Ciphertext.value[1].
	# NTT flag for ct1 is expected to be set correctly.
	def gen_share(self, sk: rlwe.SecretKey, pk: rlwe.PublicKey, ct1: ring.Poly, share_out: PCKSShare):
		ring_q = self.params.ring_q
		ring_p = self.params.ring_p
		ring_qp = self.params.ring_qp()

		level_q = min(share_out.value[0].level(), ct1.level())
		level_p = 0
		if ring_p: level_p = len(ring_p.modulus) - 1

		# samples MForm(u_i) in q and p separately
		self.ternary_sampler_montgomery_q.read_lvl(level_q, self.tmp_qp.q)

		if ring_p:
			ring_qp.extend_basis_small_norm_and_center(self.tmp_qp.q, level_p, None, self.tmp_qp.p)

		self.tmp_qp.temp_vectorize()
		ring_qp._mm_ntt_lvl(level_q, level_p, self.tmp_qp, self.tmp_qp)
		self.tmp_qp.temp_scatter()

		share_out_qp0 = ringqp.Poly(q=share_out.value[0], p=self.tmp_p[0])
		share_out_qp1 = ringqp.Poly(q=share_out.value[1], p=self.tmp_p[1])

		# h_0 = u_i * pk_0
		# h_1 = u_i * pk_1
		ring_qp.mul_coeffs_montgomery_lvl(level_q, level_p, self.tmp_qp, pk.value[0], share_out_qp0)
		ring_qp.mul_coeffs_montgomery_lvl(level_q, level_p, self.tmp_qp, pk.value[1], share_out_qp1)

		share_out_qp0.temp_vectorize()
		share_out_qp1.temp_vectorize()
		ring_qp._mm_inv_ntt_lvl(level_q, level_p, share_out_qp0, share_out_qp0)
		ring_qp._mm_inv_ntt_lvl(level_q, level_p, share_out_qp1, share_out_qp1)
		share_out_qp0.temp_scatter()
		share_out_qp1.temp_scatter()

		# h_0 = u_i * pk_0
		self.gaussian_sampler.read_lvl(level_q, self.tmp_qp.q)
		if ring_p:
			ring_qp.extend_basis_small_norm_and_center(self.tmp_qp.q, level_p, None, self.tmp_qp.p)

		ring_qp.add_lvl(level_q, level_p, share_out_qp0, self.tmp_qp, share_out_qp0)

		# h_1 = u_i * pk_1 + e1
		self.gaussian_sampler.read_lvl(level_q, self.tmp_qp.q)
		if ring_p:
			ring_qp.extend_basis_small_norm_and_center(self.tmp_qp.q, level_p, None, self.tmp_qp.p)

		ring_qp.add_lvl(level_q, level_p, share_out_qp1, self.tmp_qp, share_out_qp1)

		if ring_p:
			# h_0 = (u_i * pk_0 + e0)/p
			self.basis_extender.mod_down_qp_to_q(level_q, level_p, share_out_qp0.q, share_out_qp0.p, share_out_qp0.q)
			# h_1 = (u_i * pk_1 + e1)/p
			self.basis_extender.mod_down_qp_to_q(level_q, level_p, share_out_qp1.q, share_out_qp1.p, share_out_qp1.q)

		# h_0 = s_i*c_1 + (u_i * pk_0 + e0)/p
		if ct1.is_ntt:
			share_out.value[0].temp_vectorize()
			share_out.value[1].temp_vectorize()
			ring_q._mm_ntt_lvl(level_q, share_out.value[0], share_out.value[0])
			ring_q._mm_ntt_lvl(level_q, share_out.value[1], share_out.value[1])
			share_out.value[0].temp_scatter()
			share_out.value[1].temp_scatter()
			ring_q.mul_coeffs_montgomery_and_add_lvl(level_q, ct1, sk.value.q, share_out.value[0])
		else:
			# tmp = s_i*c_1
			ct1.temp_vectorize()
			self.tmp_qp.q.temp_vectorize()
			ring_q._mm_ntt_lazy_lvl(level_q, ct1, self.tmp_qp.q)
			ct1.temp_scatter()
			self.tmp_qp.q.temp_scatter()
			ring_q.mul_coeffs_montgomery_constant_lvl(level_q, self.tmp_qp.q, sk.value.q, self.tmp_qp.q)
			self.tmp_qp.q.temp_vectorize()
			ring_q._mm_inv_ntt_lvl(level_q, self.tmp_qp.q, self.tmp_qp.q)
			self.tmp_qp.q.temp_scatter()

			# h_0 = s_i*c_1 + (u_i * pk_0 + e0)/p
			ring_q.add_lvl(level_q, share_out.value[0], self.tmp_qp.q, share_out.value[0])
	
	# KeySwitch performs the actual keyswitching operation on a ciphertext ct and put the result in ct_out
	def drlwe_key_switch(self, ct_in: rlwe.Ciphertext, combined: PCKSShare, ct_out: rlwe.Ciphertext):
		level = ct_in.level()
		ct_out.resize(ct_in.degree(), level)
		self.params.ring_q.add_lvl(level, ct_in.value[0], combined.value[0], ct_out.value[0])
		if ct_in != ct_out: ring.copy_values_lvl(level, combined.value[1], ct_out.value[1])


# CKGProtocol is the structure storing the parameters and and precomputations for the collective key generation protocol.
class CKGProtocol:
	params: rlwe.Parameters
	gaussian_sampler_q: ring.GaussianSampler

	# AllocateShare allocates the share of the CKG protocol.
	def allocate_share(self) -> CKGShare:
		return CKGShare(self.params.ring_qp().new_poly())
	
	# GenShare generates the party's public key share from its secret key as:
	# crp*s_i + e_i
	# for the receiver protocol. Has no effect is the share was already generated.
	def gen_share(self, sk: rlwe.SecretKey, crp: ringqp.Poly, share_out: CKGShare):
		ring_qp = self.params.ring_qp()

		self.gaussian_sampler_q.read(share_out.value.q)

		if ring_qp.ring_p:
			ring_qp.extend_basis_small_norm_and_center(share_out.value.q, self.params.p_count() - 1, None, share_out.value.p)

		level_q, level_p = self.params.q_count() - 1, self.params.p_count() - 1
		share_out.value.temp_vectorize()
		ring_qp._mm_ntt_lvl(level_q, level_p, share_out.value, share_out.value)
		ring_qp._mm_mform_lvl(level_q, level_p, share_out.value, share_out.value)
		share_out.value.temp_scatter()

		ring_qp.mul_coeffs_montgomery_and_sub_lvl(level_q, level_p, sk.value, crp, share_out.value)
	
	# AggregateShares aggregates a new share to the aggregate key
	def aggregate_shares(self, share_1: CKGShare, share_2: CKGShare, share_out: CKGShare):
		self.params.ring_qp().add_lvl(self.params.q_count() - 1, self.params.p_count() - 1, share_1.value, share_2.value, share_out.value)

	# GenPublicKey return the current aggregation of the received shares as a bfv.PublicKey.
	def gen_public_key(self, round_share: CKGShare, crp: ringqp.Poly, pubkey: rlwe.PublicKey):
		pubkey.value[0] = copy(round_share.value)
		pubkey.value[1] = copy(crp)


# RKGProtocol is the structure storing the parameters and and precomputations for the collective relinearization key generation protocol.
class RKGProtocol:
	params: rlwe.Parameters

	gaussian_sampler_q: ring.GaussianSampler
	ternary_sampler_q: ring.TernarySampler  # sampling in Montgomery form

	tmp_poly_1: ringqp.Poly
	tmp_poly_2: ringqp.Poly

	# AllocateShare allocates the share of the EKG protocol.
	def allocate_share(self) -> Tuple[rlwe.SecretKey, RKGShare, RKGShare]:
		params = self.params
		eph_sk = rlwe.new_secret_key(params)
		r1, r2 = RKGShare(), RKGShare()

		decomp_rns = params.decomp_rns(params.q_count() - 1, params.p_count() - 1)
		decomp_pw2 = params.decomp_pw2(params.q_count() - 1, params.p_count() - 1)

		r1.value = list[list[list[ringqp.Poly]]](decomp_rns)
		r2.value = list[list[list[ringqp.Poly]]](decomp_rns)

		for i in range(decomp_rns):
			r1.value.append(list[list[ringqp.Poly]](decomp_pw2))
			r2.value.append(list[list[ringqp.Poly]](decomp_pw2))

			for _ in range(decomp_pw2):
				r1.value[i].append(
					[self.params.ring_qp().new_poly(),
					 self.params.ring_qp().new_poly()])
				r2.value[i].append(
					[self.params.ring_qp().new_poly(),
					 self.params.ring_qp().new_poly()])

		return eph_sk, r1, r2
	
	# GenShareRoundOne is the first of three rounds of the RKGProtocol protocol. Each party generates a pseudo encryption of
	# its secret share of the key s_i under its ephemeral key u_i : [-u_i*a + s_i*w + e_i] and broadcasts it to the other
	# j-1 parties.
	def gen_share_round_one(self, sk: rlwe.SecretKey, crp: list[list[ringqp.Poly]], eph_sk_out: rlwe.SecretKey, share_out: RKGShare):
		# Given a base decomposition w_i (here the CRT decomposition)
		# computes [-u*a_i + p*s_i + e_i]
		# where a_i = crp_i

		ring_q = self.params.ring_q
		ring_qp = self.params.ring_qp()

		level_q = sk.value.level_q()
		level_p = sk.value.level_p()

		has_modulus_p = level_p > -1

		if has_modulus_p:
			# Computes p * sk
			ring_q.mul_scalar_bigint_lvl(level_q, sk.value.q, ring_qp.ring_p.modulus_at_level[level_p], self.tmp_poly_1.q)
		else:
			level_p = 0
			ring.copy_lvl(level_q, sk.value.q, self.tmp_poly_1.q)

		ring_q.inv_mform(self.tmp_poly_1.q, self.tmp_poly_1.q)

		# u
		self.ternary_sampler_q.read(eph_sk_out.value.q)
		if has_modulus_p:
			ring_qp.extend_basis_small_norm_and_center(eph_sk_out.value.q, level_p, None, eph_sk_out.value.p)
		eph_sk_out.value.temp_vectorize()
		ring_qp._mm_ntt_lvl(level_q, level_p, eph_sk_out.value, eph_sk_out.value)
		ring_qp._mm_mform_lvl(level_q, level_p, eph_sk_out.value, eph_sk_out.value)
		eph_sk_out.value.temp_scatter()

		rns_decomp = len(share_out.value)
		bit_decomp = len(share_out.value[0])

		index = 0
		for j in range(bit_decomp):
			for i in range(rns_decomp):
				# h = e
				self.gaussian_sampler_q.read(share_out.value[i][j][0].q)

				if has_modulus_p:
					ring_qp.extend_basis_small_norm_and_center(share_out.value[i][j][0].q, level_p, None, share_out.value[i][j][0].p)

				share_out.value[i][j][0].temp_vectorize()
				ring_qp._mm_ntt_lvl(level_q, level_p, share_out.value[i][j][0], share_out.value[i][j][0])
				share_out.value[i][j][0].temp_scatter()

				# h = sk*CrtBaseDecompQi + e
				for k in range(level_p + 1):
					index = i * (level_p + 1) + k

					# Handles the case where nb pj does not divides nb qi
					if index >= level_q + 1: break

					qi = ring_q.modulus[index]
					sk_p = self.tmp_poly_1.q.coeffs[index]
					h = share_out.value[i][j][0].q.coeffs[index]

					for w in range(ring_q.n):
						h[w] = ring.cred(h[w] + sk_p[w], qi)

				# h = sk*CrtBaseDecompQi + -u*a + e
				ring_qp.mul_coeffs_montgomery_and_sub_lvl(level_q, level_p, eph_sk_out.value, crp[i][j], share_out.value[i][j][0])

				# Second Element
				# e_2i
				self.gaussian_sampler_q.read(share_out.value[i][j][1].q)

				if has_modulus_p:
					ring_qp.extend_basis_small_norm_and_center(share_out.value[i][j][1].q, level_p, None, share_out.value[i][j][1].p)

				share_out.value[i][j][1].temp_vectorize()
				ring_qp._mm_ntt_lvl(level_q, level_p, share_out.value[i][j][1], share_out.value[i][j][1])
				share_out.value[i][j][1].temp_scatter()
				# s*a + e_2i
				ring_qp.mul_coeffs_montgomery_and_add_lvl(level_q, level_p, sk.value, crp[i][j], share_out.value[i][j][1])

			ring_q.mul_scalar(self.tmp_poly_1.q, 1 << self.params.pow2_base, self.tmp_poly_1.q)

	# GenShareRoundTwo is the second of three rounds of the RKGProtocol protocol. Upon receiving the j-1 shares, each party computes :
	# [s_i * sum([-u_j*a + s_j*w + e_j]) + e_i1, s_i*a + e_i2]
	# = [s_i * (-u*a + s*w + e) + e_i1, s_i*a + e_i2]
	# and broadcasts both values to the other j-1 parties.
	def gen_share_round_two(self, eph_sk: rlwe.SecretKey, sk: rlwe.SecretKey, round_1: RKGShare, share_out: RKGShare):
		ring_qp = self.params.ring_qp()
		level_q = sk.value.q.level()

		has_modulus_p = bool(sk.value.p)
		level_p = 0
		if has_modulus_p:
			level_p = sk.value.p.level()

		# (u_i - s_i)
		ring_qp.sub_lvl(level_q, level_p, eph_sk.value, sk.value, self.tmp_poly_1)

		rns_decomp = len(share_out.value)
		bit_decomp = len(share_out.value[0])

		# Each sample is of the form [-u*a_i + s*w_i + e_i]
		# So for each element of the base decomposition w_i:
		for i in range(rns_decomp):
			for j in range(bit_decomp):
				# Computes [(sum samples)*sk + e_1i, sk*a + e_2i]
				# (AggregateShareRoundTwo samples) * sk
				ring_qp.mul_coeffs_montgomery_constant_lvl(level_q, level_p, round_1.value[i][j][0], sk.value, share_out.value[i][j][0])

				# (AggregateShareRoundTwo samples) * sk + e_1i
				self.gaussian_sampler_q.read(self.tmp_poly_2.q)

				if has_modulus_p:
					ring_qp.extend_basis_small_norm_and_center(self.tmp_poly_2.q, level_p, None, self.tmp_poly_2.p)

				self.tmp_poly_2.temp_vectorize()
				ring_qp._mm_ntt_lvl(level_q, level_p, self.tmp_poly_2, self.tmp_poly_2)
				self.tmp_poly_2.temp_scatter()
				ring_qp.add_lvl(level_q, level_p, share_out.value[i][j][0], self.tmp_poly_2, share_out.value[i][j][0])

				# second part
				# (u - s) * (sum [x][s*a_i + e_2i]) + e3i
				self.gaussian_sampler_q.read(share_out.value[i][j][1].q)

				if has_modulus_p:
					ring_qp.extend_basis_small_norm_and_center(share_out.value[i][j][1].q, level_p, None, share_out.value[i][j][1].p)

				share_out.value[i][j][1].temp_vectorize()
				ring_qp._mm_ntt_lvl(level_q, level_p, share_out.value[i][j][1], share_out.value[i][j][1])
				share_out.value[i][j][1].temp_scatter()
				ring_qp.mul_coeffs_montgomery_and_add_lvl(level_q, level_p, self.tmp_poly_1, round_1.value[i][j][1], share_out.value[i][j][1])

	# GenRelinearizationKey computes the generated RLK from the public shares and write the result in eval_key_out.
	def gen_relinearization_key(self, round_1: RKGShare, round_2: RKGShare, eval_key_out: rlwe.RelinearizationKey):
		ring_qp = self.params.ring_qp()
		level_q = round_1.value[0][0][0].q.level()

		level_p = 0
		if round_1.value[0][0][0].p:
			level_p = round_1.value[0][0][0].p.level()

		rns_decomp = len(round_1.value)
		bit_decomp = len(round_1.value[0])
		for i in range(rns_decomp):
			for j in range(bit_decomp):
				ring_qp.add_lvl(level_q, level_p, round_2.value[i][j][0], round_2.value[i][j][1], eval_key_out.keys[0].value[i][j].value[0])
				eval_key_out.keys[0].value[i][j].value[1] = copy(round_1.value[i][j][1])
				eval_key_out.keys[0].value[i][j].value[0].temp_vectorize()
				eval_key_out.keys[0].value[i][j].value[1].temp_vectorize()
				ring_qp._mm_mform_lvl(level_q, level_p, eval_key_out.keys[0].value[i][j].value[0], eval_key_out.keys[0].value[i][j].value[0])
				ring_qp._mm_mform_lvl(level_q, level_p, eval_key_out.keys[0].value[i][j].value[1], eval_key_out.keys[0].value[i][j].value[1])
				eval_key_out.keys[0].value[i][j].value[0].temp_scatter()
				eval_key_out.keys[0].value[i][j].value[1].temp_scatter()


# NewPCKSProtocol creates a new PCKSProtocol object and will be used to re-encrypt a ciphertext ctx encrypted under a secret-shared key among j parties under a new
# collective public-key.
def new_pcks_protocol(params: rlwe.Parameters, sigma_smudging: float) -> PCKSProtocol:
	prng = utils.new_prng()

	protocol = PCKSProtocol(
		params=params,
		sigma_smudging=sigma_smudging,
		tmp_qp=params.ring_qp().new_poly(),
		gaussian_sampler=ring.new_gaussian_sampler(prng, params.ring_q, sigma_smudging, int(6 * sigma_smudging)),
		ternary_sampler_montgomery_q=ring.new_ternary_sampler_with_hamming_weight(prng, params.ring_q, params.hamming_weight(), False))
	
	if params.ring_p:
		protocol.basis_extender = ring.new_basis_extender(params.ring_q, params.ring_p)
		protocol.tmp_p = [params.ring_p.new_poly(), params.ring_p.new_poly()]
	
	return protocol


# NewCKGProtocol creates a new CKGProtocol instance
def new_ckg_protocol(params: rlwe.Parameters) -> CKGProtocol:
	prng = utils.new_prng()
	return CKGProtocol(
		params=params,
		gaussian_sampler_q=ring.new_gaussian_sampler(prng, params.ring_q, params.sigma, int(6 * params.sigma)))


# NewRKGProtocol creates a new RKG protocol struct.
def new_rkg_protocol(params: rlwe.Parameters) -> RKGProtocol:
	prng = utils.new_prng()

	return RKGProtocol(
		params=params,
		gaussian_sampler_q=ring.new_gaussian_sampler(prng, params.ring_q, params.sigma, int(6 * params.sigma)),
		ternary_sampler_q=ring.new_ternary_sampler_with_hamming_weight(prng, params.ring_q, params.hamming_weight(), False),
		tmp_poly_1=params.ring_qp().new_poly(),
		tmp_poly_2=params.ring_qp().new_poly())


# NewCKSProtocol creates a new CKSProtocol that will be used to perform a collective key-switching on a ciphertext encrypted under a collective public-key, whose
# secret-shares are distributed among j parties, re-encrypting the ciphertext under another public-key, whose secret-shares are also known to the
# parties.
def new_cks_protocol(params: rlwe.Parameters, sigma_smudging: float) -> CKSProtocol:
	cks_protocol = CKSProtocol(
		params=params,
		sigma_smudging=sigma_smudging,
		gaussian_sampler=ring.new_gaussian_sampler(utils.new_prng(), params.ring_q, sigma_smudging, int(6 * sigma_smudging)),
		tmp_qp=params.ring_qp().new_poly(),
		tmp_delta=params.ring_q.new_poly())

	if params.ring_p:
		cks_protocol.basis_extender = ring.new_basis_extender(params.ring_q, params.ring_p)

	return cks_protocol


# RTGProtocol is the structure storing the parameters for the collective rotation-keys generation.
class RTGProtocol:
	params: rlwe.Parameters
	buff: list[ringqp.Poly]  # [2]
	gaussian_sampler_q: ring.GaussianSampler

	# AllocateShare allocates a party's share in the RTG protocol.
	def allocate_share(self) -> RTGShare:
		params = self.params
		decomp_rns = self.params.decomp_rns(params.q_count() - 1, params.p_count() - 1)
		decomp_pw2 = self.params.decomp_pw2(params.q_count() - 1, params.p_count() - 1)

		value = list[list[ringqp.Poly]](decomp_rns)

		for i in range(decomp_rns):
			value.append(list[ringqp.Poly](decomp_pw2))
			for _ in range(decomp_pw2):
				value[i].append(self.params.ring_qp().new_poly())

		return RTGShare(value)

	# GenShare generates a party's share in the RTG protocol.
	def gen_share(self, sk: rlwe.SecretKey, gal_el: u64, crp: list[list[ringqp.Poly]], share_out: RTGShare):
		ring_q = self.params.ring_q
		ring_qp = self.params.ring_qp()

		level_q = sk.value.level_q()
		level_p = sk.value.level_p()

		has_modulus_p = level_p > -1

		gal_el_inv = ring.mod_exp_u64(gal_el, ring_q.nth_root - 1, ring_q.nth_root)

		ring_q.permute_ntt(sk.value.q, gal_el_inv, self.buff[1].q)

		if has_modulus_p:
			ring_q.permute_ntt(sk.value.p, gal_el_inv, self.buff[1].p)
			ring_q.mul_scalar_bigint(sk.value.q, ring_qp.ring_p.modulus_at_level[level_p], self.buff[0].q)
		else:
			level_p = 0
			ring.copy_lvl(level_q, sk.value.q, self.buff[0].q)

		rns_decomp = len(share_out.value)
		bit_decomp = len(share_out.value[0])

		index = 0
		for j in range(bit_decomp):
			for i in range(rns_decomp):
				# e
				self.gaussian_sampler_q.read(share_out.value[i][j].q)

				if has_modulus_p:
					ring_qp.extend_basis_small_norm_and_center(share_out.value[i][j].q, level_p, None, share_out.value[i][j].p)

				share_out.value[i][j].temp_vectorize()
				ring_qp._mm_ntt_lazy_lvl(level_q, level_p, share_out.value[i][j], share_out.value[i][j])
				ring_qp._mm_mform_lvl(level_q, level_p, share_out.value[i][j], share_out.value[i][j])
				share_out.value[i][j].temp_scatter()

				# a is the CRP
				# e + sk_in * (qiBarre*qiStar) * 2^w
				# (qiBarre*qiStar)%qi = 1, else 0
				for k in range(level_p + 1):
					index = i * (level_p + 1) + k

					# Handles the case where nb pj does not divides nb qi
					if index >= level_q + 1:
						break

					qi = ring_q.modulus[index]
					tmp_0 = self.buff[0].q.coeffs[index]
					tmp_1 = share_out.value[i][j].q.coeffs[index]

					for w in range(ring_q.n):
						tmp_1[w] = ring.cred(tmp_1[w] + tmp_0[w], qi)

				# sk_in * (qiBarre*qiStar) * 2^w - a*sk + e
				ring_qp.mul_coeffs_montgomery_and_sub_lvl(level_q, level_p, crp[i][j], self.buff[1], share_out.value[i][j])

			ring_q.mul_scalar(self.buff[0].q, 1 << self.params.pow2_base, self.buff[0].q)

	# AggregateShare aggregates two share in the Rotation Key Generation protocol.
	def aggregate_share(self, share_1: RTGShare, share_2: RTGShare, share_out: RTGShare):
		ring_qp = self.params.ring_qp()
		level_q = share_1.value[0][0].q.level()

		level_p = 0
		if share_1.value[0][0].p:
			level_p = share_1.value[0][0].p.level()

		rns_decomp = len(share_out.value)
		bit_decomp = len(share_out.value[0])
		for i in range(rns_decomp):
			for j in range(bit_decomp):
				ring_qp.add_lvl(level_q, level_p, share_1.value[i][j], share_2.value[i][j], share_out.value[i][j])

	# GenRotationKey finalizes the RTG protocol and populates the input RotationKey with the computed collective SwitchingKey.
	def gen_rotation_key(self, share: RTGShare, crp: list[list[ringqp.Poly]], rot_key: rlwe.SwitchingKey):
		rns_decomp = len(share.value)
		bit_decomp = len(share.value[0])
		for i in range(rns_decomp):
			for j in range(bit_decomp):
				rot_key.value[i][j].value[0].copy_values(share.value[i][j])
				rot_key.value[i][j].value[1].copy_values(crp[i][j])


# NewRTGProtocol creates a RTGProtocol instance.
def new_rtg_protocol(params: rlwe.Parameters) -> RTGProtocol:
	gaussian_sampler_q = ring.new_gaussian_sampler(utils.new_prng(), params.ring_q, params.sigma, int(6 * params.sigma))
	buff = [params.ring_qp().new_poly(), params.ring_qp().new_poly()]

	return RTGProtocol(params=params, gaussian_sampler_q=gaussian_sampler_q, buff=buff)
