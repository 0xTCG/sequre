from perf import perf_profile


BIG_INT_LEN: Static[int] = 512
GALOIS_GEN: Static[int] = 5
MIN_LOG_SLOTS: Static[int] = 0


@extend
class UInt:
    @llvm
    def ext_to_bigint(self: UInt[N]) -> UInt[BIG_INT_LEN]:
        %0 = zext i{=N} %self to i{=BIG_INT_LEN}
        ret i{=BIG_INT_LEN} %0
    # def setbit(self: UInt[N], idx: int, value: int) -> UInt[N]:
    #     mask = (UInt[N](1) << UInt[N](idx))
    #     if value == 1: self |= mask
    #     elif value == 0: self &= (mask ^ (UInt[N](-1)))
    #     else: raise ValueError("Invalid bit value")
    #     return self
    def _getbit(self: UInt[N], idx: int) -> int:
        # TODO: Improve
        return (self & (UInt[N](1) << UInt[N](idx))).popcnt()
    def _udiv_naive(self: UInt[N], other: UInt[N]) -> tuple[UInt[N], UInt[N]]:
        # TODO: Improve
        Q = UInt[N](0)
        R = UInt[N](0)
        for i in range(int(self.bitlen()), -1, -1):
            R <<= UInt[N](1)
            # self_i = (self >> UInt[N](i)) & UInt[N](1)  # 1st way
            # R ^= (-self_i ^ R) & UInt[N](1)  # 1st way
            # R = R.setbit(0, self.getbit(i))  # 2nd way
            if self._getbit(i): R |= UInt[N](1)
            if R >= other:
                R -= other
                # Q ^= (UInt[N](-1) ^ Q) & (UInt[N](1) << UInt[N](i)) # 1st way
                # Q = Q.setbit(i, 1)  # 2nd way
                Q |= (UInt[N](1) << UInt[N](i))
        return Q, R
    def _bigint_mod(self: UInt[N], other: UInt[N]) -> UInt[N]:
        _, r = self._udiv_naive(other)
        return r
    def _mul_mod_via_ext(self: UInt[BIG_INT_LEN], other: UInt[BIG_INT_LEN], mod: UInt[BIG_INT_LEN]) -> UInt[BIG_INT_LEN]:
        # TODO: Improve
        # self_hi, self_lo = self._split_lo_hi()
        # other_hi, other_lo = other._split_lo_hi()

        # ll = self_lo * other_lo
        # hl = self_hi * other_lo
        # lh = self_lo * other_hi
        # hh = self_hi * other_hi

        # hh_factor = (UInt[BIG_INT_LEN](1) << UInt[BIG_INT_LEN](BIG_INT_LEN)).bigint_mod(mod)
        # hl_factor = (UInt[BIG_INT_LEN](1) << UInt[BIG_INT_LEN](BIG_INT_LEN // 2)).bigint_mod(mod)

        # first_term = hh.bigint_mod(mod) * hh_factor

        # second_term = (hl.bigint_mod(mod) + lh.bigint_mod(mod)).bigint_mod(mod) * hl_factor

        # return (first_term.bigint_mod(mod) + second_term.bigint_mod(mod) + ll.bigint_mod(mod)).bigint_mod(mod)
        m = self.ext_double() * other.ext_double()
        mo = m._bigint_mod(mod.ext_double())
        return mo.trunc_half()
    def _big_pow_mod(self: UInt[BIG_INT_LEN], power: UInt[BIG_INT_LEN], mod: UInt[BIG_INT_LEN]) -> UInt[BIG_INT_LEN]:
        # TODO: Improve
        if power == UInt[BIG_INT_LEN](0): return UInt[BIG_INT_LEN](1)
        if self == UInt[BIG_INT_LEN](0): return UInt[BIG_INT_LEN](0)
        number = UInt[BIG_INT_LEN](1)
        
        while power:
            if power & UInt[BIG_INT_LEN](1):
                number = number._mul_mod_via_ext(self, mod)
            power >>= UInt[BIG_INT_LEN](1)
            self = self._mul_mod_via_ext(self, mod)
        
        return number


# @perf_profile("biguint_floordiv")
def biguint_floordiv(self: UInt[BIG_INT_LEN], other: UInt[BIG_INT_LEN]) -> UInt[BIG_INT_LEN]:
    q, _ = self._udiv_naive(other)
    return q
# @perf_profile("biguint_mod")
def biguint_mod(self: UInt[BIG_INT_LEN], other: UInt[BIG_INT_LEN]) -> UInt[BIG_INT_LEN]:
    _, r = self._udiv_naive(other)
    return r
# @perf_profile("bigint_floordiv")
def bigint_floordiv(self: Int[BIG_INT_LEN], other: Int[BIG_INT_LEN]) -> Int[BIG_INT_LEN]:
    s_neg = self < Int[BIG_INT_LEN](0)
    o_neg = other < Int[BIG_INT_LEN](0)

    if s_neg: self = -self
    if o_neg: other = -other
    
    r = Int[BIG_INT_LEN](biguint_floordiv(UInt[BIG_INT_LEN](self), UInt[BIG_INT_LEN](other)))

    if s_neg != o_neg: return -r
    return r
# @perf_profile("bigint_mod")
def bigint_mod(self: Int[BIG_INT_LEN], other: Int[BIG_INT_LEN]) -> Int[BIG_INT_LEN]:
    s_neg = self < Int[BIG_INT_LEN](0)
    assert other > Int[BIG_INT_LEN](0), "Cannot do modular reduction with negative modulus."

    if s_neg: self = -self
    
    r = Int[BIG_INT_LEN](biguint_mod(UInt[BIG_INT_LEN](self), UInt[BIG_INT_LEN](other)))

    if s_neg: return other - r
    return r
# @perf_profile("biguint_mod_inv")
def biguint_mod_inv(val: UInt[BIG_INT_LEN], prime: UInt[BIG_INT_LEN]) -> UInt[BIG_INT_LEN]:
        return val._big_pow_mod(prime - UInt[BIG_INT_LEN](2), prime)


big_uint = UInt[BIG_INT_LEN]
big_int = Int[BIG_INT_LEN]
