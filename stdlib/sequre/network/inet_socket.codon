from ..utils.param import AF_INET, SOCK_STREAM
from ..types.builtin import sockaddr_in, in_addr

from C import socket(int, int, int) -> int
from C import bind(int, ptr[sockaddr_in], int) -> int
from C import connect(int, ptr[sockaddr_in], int) -> int
from C import perror(cobj)
from C import htons(u16) -> u16
from C import inet_addr(cobj) -> u32

from common import listen_socket, accept_socket, close_socket


class CSocket:
    sock_fd: int
    socket_address: str
    serveraddr: sockaddr_in

    def __init__(self: CSocket, address_or_port: str, ip_address: str = '0.0.0.0'):
        self.sock_fd = -1
        self.socket_address = f'{ip_address}:{address_or_port}'
        self.serveraddr = self._set_serveraddr(ip_address, address_or_port)

    def socket(self: CSocket):
        close_socket(self.sock_fd)
        self.sock_fd = socket(AF_INET, SOCK_STREAM, 0)
        if self.sock_fd == -1:
            perror(f'Socket not instantiated'.c_str())
            raise ValueError(f'Socket not instantiated')

    def connect(self: CSocket) -> bool:
        serveraddr = self.serveraddr
        connection = connect(self.sock_fd, __ptr__(serveraddr), 64)

        if connection != 0:
            perror(f'Could not connect at {self.socket_address}'.c_str())

        return connection == 0

    def bind(self: CSocket):
        serveraddr = self.serveraddr
        rc = bind(self.sock_fd, __ptr__(serveraddr), 64)

        if rc < 0:
            perror(f'Server not binded at {self.socket_address} and fd {self.sock_fd}'.c_str())
            raise ValueError(f'Server not binded at {self.socket_address} and fd {self.sock_fd}')
        else:
            print(f'Server binded at {self.socket_address}')
    
    def open_channel(self: CSocket):
        self.socket()
        self.bind()
        listen_socket(self.sock_fd)
        self.sock_fd = accept_socket(self.sock_fd)
    
    def _set_serveraddr(self: CSocket, ip_address: str, port: str) -> sockaddr_in:
        return sockaddr_in(i16(AF_INET), htons(u16(port)), in_addr(inet_addr(ip_address.c_str())))
