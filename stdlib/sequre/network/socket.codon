from ..utils.param import AF_UNIX, AF_INET, SOCK_STREAM
from ..types.builtin import sockaddr_un, sockaddr_in, in_addr

from C import socket(int, int, int) -> int
from C import bind(int, cobj, int) -> int
from C import connect(int, cobj, int) -> int
from C import perror(cobj)
from C import memcpy(cobj, cobj, int)
from C import htons(u16) -> u16
from C import inet_addr(cobj) -> u32


from common import listen_socket, accept_socket, close_socket


class CSocket:
    sock_fd: int
    socket_address: str
    inet_serveraddr: sockaddr_in
    unix_serveraddr: sockaddr_un
    is_inet: bool
    is_unix: bool

    def __init__(self: CSocket, unix_file_address: str = '', ip_address: str = '', port: str = ''):
        self.sock_fd = -1
        
        self.is_inet = ip_address != '' and port != ''
        self.is_unix = unix_file_address != ''
 
        assert self.is_inet ^ self.is_unix, "Invalid CSocket address config. Set either INET IP address and port or UNIX file address."
        
        if self.is_inet:
            self.socket_address = f'{ip_address}:{port}'
            self.inet_serveraddr = self._set_inet_serveraddr(ip_address, port)
        else:
            self.socket_address = unix_file_address
            self.unix_serveraddr = self._set_unix_serveraddr(unix_file_address)
        
    def socket(self: CSocket):
        close_socket(self.sock_fd)
        self.sock_fd = socket(AF_INET if self.is_inet else AF_UNIX, SOCK_STREAM, 0)
        if self.sock_fd == -1:
            perror(f'Socket not instantiated'.c_str())
            raise ValueError(f'Socket not instantiated')

    def connect(self: CSocket) -> bool:
        if self.is_inet:
            inet_serveraddr = self.inet_serveraddr
            connection = connect(self.sock_fd, __ptr__(inet_serveraddr).as_byte(), 64)
        else:
            unix_serveraddr = self.unix_serveraddr
            connection = connect(self.sock_fd, __ptr__(unix_serveraddr).as_byte(), len(self.socket_address) + 2)

        if connection != 0:
            perror(f'{self.socket_address}:\tCould not connect'.c_str())

        return connection == 0

    def bind(self: CSocket):
        if self.is_inet:
            inet_serveraddr = self.inet_serveraddr
            rc = bind(self.sock_fd, __ptr__(inet_serveraddr).as_byte(), 64)
        else:
            unix_serveraddr = self.unix_serveraddr
            rc = bind(self.sock_fd, __ptr__(unix_serveraddr).as_byte(), len(self.socket_address) + 2)

        if rc < 0:
            perror(f'Server not binded at {self.socket_address} and fd {self.sock_fd}'.c_str())
            raise ValueError(f'Server not binded at {self.socket_address} and fd {self.sock_fd}')

    def open_channel(self: CSocket):
        self.socket()
        self.bind()
        listen_socket(self.sock_fd)
        print(f"{self.socket_address}:\tChannel open: awaiting connection ...")
        self.sock_fd = accept_socket(self.sock_fd)

    def _set_unix_serveraddr(self: CSocket, socket_address: str) -> sockaddr_un:
        serveraddr = sockaddr_un(AF_UNIX, ptr[byte](len(socket_address)))
        serveraddr_ptr = ptr[byte](__ptr__(serveraddr).as_byte())
        memcpy(serveraddr_ptr, ptr[byte](__ptr__(AF_UNIX).as_byte()), 2)
        memcpy(serveraddr_ptr + 2, socket_address.c_str(), len(socket_address))
        return serveraddr
    
    def _set_inet_serveraddr(self: CSocket, ip_address: str, port: str) -> sockaddr_in:
        return sockaddr_in(i16(AF_INET), htons(u16(port)), in_addr(inet_addr(ip_address.c_str())))
