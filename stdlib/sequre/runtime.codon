import time, sys

from sequre.mpc.env import MPCEnv
from sequre.utils.param import FIELD_SIZE, RING_SIZE
from sequre.utils.constants import RUN_TOGGLES

from C import fork() -> int
from C import wait(cobj) -> int


def client(pid, foo, control_toggles, local, modulus, *args):
    # Initialize MPC environment
    mpc = MPCEnv(pid, local, modulus)
    if not control_toggles[RUN_TOGGLES.MHE_SETUP_SKIP_FLAG]:
        mpc.he.default_setup()

    foo(mpc, *args)

    # This is here just to keep P0 online until the end for data transfer
    # In practice, P0 would send data in advance before each phase and go offline
    mpc.done()


def fork_parties(fork_level, last_pid, foo, control_toggles, modulus, *args):
    status = 0
    pid = fork()
    if pid == 0:
        client(fork_level, foo, control_toggles, True, modulus, *args)
    elif fork_level + 1 == last_pid:
        s = time.time()
        client(fork_level + 1, foo, control_toggles, True, modulus, *args)
        e = time.time()
        print(f'Total runtime: {e - s}s')
        wait(__ptr__(status).as_byte())
    else:
        fork_parties(fork_level + 1, last_pid, foo, control_toggles, modulus, *args)


def local(foo, *args):
    command = sys.argv[1:]
    flags = [arg for arg in command if arg.startswith('--')]
    toggles = {toggle: toggle in flags for toggle in RUN_TOGGLES}
    modulus = RING_SIZE if toggles[RUN_TOGGLES.USE_RING_FLAG] else FIELD_SIZE
    fork_parties(0, 2, foo, toggles, modulus, *args)


def mpc():
    command = sys.argv[1:]
    flags = [arg for arg in command if arg.startswith('--')]
    args = [arg for arg in command if arg not in flags]
    toggles = {toggle: toggle in flags for toggle in RUN_TOGGLES}

    modulus = RING_SIZE if toggles[RUN_TOGGLES.USE_RING_FLAG] else FIELD_SIZE
    return MPCEnv(int(args[0]), False, modulus)
