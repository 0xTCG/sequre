import prg

from ..lattiseq.rlwe import \
    SecretKey, \
    PublicKey, \
    RelinearizationKey, \
    RotationKeySet, \
    AdditiveShareBigint, \
    new_rotation_key_set
from ..lattiseq.ckks import \
    PN14QP438, \
    Parameters, \
    Ciphertext, \
    PrecisionStats, \
    Plaintext, \
    new_key_generator, \
    evaluate_precision, \
    new_plaintext, \
    new_public_key, \
    new_ciphertext, \
    new_relinearization_key, \
    new_parameters_from_literal
from ..lattiseq.ringqp import \
    UniformSampler, \
    Poly, \
    Ring, \
    new_uniform_sampler
from ..lattiseq.dckks import \
    RefreshShare, \
    RefreshProtocol, \
    new_pcks_protocol, \
    new_ckg_protocol, \
    new_rkg_protocol, \
    new_refresh_protocol, \
    get_minimum_level_for_bootstrapping, \
    new_rot_kg_protocol, \
    new_e2s_protocol, \
    new_s2e_protocol, \
    new_additive_share_bigint
from ..lattiseq.drlwe import \
    PCKSShare, \
    CKGShare, \
    RKGShare, \
    RTGShare, \
    CKSShare
from ..lattiseq.utils import new_prng
from ..types.mhe import CryptoParams, RotationType, generate_rot_keys
from ..types.builtin import Complex
from ..settings import DEBUG

from randomness import MPCRandomness
from comms import MPCComms


class MPCHE[TP]:
    pid: int
    randomness: MPCRandomness
    comms: MPCComms[TP]

    crp_gen: UniformSampler
    crypto_params: CryptoParams
    
    def __init__(self, comms: MPCComms[TP]):
        self.pid = comms.pid
        self.randomness = comms.randomness
        self.comms = comms
    
    def default_setup(self):
        print("Setting up default MHE setup ...")
        ckks_params = new_parameters_from_literal(PN14QP438)
        self.set_params(ckks_params)
        self.collective_init(ckks_params, u64(256))

    def set_params(self, params: Parameters):
        self.randomness.switch_seed(-1)
        seed = u32(prg.getrandbits(32))
        self.randomness.restore_seed(-1)

        ring_qp = params.ring_qp()
        crp_gen = new_uniform_sampler(new_prng(seed), ring_qp)

        self.crp_gen = crp_gen
        self.crypto_params = CryptoParams(params)
    
    def aggregate_pub_key_shares(self, poly: CKGShare) -> CKGShare:
        out = CKGShare()

        ring_qp = self.crypto_params.params.ring_qp()

        pid = self.pid
        if pid > 0:
            if pid == self.comms.hub_pid:
                out.value = ring_qp.new_poly()

                for p in range(1, self.comms.number_of_parties):
                    new_poly = poly.value
                    if p != pid:
                        new_poly = self.comms.receive_as_jar(p, Poly)
                    new_poly.temp_vectorize()
                    out.value.temp_vectorize()
                    ring_qp._mm_add(new_poly, out.value, out.value)
                    out.value.temp_scatter()
                
                for p in range(1, self.comms.number_of_parties):
                    if p != pid: self.comms.send_as_jar(out.value, p)
                
            else:
                self.comms.send_as_jar(poly.value, self.comms.hub_pid)
                out.value = self.comms.receive_as_jar(self.comms.hub_pid, Poly)

        return out
    
    def collective_pub_key_gen(self, parameters: Parameters, sh_shard: SecretKey, crp_gen: UniformSampler) -> PublicKey:
        sk = sh_shard

        ckg_protocol = new_ckg_protocol(parameters)

        pk_share = ckg_protocol.allocate_share()

        crp = parameters.ring_qp().new_poly()
        crp.temp_vectorize()
        crp_gen._mm_read(crp)
        crp.temp_scatter()
        ckg_protocol.gen_share(sk, crp, pk_share)

        pk_agg = self.aggregate_pub_key_shares(pk_share)

        hub_pid = self.comms.hub_pid
        if self.pid == 0: pk_agg.value = self.comms.receive_as_jar(hub_pid, Poly)
        elif self.pid == hub_pid: self.comms.send_as_jar(pk_agg.value, 0)

        pk = new_public_key(parameters)
        pk_agg.value.temp_vectorize()
        ckg_protocol.gen_public_key(pk_agg, crp, pk)

        return pk

    def aggregate_relin_key_share(self, share: RKGShare, second_slot: bool) -> RKGShare:
        pid = self.pid
        context_qp = self.crypto_params.params.ring_qp()
        rns_decomp = len(share.value)
        bit_decomp = len(share.value[0])

        share_out = RKGShare()
        share_out.value = list[list[list[Poly]]](rns_decomp)

        if pid > 0:
            if pid == self.comms.hub_pid:
                # Initialize
                for i in range(rns_decomp):
                    mat = list[list[Poly]](bit_decomp)
                    for j in range(bit_decomp):
                        row = list[Poly](2)
                        row.append(context_qp.new_poly())
                        if second_slot: row.append(context_qp.new_poly())
                        mat.append(row)
                    share_out.value.append(mat)

                # Aggregate
                for p in range(1, self.comms.number_of_parties):
                    for i in range(rns_decomp):
                        for j in range(bit_decomp):
                            other0, other1 = Poly(), Poly()
                            
                            if p != pid:
                                other0 = self.comms.receive_as_jar(p, Poly)
                                if second_slot: other1 = self.comms.receive_as_jar(p, Poly)
                            else:
                                other0 = share.value[i][j][0]
                                if second_slot: other1 = share.value[i][j][1]

                            other0.temp_vectorize()
                            share_out.value[i][j][0].temp_vectorize()
                            context_qp._mm_add(other0, share_out.value[i][j][0], share_out.value[i][j][0])
                            share_out.value[i][j][0].temp_scatter()
                    
                            if second_slot:
                                other1.temp_vectorize()
                                share_out.value[i][j][1].temp_vectorize()
                                context_qp._mm_add(other1, share_out.value[i][j][1], share_out.value[i][j][1])
                                share_out.value[i][j][1].temp_scatter()

                # Broadcast
                for p in range(1, self.comms.number_of_parties):
                    if p != pid:
                        for i in range(rns_decomp):
                            for j in range(bit_decomp):
                                self.comms.send_as_jar(share_out.value[i][j][0], p)
                                if second_slot: self.comms.send_as_jar(share_out.value[i][j][1], p)
                
            else:
                # Send share
                for i in range(rns_decomp):
                    for j in range(bit_decomp):
                        self.comms.send_as_jar(share.value[i][j][0], self.comms.hub_pid)
                        if second_slot: self.comms.send_as_jar(share.value[i][j][1], self.comms.hub_pid)

                # Receive result
                for i in range(rns_decomp):
                    mat = list[list[Poly]](bit_decomp)
                    for j in range(bit_decomp):
                        row = list[Poly](2)
                        row.append(self.comms.receive_as_jar(self.comms.hub_pid, Poly))
                        if second_slot: row.append(self.comms.receive_as_jar(self.comms.hub_pid, Poly))
                        mat.append(row)
                    share_out.value.append(mat)

        return share_out
    
    def collective_relin_key_gen(self, params: Parameters, sk_shard: SecretKey, crp_gen: UniformSampler) -> RelinearizationKey:
        sk = sk_shard
        ring_qp = params.ring_qp()

        prot = new_rkg_protocol(params)
        eph_sk, share_1, share_2 = prot.allocate_share()

        rns_decomp = len(share_1.value)
        bit_decomp = len(share_1.value[0])

        assert len(share_1.value) == len(share_2.value)
        assert len(share_1.value[0]) == len(share_2.value[0])

        crp = self._gen_crp_matrix(ring_qp, crp_gen, rns_decomp, bit_decomp)
        evk = new_relinearization_key(params)

        if self.pid > 0:
            prot.gen_share_round_one(sk, crp, eph_sk, share_1)
            out_round_1 = self.aggregate_relin_key_share(share_1, True)

            prot.gen_share_round_two(eph_sk, sk, out_round_1, share_2)
            out_round_2 = self.aggregate_relin_key_share(share_2, True)

            prot.gen_relinearization_key(out_round_1, out_round_2, evk)
        
        return evk
    
    def aggregate_rot_key_share(self, share: RTGShare) -> RTGShare:
        rns_decomp, bit_decomp = share.value.shape()
        in_share_value = list[list[list[Poly]]](rns_decomp)
        for i in range(rns_decomp):
            in_share_value_row = list[list[Poly]](bit_decomp)
            for j in range(bit_decomp):
                in_share_value_row.append([share.value[i][j]])
            in_share_value.append(in_share_value_row)
        
        in_share = RKGShare(in_share_value)
        out = self.aggregate_relin_key_share(in_share, False).value

        share_out_value = list[list[Poly]](rns_decomp)
        for i in range(rns_decomp):
            share_out_row = list[Poly](bit_decomp)
            for j in range(bit_decomp):
                share_out_row.append(out[i][j][0])
            share_out_value.append(share_out_row)

        return RTGShare(share_out_value)
    
    def collective_rot_key_gen(self, parameters: Parameters, sk_shard: SecretKey,
            crp_gen: UniformSampler, rot_types: list[RotationType]) -> RotationKeySet:
        slots = parameters.slots()
        sk = sk_shard

        shifts = list[int](len(rot_types))
        for rot_type in rot_types:
            shift = 0
            if rot_type.is_right(): shift = slots - rot_type.value
            else: shift = rot_type.value

            shifts.append(shift)

        g_elems = list[u64](len(shifts))

        for k in shifts:
            g_elems.append(parameters.galois_element_for_column_rotation_by(k))

        # Need to sortInt otherwise different parties might have different ordering
        g_elems.sort()

        rot_keys = new_rotation_key_set(parameters.get_rlwe_params(), g_elems)

        if self.pid == 0: return rot_keys

        ring_qp = parameters.ring_qp()
        for gal_el in g_elems:
            
            rtg_protocol = new_rot_kg_protocol(parameters)
            rtg_share = rtg_protocol.allocate_share()

            crp = self._gen_crp_matrix(
                ring_qp, crp_gen, len(rtg_share.value), len(rtg_share.value[0]))

            rtg_protocol.gen_share(sk, gal_el, crp, rtg_share)
            rtg_agg = self.aggregate_rot_key_share(rtg_share)
            rtg_protocol.gen_rotation_key(rtg_agg, crp, rot_keys.keys[gal_el])

        return rot_keys

    def collective_init(self, params: Parameters, prec: u64):
        print(f"CP{self.pid}:\tMHE collective initialization ...")

        kgen = new_key_generator(params)
        ring_qp = params.ring_qp()

        sk_shard = SecretKey()
        if self.pid == 0: sk_shard.value = ring_qp.new_poly()
        else: sk_shard = kgen.gen_secret_key()

        p = ring_qp.new_poly()
        p.temp_vectorize()
        self.crp_gen._mm_read(p)
        p.temp_scatter()

        print(f"CP{self.pid}:\tMHE generating public key ...")
        pk = self.collective_pub_key_gen(params, sk_shard, self.crp_gen)

        print(f"CP{self.pid}:\tMHE generating relinearization key ...")
        rlk = self.collective_relin_key_gen(params, sk_shard, self.crp_gen)
        
        print("MHE generating rotation keys ... ")
        rtks = self.collective_rot_key_gen(
            params, sk_shard, self.crp_gen,
            generate_rot_keys(params.slots(), 20, True))

        print("Initializing MHE ... ")
        self.crypto_params.initialize(sk_shard, sk_shard, pk, rlk, rtks, prec)
        print(f"CP{self.pid}:\tMHE setup complete.")
    
    def precision_stats(self, result: list, expected: list) -> PrecisionStats:
        print(f"CP{self.pid}:\tValues computed [0:4]: {result[:4]} ...\n")
        print(f"CP{self.pid}:\tValues expected [0:4]: {expected[:4]} ...\n")

        precision_stats = evaluate_precision(result.to_complex(), expected.to_complex())
        print(precision_stats)

        return precision_stats
    
    def encode_vector(self, values: list) -> Tuple[list[Plaintext], int]:
        nbr_max_coef = self.crypto_params.params.slots()
        length = len(values)

        plain_arr = list[Plaintext]((length + nbr_max_coef - 1) // nbr_max_coef)
        elements_encoded = 0

        while elements_encoded < length:
            start = elements_encoded
            end = elements_encoded + nbr_max_coef
            if end > length: end = length

            # Encoding values
            plaintext = new_plaintext(
                self.crypto_params.params,
                self.crypto_params.params.max_level(),
                self.crypto_params.params.default_scale)
            self.crypto_params.encoder.encode(
                values[start:end].pad_vec(nbr_max_coef).to_complex(),
                plaintext,
                self.crypto_params.params.log_slots)

            plain_arr.append(plaintext)
            elements_encoded = elements_encoded + (end - start)

        return plain_arr, elements_encoded
    
    # encrypt_vector encrypts a list of values in multiple batched ciphertexts.
    # and return the number of encrypted elements.
    def encrypt_vector(self, values: list) -> Tuple[list[Ciphertext], int]:
        nbr_max_coef = self.crypto_params.params.slots()
        length = len(values)

        cipher_arr = list[Ciphertext]((length + nbr_max_coef - 1) // nbr_max_coef)
        elements_encrypted = 0
        
        while elements_encrypted < length:
            start = elements_encrypted
            end = elements_encrypted + nbr_max_coef
            if end > length: end = length

            # Encoding values
            plaintext = new_plaintext(
                self.crypto_params.params,
                self.crypto_params.params.max_level(),
                self.crypto_params.params.default_scale)
            self.crypto_params.encoder.encode(
                values[start:end].pad_vec(nbr_max_coef).to_complex(),
                plaintext,
                self.crypto_params.params.log_slots)
            
            # Encrypting plaintext
            cipher_arr.append(self.crypto_params.encryptor.encrypt_new(plaintext))
            elements_encrypted = elements_encrypted + (end - start)

        return cipher_arr, elements_encrypted
    
    def aggregate_decrypt_shares(self, poly: PCKSShare, out_level: int) -> PCKSShare:
        out = PCKSShare()

        pid = self.pid
        if pid > 0:
            if pid == self.comms.hub_pid:

                for _ in range(len(poly.value)):
                    out.value.append(self.crypto_params.params.ring_q.new_poly_lvl(out_level))
                
                for p in range(1, self.comms.number_of_parties):
                    for i in range(len(poly.value)):
                        new_poly = poly[i]
                        if p != pid: new_poly = self.comms.receive_as_jar(p, type(poly[i]))
                        level = len(new_poly.coeffs) - 1
                        new_poly.temp_vectorize()
                        out[i].temp_vectorize()
                        self.crypto_params.params.ring_q._mm_add_lvl(level, new_poly, out[i], out[i])
                        out[i].temp_scatter()
                
                for p in range(1, self.comms.number_of_parties):
                    if p != pid:
                        for i in range(len(poly.value)):
                            self.comms.send_as_jar(out[i], p)
            else:
                for i in range(len(poly.value)):
                    self.comms.send_as_jar(poly[i], self.comms.hub_pid)
                for i in range(len(poly.value)):
                    out.value.append(self.comms.receive_as_jar(self.comms.hub_pid, type(poly[i])))

        return out

    def collective_decrypt(self, cps: CryptoParams, ct: Ciphertext, source_pid: int) -> Plaintext:
        tmp = ct

        # source_pid broadcasts ct to other parties for collective decryption
        if self.pid == source_pid:
            for p in range(1, self.comms.number_of_parties):
                if p != source_pid: self.comms.send_as_jar(ct, p)
        elif self.pid > 0:
            tmp = self.comms.receive_as_jar(source_pid, Ciphertext)
        else:  # pid == 0
            return Plaintext()

        parameters = cps.params

        zero_pk = new_public_key(parameters)

        pcks_protocol = new_pcks_protocol(parameters, 6.36)
        dec_share = pcks_protocol.allocate_share(tmp.level())

        pcks_protocol.gen_share(cps.sk, zero_pk, tmp.value[1], dec_share)
        dec_agg = self.aggregate_decrypt_shares(dec_share, tmp.level())

        ciphertext_switched = new_ciphertext(parameters, 1, tmp.level(), tmp.scale)
        pcks_protocol.key_switch(tmp, dec_agg, ciphertext_switched)

        return ciphertext_switched.plaintext()

    def add(self, x: list, y: list) -> list[Ciphertext]:
        assert len(x) == len(y), "Ciphervector lenghts differ"
        res = list[Ciphertext](len(x))
        
        for i in range(len(x)):
			# TODO: Check level
            res.append(self.crypto_params.evaluator.add_new(x[i], y[i]))

        return res
    
    def add_plain(self, x: list[Ciphertext], y: list[Plaintext]) -> list[Ciphertext]:
        # TODO: Deprecate
        assert len(x) == len(y), "Ciphervector lenghts differ"
        res = list[Ciphertext](len(x))

        for i in range(len(x)):
            # TODO: Check level
            res.append(self.crypto_params.evaluator.add_new(x[i], y[i]))

        return res
    
    def mult(self, x: list[Ciphertext], y: list[Ciphertext]) -> list[Ciphertext]:
        max_len = max(len(x), len(y))
        res = list[Ciphertext](max_len)
        
        for i in range(max_len):
            res.append(self.crypto_params.evaluator.mult_relin_new(x[i], y[i]))
            self.crypto_params.evaluator.rescale(res[i], self.crypto_params.params.default_scale, res[i])

        return res
    
    def mult_plain(self, x: list[Ciphertext], y: list[Plaintext]) -> list[Ciphertext]:
        # TODO: Deprecate
        max_len = max(len(x), len(y))
        res = list[Ciphertext](max_len)

        for i in range(max_len):
            res.append(self.crypto_params.evaluator.mult_new(x[i], y[i]))
            self.crypto_params.evaluator.rescale(res[i], self.crypto_params.params.default_scale, res[i])

        return res
    
    def rotate(self, x: list[Ciphertext], k: int) -> list[Ciphertext]:
        res = list[Ciphertext](len(x))
        for i in range(len(x)): res.append(self.crypto_params.evaluator.rotate_new(x[i], k))

        return res
    
    def drop_level(self, a: list[list[Ciphertext]], out_level: int) -> list[list[Ciphertext]]:
        out = list[list[Ciphertext]](len(a))
        for i in range(len(a)):
            row = list[Ciphertext](len(a[i]))
            for j in range(len(a[i])):
                if a[i][j].level() > out_level:
                    row.append(self.crypto_params.evaluator.drop_level_new(a[i][j], a[i][j].level() - out_level))
                elif a[i][j].level() == out_level:
                    row.append(a[i][j].copy())
                else:
                    raise ValueError(f"DropLevel: requested level {out_level} when input is {a[i][j].level()}")
            out.append(row)
        return out

    def flatten_levels(self, x: list[list[Ciphertext]]) -> tuple[list[list[Ciphertext]], int]:
        min_level = x[0][0].level()
        not_flat = False
        
        for row in x:
            for col in row:
                if col.level() != min_level:
                    min_level = min(col.level(), min_level)
                    not_flat = True

        if not not_flat:
            return x, min_level

        return self.drop_level(x, min_level), min_level

    def aggregate_refresh_share(self, ref_protocol: RefreshProtocol, share: RefreshShare) -> RefreshShare:
        context_q = self.crypto_params.params.ring_q

        # Initialize
        share_out = RefreshShare(
            context_q.new_poly_lvl(share.e2s_share.value.level()),
            context_q.new_poly_lvl(share.s2e_share.value.level()))

        if self.pid > 0:
            if self.pid == self.comms.hub_pid:
                # Aggregate
                for p in range(1, self.comms.number_of_parties):
                    other = share
                    if p != self.pid: other = self.comms.receive_as_jar(p, RefreshShare)
                    ref_protocol.aggregate_shares(other, share_out, share_out)

                # Broadcast
                for p in range(1, self.comms.number_of_parties):
                    if p != self.pid: self.comms.send_as_jar(share_out, p)
            
            else:
                # Send share
                self.comms.send_as_jar(share, self.comms.hub_pid)

                # Receive result
                share_out = self.comms.receive_as_jar(self.comms.hub_pid, RefreshShare)

        return share_out

    def collective_bootstrap(self, ct: Ciphertext, source_pid: int):
        # if source_pid == 0, assume cm is already shared across parties
        if self.pid == 0:
            return

        # source_pid broadcasts ct to other parties for collective decryption
        if source_pid > 0:
            if self.pid == source_pid:
                for p in range(1, self.comms.number_of_parties):
                    if p != source_pid: self.comms.send_as_jar(ct, p)
            else: ct = self.comms.receive_as_jar(source_pid, Ciphertext)

        parameters = self.crypto_params.params
        level_start = ct.level()

        min_level, log_bound, ok = get_minimum_level_for_bootstrapping(
            128, parameters.default_scale, self.comms.number_of_parties - 1, parameters.q())

        assert ok and min_level <= level_start and min_level < parameters.max_level(), "Bootstrapping: Not enough levels to ensure correctness and 128 security."

        ref_protocol = new_refresh_protocol(parameters, 256, 6.36)
        ref_share = ref_protocol.allocate_share(level_start, parameters.max_level())
        crp = self.crp_gen._mm_read_new(parameters).q
        crp.temp_scatter()

        ref_protocol.gen_share(
            self.crypto_params.sk,
            log_bound,
            parameters.log_slots,
            ct.value[1],
            ct.scale,
            crp,
            ref_share)
        
        ref_agg = self.aggregate_refresh_share(ref_protocol, ref_share)
        ref_protocol.finalize(ct, parameters.log_slots, crp, ref_agg, ct)
    
    def cipher_to_additive_share(self, ct: Ciphertext, source_pid: int) -> AdditiveShareBigint:
        parameters = self.crypto_params.params
        
        # if source_pid == 0, assume cm is already shared across parties
        if self.pid == 0:
            return new_additive_share_bigint(parameters, parameters.log_slots)

        # source_pid broadcasts ct to other parties for collective decryption
        if source_pid > 0:
            if self.pid == source_pid:
                for p in range(1, self.comms.number_of_parties):
                    if p != source_pid: self.comms.send_as_jar(ct, p)
            else: ct = self.comms.receive_as_jar(source_pid, Ciphertext)

        level_start = ct.level()

        min_level, log_bound, ok = get_minimum_level_for_bootstrapping(
            128, parameters.default_scale, self.comms.number_of_parties - 1, parameters.q())

        assert ok and min_level <= level_start and min_level < parameters.max_level(), "E2S: Not enough levels to ensure correctness and 128 security."
        self.crypto_params.evaluator.drop_level(ct, ct.level() - min_level - 1)

        e2s_protocol = new_e2s_protocol(parameters, 3.2)
        public_e2s_share = e2s_protocol.allocate_share(level_start)
        secret_share = new_additive_share_bigint(parameters, parameters.log_slots)
        
        e2s_protocol.gen_share(
            self.crypto_params.sk,
            log_bound,
            parameters.log_slots,
            ct.value[1],
            secret_share,
            public_e2s_share)
        
        if self.pid == source_pid:
            for p in range(1, self.comms.number_of_parties):
                if p != source_pid:
                    e2s_protocol._mm_aggregate_shares(public_e2s_share, self.comms.receive_as_jar(p, CKSShare), public_e2s_share)

            # sum(-M_i) + x
            e2s_protocol.get_share(secret_share, public_e2s_share, parameters.log_slots, ct, secret_share)
        else: self.comms.send_as_jar(public_e2s_share, source_pid)
        
        return secret_share
    
    def additive_share_to_cipher(self, secret_share: AdditiveShareBigint, source_pid: int) -> Ciphertext:
        parameters = self.crypto_params.params
        cipher_level = parameters.max_level()

        min_level, _, ok = get_minimum_level_for_bootstrapping(
            128, parameters.default_scale, self.comms.number_of_parties - 1, parameters.q())

        assert ok and min_level <= cipher_level and min_level < parameters.max_level(), "S2E: Not enough levels to ensure correctness and 128 security."

        crp = self.crp_gen._mm_read_new(parameters).q
        crp.temp_scatter()
        s2e_protocol = new_s2e_protocol(parameters, 3.2)
        public_s2e_share = s2e_protocol.allocate_share(cipher_level)

        s2e_protocol.gen_share(
            self.crypto_params.sk,
            crp,
            parameters.log_slots,
            secret_share,
            public_s2e_share)
        
        if self.pid == source_pid:
            for p in range(1, self.comms.number_of_parties):
                if p != source_pid:
                    s2e_protocol._mm_aggregate_shares(public_s2e_share, self.comms.receive_as_jar(p, CKSShare), public_s2e_share)
        else: self.comms.send_as_jar(public_s2e_share, source_pid)

        ct_rec = new_ciphertext(parameters, 1, cipher_level, parameters.default_scale)
        if self.pid == source_pid: s2e_protocol.get_encryption(public_s2e_share, crp, ct_rec)

        return ct_rec

    def decode_vector[DTP=Complex](self, cps: CryptoParams, fenc: list[Plaintext]) -> list[DTP]:
        data_decoded = []

        for plaintext in fenc:
            val = cps.encoder.decode(plaintext, cps.params.log_slots)
            data_decoded.extend([(c.r if isinstance(DTP, float) else c) for c in val])

        return data_decoded
    
    def _gen_crp_matrix(
            self, ring_qp: Ring, crp_gen: UniformSampler,
            rows: int, cols: int) -> list[list[Poly]]:
        crp = list[list[Poly]](rows)
        
        for _ in range(rows):
            row = list[Poly](cols)
            for _ in range(cols):
                p = ring_qp.new_poly()
                p.temp_vectorize()
                crp_gen._mm_read(p)
                p.temp_scatter()
                row.append(p)
            crp.append(row)
        
        return crp
