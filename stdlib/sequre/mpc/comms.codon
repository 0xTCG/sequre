from pickler import pickle, unpickle
from internal.gc import sizeof

from ..utils.param import *
from ..types.utils import fp_to_double

from stats import MPCStats
from randomness import MPCRandomness
from ..network.socket import CSocket
from ..network.connect import connect
from ..network.common import close_socket, snd_jar, receive_jar


class MPCComms[TP]:
    pid: int
    hub_pid: int
    sockets: dict[int, CSocket]
    stats: MPCStats
    randomness: MPCRandomness
    local: bool
    number_of_parties: int

    def __init__(self: MPCComms[TP], randomness: MPCRandomness, local: bool, expect_data_sharing: bool):
        self.pid = randomness.pid
        self.hub_pid = 1
        self.stats = randomness.stats
        self.randomness = randomness
        self.local = local
        self.sockets = dict[int, CSocket]()

        self.__setup_channels(expect_data_sharing)
        self.number_of_parties = len(self.sockets) + 1
        self.reset_stats()

    def send(self, data, to_pid: int):
        self.send_as_jar(data, to_pid)
    
    def receive[T](self, from_pid: int) -> T:
        return self.receive_as_jar(from_pid, T=T)
    
    def send_jar_size(self, data, to_pid: int):
        jar = ptr[byte](sizeof(int))
        pickle(data._pickle_size(), jar, pasteurized=False)
        snd_jar(self.sockets[to_pid].sock_fd, jar, sizeof(int))
    
    def receive_jar_size(self, from_pid: int) -> int:
        return unpickle(receive_jar(self.sockets[from_pid].sock_fd, sizeof(int)), False, int)
    
    def send_as_jar(self, data, to_pid: int):
        self.send_jar_size(data, to_pid)

        pickle_size = data._pickle_size()
        jar = ptr[byte](pickle_size)
        pickle(data, jar, pasteurized=False)

        snd_jar(self.sockets[to_pid].sock_fd, jar, pickle_size)

    def receive_as_jar[T](self, from_pid: int) -> T:
        msg_len = self.receive_jar_size(from_pid)
        received_jar = receive_jar(self.sockets[from_pid].sock_fd, msg_len)
        return unpickle(received_jar, False, T)
    
    def share_from(self, data, source_pid: int, modulus):
        from_dealer = source_pid == 0

        if self.pid == source_pid:
            r = data.zeros()
            
            for p in range(2 if from_dealer else 1, self.number_of_parties):
                if p != source_pid:
                    with self.randomness.seed_switch(p):
                        r += data.rand(modulus, "uniform")

            blinded_data = data.sub_mod(r, modulus)

            if from_dealer:
                self.send_as_jar(blinded_data, 1)
                return data.zeros()

            return blinded_data
        elif self.pid == 1 and from_dealer:
            return self.receive_as_jar(0, T=type(data))
        elif self.pid == 0 and not from_dealer:
            return data.zeros()
        else:
            with self.randomness.seed_switch(source_pid):
                return data.rand(modulus, "uniform")
    
    def share_from_trusted_dealer(self, data, modulus):
        return self.share_from(data, 0, modulus)

    def reveal(self, value, modulus):
        if self.pid == 0:
            return value
        
        if self.pid == 1:
            self.send_as_jar(value, 3 - self.pid)
            received_value = self.receive_as_jar(3 - self.pid, type(value))
            
            return value.add_mod(received_value, modulus)
        
        received_value = self.receive_as_jar(3 - self.pid, type(value))
        self.send_as_jar(value, 3 - self.pid)

        return value.add_mod(received_value, modulus)
    
    def reveal_at(self, value, target_pid, modulus):
        if self.pid == target_pid:
            for p in range(1, self.number_of_parties):
                if p != self.pid:
                    value = value.add_mod(self.receive_as_jar(p, type(value)), modulus)
        else:
            self.send_as_jar(value, target_pid)
        
        return value

    def reveal_no_mod(self, value):
        if self.pid == 0:
            return value
        
        if self.pid == 1:
            self.send_as_jar(value, 3 - self.pid)
            received_value = self.receive_as_jar(3 - self.pid, type(value))
            
            return value + received_value
        
        received_value = self.receive_as_jar(3 - self.pid, type(value))
        self.send_as_jar(value, 3 - self.pid)

        return value + received_value
    
    def reveal_to_all(self, value, modulus):
        revealed_value = self.reveal(value, modulus)
        if self.pid == 2: self.send(revealed_value, 0)
        elif self.pid == 0: revealed_value = self.receive(2, T=type(value))
        return revealed_value
    
    def is_broadcast(self, value) -> bool:
        return self.broadcast_from(self.collect_at(bool(value), self.hub_pid).reduce_and(), self.hub_pid)
    
    def send_to_all_from(self, value, source_pid: int, include_trusted_dealer: bool = False):
        start = 0 if include_trusted_dealer else 1
        for p in range(start, self.number_of_parties):
            if p != source_pid: self.send_as_jar(value, p)
    
    def broadcast_from[T](self, value: T, source_pid: int) -> T:
        if self.pid == 0:
            return T()
        
        if self.pid == source_pid:
            self.send_to_all_from(value, source_pid)
            return value
        elif self.pid > 0:
            return self.receive_as_jar(source_pid, T)

    def collect[T](self, value: T, include_trusted_dealer: bool = False, exclude_parties: Set[int] = Set[int]()) -> list[T]:
        if self.pid == 0 and not include_trusted_dealer:
            return []
        
        start_pid = 0 if include_trusted_dealer else 1
        collection = []

        for p in range(start_pid, self.pid):
            if p not in exclude_parties:
                collection.append(self.receive_as_jar(p, type(value)))
            if self.pid not in exclude_parties:
                self.send_as_jar(value, p)
        
        if self.pid not in exclude_parties:
            collection.append(value)
        
        for p in range(self.pid + 1, self.number_of_parties):
            if self.pid not in exclude_parties:
                self.send_as_jar(value, p)
            if p not in exclude_parties:
                collection.append(self.receive_as_jar(p, type(value)))

        return collection
    
    def collect_at[T](self, value: T, target_pid: int) -> list[T]:
        assert target_pid != 0, "Collecting at trusted dealer only is forbidden"
        
        if self.pid == 0:
            return []

        if self.pid != target_pid:
            self.send_as_jar(value, target_pid)
            return []
        else:
            return [(self.receive_as_jar(p, type(value)) if p != self.pid else value) for p in range(1, self.number_of_parties)]

    def sync_parties(self: MPCComms[TP], lite: bool = True):
        with self.randomness.seed_switch(-1):
            control_elem = int.rand(1 << 62, "uniform")
        
        if lite:
            if self.pid == 0:
                for p in range(1, self.number_of_parties):
                    from_p = self.receive_as_jar(p, T=type(control_elem))
                    assert from_p == control_elem, f"ERROR! CP{self.pid} <-/-> CP{p} out of sync."
                
                for p in range(1, self.number_of_parties):
                    self.send_as_jar(control_elem, p)
            else:
                self.send_as_jar(control_elem, 0)
                return_elem = self.receive_as_jar(0, T=type(control_elem))
                assert return_elem == control_elem, f"ERROR! CP{self.pid} <-/-> CP0 out of sync."
        else:        
            for p in range(self.number_of_parties - 1, self.pid, -1):
                from_p = self.receive_as_jar(p, T=type(control_elem))
                assert from_p == control_elem, f"ERROR! CP{self.pid} <-/-> CP{p} out of sync."
                self.send_as_jar(control_elem, p)
            
            for p in range(self.pid - 1, -1, -1):
                self.send_as_jar(control_elem, p)
                from_p = self.receive_as_jar(p, T=type(control_elem))
                assert from_p == control_elem, f"ERROR! CP{self.pid} <-/-> CP{p} out of sync."
    
    def clean_up(self: MPCComms[TP]):
        for socket in self.sockets.values():
            close_socket(socket.sock_fd)
    
    def print_stats(self: MPCComms[TP], file_stream = None):
        self.stats.print_comms_stats(file_stream)
    
    def reset_stats(self: MPCComms[TP]):
        self.stats.reset_comms_stats()
    
    def print_fp(self, value, modulus, debug = False, message = ""):
        if self.pid == 0:
            return value.zeros_float()
        
        revealed_value = self.reveal(value, modulus=modulus)
        value_float = fp_to_double(revealed_value, modulus)

        if self.pid == 2 and debug:
            print(f'{self.pid}: Revealed value -{message}- {revealed_value}')
            print(f'{self.pid}: Float value -{message}- {value_float}')
        
        return value_float
    
    def sequential(self, func, skip_dealer, *args, **kwargs):
        first_pid = 1 if skip_dealer else 0
        if self.pid > first_pid: self.receive(self.pid - 1, T=int)
        func(*args, **kwargs)
        if self.pid < self.number_of_parties - 1: self.send(1, self.pid + 1)

    def __setup_channels(self, expect_data_sharing):
        # Sockets are spawned per corresponding party
        for p_1 in staticrange(2):
            for p_2 in staticrange(p_1 + 1, 3):
                if (p_1 != self.pid and p_2 != self.pid):
                    continue

                serveraddr_or_port = P0_P1_SOCKET_PATH if self.local else str(PORT_P0_P1)
                if (p_1 == 0 and p_2 == 1):
                    serveraddr_or_port = P0_P1_SOCKET_PATH if self.local else str(PORT_P0_P1)
                elif (p_1 == 0 and p_2 == 2):
                    serveraddr_or_port = P0_P2_SOCKET_PATH if self.local else str(PORT_P0_P2)
                elif (p_1 == 1 and p_2 == 2):
                    serveraddr_or_port = P1_P2_SOCKET_PATH if self.local else str(PORT_P1_P2)
                else:
                    raise ValueError('Invalid CP node pairs!')
                
                pother = p_1 + p_2 - self.pid

                if p_1 == self.pid: ip_address = '0.0.0.0'
                elif pother == 0: ip_address = TRUSTED_DEALER
                elif pother == 1: ip_address = COMPUTING_PARTIES[0]
                elif pother == 2: ip_address = COMPUTING_PARTIES[1]
                else: raise ValueError('Invalid CP node pairs!')
                
                self.sockets[pother] = CSocket(unix_file_address=serveraddr_or_port) if self.local else CSocket(ip_address=ip_address, port=serveraddr_or_port)

                if (p_1 == self.pid):
                    self.sockets[pother].open_channel()
                else:
                    if (not connect(self.sockets[pother])):
                        raise ValueError(f"CP{self.pid} failed to connect to CP{pother}")

        if expect_data_sharing:
            assert not self.local, "Local data sharing not supported yet"
            # Data sharing host socket is at self.sockets[self.pid]
            self.sockets[self.pid] = CSocket(ip_address='0.0.0.0', port=str(DATA_SHARING_PORTS[self.pid]))
            self.sockets[self.pid].open_channel()
