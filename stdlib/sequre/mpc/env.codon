from stats import MPCStats
from randomness import MPCRandomness
from comms import MPCComms
from arithmetic import MPCArithmetic
from polynomial import MPCPolynomial
from boolean import MPCBoolean
from fp import MPCFP
from he import MPCHE


class MPCEnv[TP]:
    base_modulus: TP
    pid: int
    stats: MPCStats
    randomness: MPCRandomness
    comms: MPCComms[TP]
    arithmetic: MPCArithmetic[TP]
    polynomial: MPCPolynomial[TP]
    boolean: MPCBoolean[TP]
    fp: MPCFP[TP]
    he: MPCHE[TP]

    local: bool

    def __init__(self: MPCEnv[TP], pid: int, local: bool, base_modulus: TP, expect_data_sharing: bool = False):
        self.base_modulus = base_modulus
        self.pid = pid
        self.local = local

        # Stats
        self.stats = MPCStats(self.pid)

        # PRGs & Network
        self.randomness = MPCRandomness(self.stats)
        self.comms = MPCComms[TP](
            self.randomness,
            self.local,
            expect_data_sharing)
        
        # MPC
        self.arithmetic = MPCArithmetic[TP](self.comms)
        self.polynomial = MPCPolynomial[TP](self.arithmetic)
        self.boolean = MPCBoolean[TP](self.polynomial)
        self.fp = MPCFP[TP](self.boolean)
        
        # HE
        self.he = MPCHE(comms=self.comms)
        print(f'CP{self.pid}:\tMPC initialized.')
    
    def council(self, value) -> List[bool]:
        return self.comms.collect(bool(value))
    
    def done(self):
        self.comms.sync_parties()
        self.comms.clean_up()
        print(f'CP{self.pid}:\tDone.')


class BaseModulusSwitch[TP]:
    mpc: MPCEnv[TP]
    old_modulus: TP
    new_modulus: TP

    def __init__(self, mpc: MPCEnv[TP], modulus: TP):
        self.mpc = mpc
        self.old_modulus = mpc.base_modulus
        self.new_modulus = modulus

    def __enter__(self):
        self.mpc.base_modulus = self.new_modulus

    def __exit__(self):
        self.mpc.base_modulus = self.old_modulus


@extend
class MPCEnv:
    def base_modulus_switch(self, modulus: TP):
        return BaseModulusSwitch(self, modulus)
