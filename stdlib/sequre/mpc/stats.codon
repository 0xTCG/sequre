class MPCStats:
    # Performance warning: States are pretty big arrays. Might introduce some overhead.
    pid: int

    # Security stats
    secure_add_count: int
    secure_sub_count: int
    secure_mul_count: int
    secure_matmul_count: int
    secure_matmul_complexity: int
    secure_bootstrap_count: int
    secure_rescale_count: int
    secure_mhe_mpc_switch_count: int

    # MPC comms stats
    bytes_sent: int
    requests_sent: int

    # MPC arithmetics stats
    partitions_count: int
    reconstructs_count: int

    # MPC FP stats
    truncations_count: int
    
    def __init__(self: MPCStats, pid: int):
        self.pid = pid
    
    def reset_stats(self):
        self.reset_security_stats()
        self.reset_comms_stats()
        self.reset_arithmetic_stats()
        self.reset_fp_stats()
    
    def print_stats(self, file_stream = None):
        greeting_message = "Statistics:\n--------------------------"
        if file_stream is not None: file_stream.write(f'{greeting_message}\n')
        print(greeting_message)
        self.print_security_stats(file_stream)
        self.print_comms_stats(file_stream)
        self.print_arithmetic_stats(file_stream)
        self.print_fp_stats(file_stream)

    def reset_security_stats(self):
        self.secure_add_count = 0
        self.secure_sub_count = 0
        self.secure_mul_count = 0
        self.secure_matmul_count = 0
        self.secure_matmul_complexity = 0
        self.secure_bootstrap_count = 0
        self.secure_rescale_count = 0
        self.secure_mhe_mpc_switch_count = 0
    
    def print_security_stats(self, file_stream = None):
        partitioning_message = f"Secure additions: {self.secure_add_count} at CP{self.pid}.\n" \
                               f"Secure subtractions: {self.secure_sub_count} at CP{self.pid}.\n" \
                               f"Secure multiplications: {self.secure_mul_count} at CP{self.pid}.\n" \
                               f"Secure matrix multiplications: {self.secure_matmul_count} at CP{self.pid}.\n" \
                               f"Secure matrix multiplication complexity: {self.secure_matmul_complexity} at CP{self.pid}.\n" \
                               f"Secure bootstraps: {self.secure_bootstrap_count} at CP{self.pid}.\n" \
                               f"Secure rescales: {self.secure_rescale_count} at CP{self.pid}.\n" \
                               f"Secure MHE <-> MPC switches: {self.secure_mhe_mpc_switch_count} at CP{self.pid}"
        if file_stream is not None: file_stream.write(f'{partitioning_message}\n')
        print(partitioning_message)
    
    def reset_comms_stats(self):
        self.bytes_sent = 0
        self.requests_sent = 0
    
    def print_comms_stats(self, file_stream = None):
        bandwidth_message = f'Total bytes sent from CP{self.pid}: {self.bytes_sent}.'
        requests_message = f'Total send requests at CP{self.pid}: {self.requests_sent}.'
        if file_stream is not None:
            file_stream.write(f'{bandwidth_message}\n{requests_message}\n')
        print(f'{bandwidth_message}\n{requests_message}')
    
    def reset_arithmetic_stats(self):
        self.partitions_count = 0
        self.reconstructs_count = 0
    
    def print_arithmetic_stats(self, file_stream = None):
        partitioning_message = f"Beaver partitions: {self.partitions_count} at CP{self.pid}.\n" \
                               f"Beaver reconstructs: {self.reconstructs_count} at CP{self.pid}."
        if file_stream is not None: file_stream.write(f'{partitioning_message}\n')
        print(partitioning_message)
    
    def reset_fp_stats(self):
        self.truncations_count = 0
    
    def print_fp_stats(self, file_stream = None):
        truncations_message = f"FP truncations: {self.truncations_count} at CP{self.pid}."
        if file_stream is not None: file_stream.write(f'{truncations_message}\n')
        print(truncations_message)
