import prg

from stats import MPCStats

from copy import copy


class MPCRandomness:
    # Performance warning: States are pretty big arrays. Might introduce some overhead.
    pid: int
    stats: MPCStats
    prg_states: dict[int, tuple[array[u32], int]]
    
    def __init__(self: MPCRandomness, stats: MPCStats):
        self.pid = stats.pid
        self.stats = stats
        self.prg_states = dict[int, tuple[array[u32], int]]()
        self.reset_streams()
        
    def reset_streams(self):
        # prg.seed(0)
        self.prg_states[self.pid] = self.get_state()
        self.reset_seed(-1, hash('global'))
        
        for other_pid in set(range(3)) - {self.pid}:
            self.reset_seed(other_pid)
        
        self.switch_seed(self.pid)
    
    def get_state(self: MPCRandomness) -> tuple[array[u32], int]:
        return copy(prg._rnd.gen.state), prg._rnd.gen.next
    
    def set_state(self: MPCRandomness, state: tuple[array[u32], int]):
        prg._rnd.gen.state = state[0]
        prg._rnd.gen.next = state[1]

    def reset_seed(self: MPCRandomness, pid: int, seed: int = -1):
        seed = hash((min(self.pid, pid), max(self.pid, pid))) if seed == -1 else seed
        prg.seed(seed)
        self.prg_states[pid] = self.get_state()
        
    def switch_seed(self: MPCRandomness, pid: int):
        self.prg_states[self.pid] = self.get_state()
        self.set_state(self.prg_states[pid])
    
    def restore_seed(self: MPCRandomness, pid: int):
        self.prg_states[pid] = self.get_state()
        self.set_state(self.prg_states[self.pid])
    
    def freeze_seed(self: MPCRandomness, pid: int):
        self.prg_states[self.pid] = self.get_state()
        new_state, new_next = self.prg_states[pid]
        self.set_state((copy(new_state), new_next))
    
    def unfreeze_seed(self: MPCRandomness, pid: int):
        self.set_state(self.prg_states[pid])


class SeedSwitch:
        randomness: MPCRandomness
        switch_pid: int

        def __init__(self, randomness: MPCRandomness, switch_pid: int):
            self.randomness = randomness
            self.switch_pid = switch_pid

        def __enter__(self):
            self.randomness.switch_seed(self.switch_pid)

        def __exit__(self):
            self.randomness.restore_seed(self.switch_pid)


@extend
class MPCRandomness:
    def seed_switch(self, pid: int):
        return SeedSwitch(self, pid)
