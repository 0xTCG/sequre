"""
Fast modular multiplication for fixed modulus: (2 ** 127) - 1 using u256 integers.

Addapted and performance engineered based on the ideas from:
https://graphics.stanford.edu/~seander/bithacks.html#ModulusDivision
"""

RUN_TESTS = False


@extend
class UInt:
    @llvm
    def __new__(other: UInt[128]) -> UInt[N]:
        %0 = zext i{=N//2} %other to i{=N}
        ret i{=N} %0
    def __repr__(self: UInt[N]) -> str:
        self_cp = self
        int_str = ''
        while self_cp:
            remainder = 0
            quotient = UInt[N](0)
            # Euclidean division
            for bit_idx in staticrange(127, -1, -1):
                mask = int((self_cp & (UInt[N](1) << UInt[N](bit_idx))) != UInt[N](0))
                remainder = (remainder << 1) + mask
                if remainder >= 10:
                    quotient = (quotient << UInt[N](1)) + UInt[N](1)
                    remainder -= 10
                else: quotient = quotient << UInt[N](1)
            int_str = str(remainder) + int_str
            self_cp = quotient
        return int_str if int_str else '0'


u256 = UInt[256]
MODULUS = (u256(1) << u256(127)) - u256(1)


def modular_mul_u256u256(a: u256, b: u256) -> u256:
    n = a * b
    m = n
    while n > MODULUS:
        m = u256(0)
        while n:
            m += (n & MODULUS)
            n >>= u256(127)
        n = m
    if m == MODULUS: m = u256(0)
    return m


def modular_mul_u256u256_debranched(a: u256, b: u256) -> u256:
    n = a * b
    if n < MODULUS: return n
    if n == MODULUS: return u256(0)

    m = (n & MODULUS)
    n >>= u256(127)
    m += n
    m = (m & MODULUS) + (m >> u256(127))
    
    if m == MODULUS: return u256(0)
    
    return m

if RUN_TESTS:
    import prg
    import time


    for i in range(10000000):
        a = prg.randbelow_intn[u256](MODULUS, 127)
        b = prg.randbelow_intn[u256](MODULUS, 127)
        m1 = modular_mul_u256u256(a, b)
        m2 = modular_mul_u256u256_debranched(a, b)
        assert m1 == m2, f"Modular multiplications differ for {a} and {b}:\n\t{m1} != {m2}"


    s = time.time()
    for i in range(10000000):
        a = prg.randbelow_intn[u256](MODULUS, 127)
        b = prg.randbelow_intn[u256](MODULUS, 127)
        modular_mul_u256u256(a, b) + modular_mult_u256u256(a, b)
    e = time.time()
    print f"Modular mul 256 done in {e - s}s"


    s = time.time()
    for i in range(10000000):
        a = prg.randbelow_intn[u256](MODULUS, 127)
        b = prg.randbelow_intn[u256](MODULUS, 127)
        modular_mul_u256u256_debranched(a, b) + modular_mult_u256u256_debranched(a, b)
    e = time.time()
    print f"Modular mul 256 debranched done in {e - s}s"
