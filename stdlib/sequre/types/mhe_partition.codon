from numpy.ndarray import ndarray
from numpy.create import array

from ..utils.io import read_matrix


class MHEPartition[S, T]:
    _encrypted_data: list[CipherTensor[Ciphertext]]  # A CipherTensor per each pid
    _local_data: ndarray[S, T]

    @staticmethod
    def collective_load[dtype=int](mpc, data_path, rows, cols, binary):
        with open(data_path) as f:
            data = read_matrix(f, rows, cols, binary, TP=dtype)
        
        return MHEPartition[Tuple[int, int], dtype](
            _encrypted_data=[],
            _local_data=array(data, shape=(rows, cols), dtype=dtype))
