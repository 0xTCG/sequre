import time

from sequre.utils.param import NBIT_F
from sequre.utils.io import log


def assert_eq(name, result, expected, silent_pass = False):
    assert (result == expected).all(), f'{name} failed! Result: {result.__repr__()}.\n\nExpected: {expected.__repr__()}'
    if not silent_pass: print(f'{name} passed.')


def assert_geq(name, result, expected, silent_pass = False):
    assert (result >= expected).all(), f'{name} failed! Result: {result.__repr__()}.\n\nExpected to be greater than: {expected.__repr__()}'
    if not silent_pass: print(f'{name} passed.')


def assert_leq(name, result, expected, silent_pass = False):
    assert (result <= expected).all(), f'{name} failed! Result: {result.__repr__()}.\n\nExpected to be greater than: {expected.__repr__()}'
    if not silent_pass: print(f'{name} passed.')


def assert_eq_approx(name, result, expected, error: float = 0.018, silent_pass = False):
    # Scale error with the fractional size precision
    error += 1.0 / (2 ** NBIT_F)
    
    check: bool = ((expected - error) < result).all() and (result < (expected + error)).all()
    assert check, f'{name} failed! Result: {result.__repr__()}.\n\nExpected: {expected.__repr__()}'
    if not silent_pass: print(f'{name} passed.')


def time_frame(mpc, func, name, modulus, *args):
    mpc.stats.reset_stats()
    local_suffix = '_local' if mpc.local else '_online'
    alg_structure = 'Ring' if modulus.popcnt() == 1 else 'Field'

    stats_file_path = f'results/{"_".join(name.lower().split())}_stats_CP{mpc.pid}{local_suffix}_on_{alg_structure.lower()}.txt'
    results_file_path = f'results/{"_".join(name.lower().split())}_results_CP{mpc.pid}{local_suffix}_on_{alg_structure.lower()}.txt'

    with open(stats_file_path, 'w') as stats_f:
        mpc.stats.reset_stats()
        s = time.time()
        result = func(mpc, modulus, *args)
        e = time.time()

        runtime_message = f'\n{name} done in {e - s}s at CP{mpc.pid}\n'
        stats_f.write(f'{alg_structure} size: {modulus}')
        stats_f.write(runtime_message)
        mpc.stats.print_stats(stats_f)
        print(runtime_message)

        if result is not None:
            log(
                name=name,
                data=result.reveal(mpc).tolist(),
                path=results_file_path,
                mode='w',
                separator=' ')
        
    mpc.comms.sync_parties()
