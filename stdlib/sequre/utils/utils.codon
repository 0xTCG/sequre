import prg
import internal.gc as gc

from param import FIELD_SIZE, RING_SIZE, MODULUS_BITS, NUM_BYTES, AF_PREFIX, int_t


def get_address(port: int) -> str:
    return f"{AF_PREFIX}{port}"


def shapeof(value):
    if isinstance(value, list[list]):
        return value.shape()
    elif isinstance(value, list):
        return len(value)
    elif isinstance(value, int) or isinstance(value, int_t):
        return False
    
    raise TypeError(f'Invalid type within shapeof method: {value}')


def field_size[TP]():
    if isinstance(TP, int_t) or isinstance(TP, list[int_t]) or isinstance(TP, list[list[int_t]]):
        return NUM_BYTES
    elif isinstance(TP, int) or isinstance(TP, list[int]) or isinstance(TP, list[list[int]]):
        return 1  # Small field characteristics are expected to be less than 128.

    raise TypeError("Invalid type of field/ring integer")


def zeros[TP = int_t](rows: int, cols: int) -> list[list[TP]]:
    return [[TP(0) for _ in range(cols)] for _ in range(rows)]


def zeros_vec[TP = int_t](size: int) -> list[TP]:
    return [TP(0) for _ in range(size)]


def ones[TP = int_t](rows: int, cols: int) -> list[list[TP]]:
    return [[TP(1) for _ in range(cols)] for _ in range(rows)]


def ones_vec[TP = int_t](size: int) -> list[TP]:
    return [TP(1) for _ in range(size)]

def one_hot_vector[TP](idx: int, size: int) -> list[TP]:
    one_hot_vec = zeros_vec(size, TP=TP)
    one_hot_vec[idx] = TP(1)
    return one_hot_vec

def arange[TP](size: int) -> list[TP]:
    return [TP(i) for i in range(size)]


def switch_pair[T1, T2](t: tuple[T1, T2]) -> tuple[T2, T1]:
    return t[1], t[0]


def cartesian(l_1: list[str], l_2: list[str]) -> list[str]:
    c = list(len(l_1) * len(l_2))
    for e_1 in l_1:
        for e_2 in l_2:
            c.append(f'{e_1} {e_2}')
    return c


def offline_evaluate_poly[TP](x: list[TP], coefs: list[TP], exps: list[list[int]], modulus: TP) -> TP:
    result = TP(0)
    for coef, exp in zip(coefs, exps):
        result = result.add_mod(x.reduce_mul_powers(exp, modulus).mul_mod(coef, modulus), modulus)
    
    return result


def __rand_int[TP](upper_limit: TP) -> TP:
    if isinstance(upper_limit, int_t):
        if upper_limit == FIELD_SIZE or upper_limit == RING_SIZE:
            # Assuming that in FP config NBIT_K + NBIT_F + NBIT_V <= MODULUS_BITS - 1
            return prg.getrandbits_intn(MODULUS_BITS - 1, TP=TP)
        return TP(prg.randint(1, int(upper_limit)))
    if isinstance(upper_limit, int):
        return prg.randint(1, upper_limit)
    if isinstance(upper_limit, u64):
        return u64(prg.randint(1, int(upper_limit)))
    
    raise TypeError(f"Random generator: Invalid type for the upper limit: {upper_limit}")


def __rand_vec[TP](length: int, base: TP) -> list[TP]:
    l = list[TP](length)
    for _ in range(length): l.append(__rand_int(base))
    return l


def __rand_mat[TP](shape: list[int], base: TP) -> list[list[TP]]:
    m, n = shape
    l = list[list[TP]](m)
    for _ in range(m): l.append(__rand_vec(n, base))
    return l


def __rand_bits(bitlen: int) -> int_t:
    return prg.getrandbits_intn(bitlen, TP=int_t)


def __rand_vec_bits(length: int, bitlen: int) -> list[int_t]:
    l = list[int_t](length)
    for _ in range(length): l.append(__rand_bits(bitlen))
    return l


def __rand_mat_bits(shape: list[int], bitlen: int) -> list[list[int_t]]:
    m, n = shape
    l = list[list[int_t]](m)
    for _ in range(m): l.append(__rand_vec_bits(n, bitlen))
    return l
