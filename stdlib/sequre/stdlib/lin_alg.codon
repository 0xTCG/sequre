from ..attributes import sequre, mhe_cipher_opt
from ..types.internal import Internal as sq
from ..utils.param import EIGEN_DECOMP_ITER_PER_EVAL


@sequre
def householder(mpc, x):
    xdot = sq.dot(mpc, x)
    shift = sq.sqrt(mpc, xdot) * ((x[0] > 0).astype(float) * 2 - 1)
    v = x.copy()
    v[0] += shift

    _inter = v / sq.sqrt(mpc, (xdot + x[0] * shift) * 2)
    
    from numpy.ndarray import ndarray
    if isinstance(x, ndarray):
        print("DEBUG", mpc.pid, _inter, v)
    else:
        print("DEBUG", mpc.pid, _inter.reveal(mpc), v.reveal(mpc))
    
    return _inter


@sequre
def qr_fact_square(mpc, A):
    R = A.zeros()
    Q = A.zeros()
    B = A.zeros()

    for i in range(len(A) - 1):
        v = householder(mpc, A[0]).expand_dims()
        P = A.I - (v.T @ v) * 2

        Q[i:] = P if i == 0 else (P @ Q[i:])
        B = A @ P
        R[i:, i] = B[:, 0]
        A = B[1:, 1:]

    R[-1, -1] = B[1, 1]

    return Q, R


@sequre
def tridiag(mpc, A):
    Q = A.zeros() + A.I
    T = A.zeros()
    B = A.zeros()

    for i in range(len(A) - 2):
        x = A[0, 1:].pad_right(1)
        v = householder(mpc, x)[:-1].pad_left(1).expand_dims()
        P = A.I - (v.T @ v) * 2

        Q[:, i:] = Q[:, i:] @ P
        B = P @ A @ P

        T[i, i] = B[0, 0]
        T[i + 1, i] = B[1, 0]
        T[i, i + 1] = B[0, 1]
        A = B[1:, 1:]

    T[-2:, -2:] = B[1:3, 1:3]

    return T, Q


@sequre
def eigen_decomp(mpc, A, iter_per_eval = EIGEN_DECOMP_ITER_PER_EVAL):
    L = A[0].zeros()
    A, Q = tridiag(mpc, A)
    V = Q.T

    for i in range(len(A) - 1, 0, -1):
        for _ in range(iter_per_eval):
            shift = A.diag(A[i, i])
            Q, R = qr_fact_square(mpc, A - shift)
            A = Q @ R + shift
            V[:i + 1] = Q @ V[:i + 1]
            
        L[i] = A[i, i]
        A = A[:i, :i]

    L[0] = A[0, 0]
        
    return V, L


@sequre
@mhe_cipher_opt
def orthonormalize(mpc, A):
    v_cache = []
    Q = A.zeros() + A.I

    for i in range(len(A)):
        v = householder(mpc, A[0]).expand_dims()
        A = (A - (A @ v.T @ v) * 2)[1:, 1:]
        v_cache.append(v)

    for i in range(len(Q) - 1, -1, -1):
        Qsub = Q[:, i:]
        Q[:, i:] = Qsub - (Qsub @ v_cache[i].T @ v_cache[i]) * 2
    
    return Q
