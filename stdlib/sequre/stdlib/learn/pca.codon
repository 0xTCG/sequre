from numpy.create import zeros, array

from sequre.attributes import sequre
from sequre.stdlib.lin_alg import orthonormalize, eigen_decomp
from sequre.utils.utils import random_ints


@sequre
def pca_random_sketch(mpc, data, miss, data_mean, top_components_count, oversampling_count):
    kp = top_components_count + oversampling_count
    sketch = data_mean.zeros((kp, len(data_mean)))
    sketch_adjustment = data_mean.zeros((kp, len(data_mean)))
    bucket_count = zeros((kp,), dtype=int)

    for data_row, miss_row in zip(data, miss):
        with mpc.randomness.seed_switch(-1):
            bucket_index = kp.rand(kp) - 1
            rand_sign = (kp.rand(2) - 1) * 2 - 1

        # Flip miss bits so it points to places where g_mean should be subtracted
        flip_miss = (1 - miss_row)
        if rand_sign == -1:
            flip_miss = -flip_miss
            sketch[bucket_index] -= data_row
        else:
            sketch[bucket_index] += data_row
        
        sketch_adjustment[bucket_index] += flip_miss * data_mean
        bucket_count[bucket_index] += 1

    # Subtract the adjustment factor
    sketch = sketch.to_fp() - sketch_adjustment

    # Get rid of empty buckets and normalize nonempty ones. Loop will be removed after #49 is fixed.
    for i, bc in enumerate(bucket_count): sketch[i] /= bc
    sketch = sketch.filter(bucket_count)

    print(f"CP{mpc.pid}:\tPCA Initial sketch obtained.")
    return sketch


@sequre
def pca_powers_std(mpc, pca_sketch, data, miss, data_mean, data_std_inv, iterations_count):
    Q = orthonormalize(mpc, pca_sketch * data_std_inv)
    hit = (1 - miss).astype(float)

    for pit in range(iterations_count + 1):
        Q_scaled = Q * data_std_inv
        Q_scaled_gmean = Q_scaled * data_mean

        Q = data.astype(float) @ Q_scaled.T - hit @ Q_scaled_gmean.T
        if pit == iterations_count: break
        print(f"CP{mpc.pid}:\tPCA power iteration {pit + 1}/{iterations_count} ...")

        ortho_Q = orthonormalize(mpc, Q.T)
        Q = orthonormalize(mpc, (ortho_Q @ data.astype(float) - ortho_Q @ hit * data_mean) * data_std_inv)

    return Q


@sequre
def random_pca_std(mpc, data, miss, data_mean, data_std_inv, top_components_count, oversampling_count, power_iterations_count, filtered_data_size):
    pca_sketch = pca_random_sketch(mpc, data, miss, data_mean, top_components_count, oversampling_count)
    Q = pca_powers_std(mpc, pca_sketch, data, miss, data_mean, data_std_inv, power_iterations_count)
    Z = Q.T / filtered_data_size
    U = eigen_decomp(mpc, Z @ Z.T)[0][:top_components_count, :len(pca_sketch)]
    return U, Z


def generate_sketch_matrix(shape):
    sketch_matrix = array(random_ints(shape, upper_limit=1))
    return sketch_matrix / sketch_matrix.sum(axis=1).expand_dims(axis=1)


@sequre
def pca_powers_non_std(mpc, pca_sketch, data, iterations_count):
    for pit in range(iterations_count):
        print(f"CP{mpc.pid}:\tPCA power iteration {pit + 1}/{iterations_count} ...")
        pca_sketch = orthonormalize(mpc, pca_sketch @ data.T) @ data
    
    return pca_sketch @ data.T


@sequre
def random_pca_non_std(mpc, data, data_mean, top_components_count, oversampling_count, power_iterations_count):
    sketch_size = top_components_count + oversampling_count
    sketch_matrix = generate_sketch_matrix((sketch_size, len(data)))
    mean_cntr_data = data.astype(float) - data_mean
    pca_sketch = sketch_matrix @ mean_cntr_data
    
    P = pca_powers_non_std(mpc, pca_sketch, mean_cntr_data, power_iterations_count)
    Z = P @ P.T
    
    return Z.via_mpc(lambda stensor: eigen_decomp(mpc, stensor)[0][:top_components_count, :sketch_size])
