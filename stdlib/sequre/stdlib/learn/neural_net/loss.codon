from sequre import sequre
from sequre.stdlib.learn.neural_net.constants import SUPPORTED_LOSSES, HINGE_LOSS


@sequre
def hinge_loss(mpc, y, output):
    hinge = 1 - y * output
    return hinge * (hinge > 0).astype(type(y._internal_type))


@sequre
def dhinge_loss(mpc, y, output):
    return (-y * ((1 - y * output) > 0).astype(type(y._internal_type)))


def loss(mpc, y, output, loss: str):
    assert loss in SUPPORTED_LOSSES, f"Neural net: loss {loss} is not supported"
    
    if loss == HINGE_LOSS:
        _loss = hinge_loss(mpc, y, output)

    # Pre-normalize for downstream computation
    return _loss / len(y)


def dloss(mpc, y, output, loss: str):
    assert loss in SUPPORTED_LOSSES, f"Neural net: loss {loss} is not supported"
    
    if loss == HINGE_LOSS:
        _dloss = dhinge_loss(mpc, y, output)

    # Pre-normalize for downstream computation
    return _dloss / len(y)
