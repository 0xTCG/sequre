from sequre.types.multiparty_union import MPU
from sequre.types.multiparty_partition import MPP


def batch(mpc, data, batch_size: int = 0, batch_count: int = 0):
    assert bool(batch_size) ^ bool(batch_count), "Invalid batching parameters: either size or count should be passed"

    if isinstance(data, MPU) or isinstance(data, MPP):
        data_size = data.shape_local[0]
    else:
        data_size = data.shape[0]
        
    if batch_size == 0:
        batch_size = data_size // batch_count
    elif batch_count == 0:
        if isinstance(data, MPU) or isinstance(data, MPP):
            if mpc.pid:
                num_parties = (mpc.comms.number_of_parties - 1)
                assert batch_size % num_parties == 0, f"Batching: the batch size {batch_size} cannot be equally distributed between {num_parties}"
                batch_size //= num_parties
        batch_count = (data_size + batch_size - 1) // batch_size
    
    if isinstance(data, MPU) or isinstance(data, MPP):
        return [data.getitem_local(slice(start=i * batch_size, stop=(i + 1) * batch_size, step=1)) for i in range(batch_count)]
    
    return [data[i * batch_size:(i + 1) * batch_size] for i in range(batch_count)]
