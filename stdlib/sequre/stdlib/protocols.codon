from sequre.attributes import sequre
from sequre.types.shared_tensor import SharedTensor as Stensor
from ..utils.param import MODULUS_BITS, int_t, DEBUG
from ..types.utils import num_to_bits


@sequre
def prefix_carry(mpc, s, p, k):
    """
    TODO: #143 Solution bellow can be improved.
    See chapters 6.1 and 6.4 in
        Unconditionally Secure Constant-Rounds MPC for Equality, Comparison, Bits and Exponentiation
        by Damgard et al.
    """
    modulus = s.modulus
    s_t = s.T
    p_t = p.T
    k_t = k.T

    convolution = [s_t.share[0], p_t.share[0], k_t.share[0]]
    prefix_convolutions = [Stensor(convolution, modulus)]
    
    for i in range(len(s_t) - 1):
        propagate = prefix_convolutions[-1] * p_t[i + 1]
        
        propagate[0] += s_t[i + 1]
        propagate[2] += k_t[i + 1]

        prefix_convolutions.append(propagate)

    prefix_carries = [e.share[0] for e in prefix_convolutions]

    return Stensor(prefix_carries, modulus).T


@sequre
def carries(mpc, a_bits, b_bits):
    """
    Computes the carry-overs when adding the two provided secret-shared bit representations.
    See chapter 6.3 in
        Unconditionally Secure Constant-Rounds MPC for Equality, Comparison, Bits and Exponentiation
        by Damgard et al.
    """
    s = a_bits * b_bits
    p = a_bits + b_bits - s * 2
    k = 1 - s - p
    return prefix_carry(mpc, s, p, k)


@sequre
def bit_add(mpc, a_bits, b_bits):
    """
    Performs the bitwise addition of the inputs -- the secret-shared bit-decompositions.
    See chapter 6.2 in
        Unconditionally Secure Constant-Rounds MPC for Equality, Comparison, Bits and Exponentiation
        by Damgard et al.
    """
    c = carries(mpc, a_bits, b_bits)
    c_t = c.T
    d_t = (a_bits + b_bits - c * 2).T
    d_t[1:] = d_t[1:] + c_t[:-1]
    d_t[0] = a_bits.T[0] + b_bits.T[0] - c_t[0] * 2
    d_t.share.append(c_t.share[-1])  # TODO: #144 Implement append/pop in SharedTensor

    return d_t.T


def _helper(mpc, a, small_modulus, modulus, dbits):
    field_bits = num_to_bits([modulus], MODULUS_BITS + 1, True)
    field_bits_spanned = [field_bits[0] for _ in range(len(a))]

    q = mpc.boolean.flip_bit(mpc.boolean.less_than_bits_public(
        list(reversed(dbits.transpose())).transpose(),
        list(reversed(field_bits_spanned.transpose())).transpose(), small_modulus), small_modulus)
    fbits = num_to_bits([((int_t(1) << MODULUS_BITS) - modulus)], MODULUS_BITS + 1, True)
    fbits_spanned = [fbits[0] for _ in range(len(a))]

    for i in range(len(fbits_spanned)): fbits_spanned[i] = fbits_spanned[i].mul_mod(q[i], small_modulus)
    fbits_spanned_int_t = fbits_spanned.to_int_t(modulus)

    return Stensor(fbits_spanned_int_t, int_t(small_modulus))


@sequre
def bit_decomposition(mpc, a, bitlen, small_modulus, modulus):
    if DEBUG: assert bitlen <= MODULUS_BITS, "Cannot cut off more bits than the size of field"

    r, rbits = a.generate_random_bits(mpc, MODULUS_BITS, 0, len(a), True, small_modulus)

    c = (a - r).reveal(mpc)
    cbits = c.to_bits(mpc, MODULUS_BITS, small_modulus)
    
    # cbits.share = cbits.share if mpc.pid == 1 else cbits.share.zeros()
    # cbits.public = False

    dbits = bit_add(mpc, rbits, cbits)
    fbits_spanned = _helper(mpc, a.share, small_modulus, modulus, dbits.share.to_int())

    hbits = bit_add(mpc, dbits, fbits_spanned)
    cutoff = MODULUS_BITS - bitlen
    
    return hbits.T[:-2 - cutoff].T
