def permutations(
    pool: Generator[T], r: Optional[int] = None, T: type
) -> Generator[List[T]]:
    """
    (Patch for the original permutations method)
    Return successive r-length permutations of elements in the iterable.
    """

    def permutations_helper(
        pool: List[T], r: Optional[int], T: type
    ) -> Generator[List[T]]:
        n = len(pool)
        r: int = r if r is not None else n
        if r > n:
            return

        indices = list(range(n))
        cycles = list(range(n, n - r, -1))
        yield [pool[i] for i in indices[:r]]
        while n:
            b = -1
            for i in reversed(range(r)):
                cycles[i] -= 1
                if cycles[i] == 0:
                    _indices = indices[:i]
                    _indices.extend(indices[i + 1 :])
                    _indices.extend(indices[i : i + 1])
                    indices = _indices
                    cycles[i] = n - i
                else:
                    b = i
                    j = cycles[i]
                    indices[i], indices[-j] = indices[-j], indices[i]
                    yield [pool[i] for i in indices[:r]]
                    break
            if b == -1:
                return

    if r is not None and r.__val__() < 0:
        raise ValueError("r must be non-negative")
    if hasattr(pool, "__getitem__") and hasattr(pool, "__len__"):
        return permutations_helper(pool, r)
    else:
        return permutations_helper([a for a in pool], r)
