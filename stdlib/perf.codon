import time


@extend
class Dict:
    def pprint(self):
        for k, v in sorted(self.items(), key=lambda x: x[1], reverse=True):
            print(f"\t{k}:\t{v}")
        print("\n")


class PerfInterval(time.TimeInterval):
    """
    Utility class for performance logging
    """

    sep: str
    prefix: str
    log_path: str

    def __init__(self, msg: str, sep: str, prefix: str, log_path: str = "perf.txt"):
        super().__init__(0, msg)

        self.sep = sep
        self.prefix = prefix
        self.log_path = log_path

    def __exit__(self):
        print(self.report(self.msg))

        with open(self.log_path, "a+") as f:
            f.write(f"{self.prefix}{round(self.elapsed(), 7):.7f}{self.sep}")
            

def perf_timing(msg: str = "", sep: str = " | ", prefix: str = "") -> PerfInterval:
    """
    Example usage:

    .. code-block:: python

        from time import timing
        with perf_timing('foo function'):
            foo()  # prints runtime of foo
    """
    return PerfInterval(msg, sep, prefix)


GLOBAL_RUNTIME = Dict[str, float]()
GLOBAL_COUNTER = Dict[str, int]()


def __internal__perf_profile(name, func, *args, **kwargs):
    s = time.time()
    value = func(*args, **kwargs)
    e = time.time()
    if name in GLOBAL_RUNTIME: GLOBAL_RUNTIME[name] += (e - s)
    else: GLOBAL_RUNTIME[name] = (e - s)
    if name in GLOBAL_COUNTER: GLOBAL_COUNTER[name] += 1
    else: GLOBAL_COUNTER[name] = 1
    return value


def perf_profile(name):
    def decorator_profile(func):
        def wrapper(*args, **kwargs):
            return __internal__perf_profile(name, func, *args, **kwargs)
        return wrapper
    return decorator_profile


def perf_print_stats(prefix=""):
    runtime_per_invocation = {k: v for k, v in GLOBAL_RUNTIME.items() if k in GLOBAL_COUNTER}
    for k in runtime_per_invocation.keys():
        runtime_per_invocation[k] /= GLOBAL_COUNTER[k]
    
    if len(GLOBAL_RUNTIME):
        print(f"\n{prefix}Cummulative runtime: {sum(GLOBAL_RUNTIME.values())}")
        GLOBAL_RUNTIME.pprint()
    if len(GLOBAL_COUNTER):
        print(f"{prefix}Cummulative invocation count: {sum(GLOBAL_COUNTER.values())}")
        GLOBAL_COUNTER.pprint()
    if len(runtime_per_invocation):
        print(f"\n{prefix}Runtime per invocation: ")
        runtime_per_invocation.pprint()
