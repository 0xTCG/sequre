from time import TimeInterval

class PerfInterval(TimeInterval):
    """
    Utility class for performance logging
    """

    sep: str
    prefix: str
    log_path: str

    def __init__(self, msg: str, sep: str, prefix: str, log_path: str = "perf.txt"):
        super().__init__(0, msg)

        self.sep = sep
        self.prefix = prefix
        self.log_path = log_path

    def __exit__(self):
        print(self.report(self.msg))

        with open(self.log_path, "a+") as f:
            f.write(f"{self.prefix}{round(self.elapsed(), 7):.7f}{self.sep}")
            

def perf_timing(msg: str = "", sep: str = " | ", prefix: str = "") -> PerfInterval:
    """
    Example usage:

    .. code-block:: python

        from time import timing
        with perf_timing('foo function'):
            foo()  # prints runtime of foo
    """
    return PerfInterval(msg, sep, prefix)
