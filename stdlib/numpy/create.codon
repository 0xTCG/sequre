# Copyright (C) 2022-2023 Exaloop Inc. <https://exaloop.io>

from numpy.ndarray import ndarray, flagsobj

def _inner_type(t):
    if isinstance(t, List):
        return _inner_type(t[0])
    else:
        return t

def _extract_shape(t):
    if isinstance(t, List):
        rest = _extract_shape(t[0])
        return (len(t), *rest)
    else:
        return ()

def _flatten(t, shape, D: type):
    def helper(t, p, start: int, D: type):
        for s in t:
            if isinstance(s, List):
                start = helper(s, p, start, D)
            else:
                p[start] = D(s)
                start += 1
        return start

    p = Ptr[D](ndarray._count(shape))
    helper(t, p, 0, D)
    return p

def _validate_shape(t, shape):
    def error():
        raise ValueError('array dimensions mismatch (jagged arrays are not allowed)')

    if staticlen(shape) == 0:
        return
    else:
        if not hasattr(type(t), "__getitem__"):
            error()
        else:
            if len(t) != shape[0]:
                error()
            for s in t:
                _validate_shape(s, shape[1:])

def empty(shape, dtype: type = float, order: str = 'C'):
    if isinstance(shape, int):
        return empty((shape,), dtype, order)

    for s in shape:
        if s < 0:
            raise ValueError('negative dimensions are not allowed')

    ccontig = (order == 'C')
    fcontig = (order == 'F')
    if not (ccontig or fcontig):
        raise ValueError("'order' must be 'C' or 'F'")

    data = Ptr[dtype](ndarray._count(shape))
    return ndarray._new_contig(shape, data, fcontig=fcontig)

def empty_like(prototype: ndarray[S,T], dtype: type = NoneType, order: str = 'K', S: type, T: type):
    if dtype is NoneType:
        return empty_like(prototype, dtype=T, order=order)

    if order == 'K' or order == 'A':
        order = 'F' if prototype.flags.f_contiguous and not prototype.flags.c_contiguous else 'C'

    return empty(prototype.shape, dtype, order)

def _array(a, dtype: type = NoneType, copy: bool = True, order: str = 'K'):
    D = type(_inner_type(a))
    if dtype is NoneType:
        return _array(a, D, copy, order)

    ndarray._check_order(order)

    if isinstance(a, ndarray):
        if copy:
            return a.copy(order=order)
        else:
            if order == 'K' or order == 'A':
                return a
            elif order == 'C':
                if a.flags.c_contiguous:
                    return a
                else:
                    return a.copy(order='C')
            elif order == 'F':
                if a.flags.f_contiguous:
                    return a
                else:
                    return a.copy(order='F')
    else:
        shape = _extract_shape(a)
        data = _flatten(a, shape, dtype)
        _validate_shape(a, shape)
        result = ndarray._new_contig(shape, data)

        if order == 'F':
            return result.astype(dtype, order='F')
        else:
            return result

def array(a, dtype: type = NoneType, copy: bool = True, order: str = 'K', ndim: Static[int] = 0):
    result = _array(a, dtype=dtype, copy=copy, order=order)
    if staticlen(result.shape) < ndim:
        o = ndarray._static_tuple(1, ndim - staticlen(result.shape))
        return result.reshape((*o, *result.shape))
    return result

def asarray(a, dtype: type = NoneType, order: str = 'K'):
    return array(a, dtype=dtype, copy=False, order=order)

def asanyarray(a, dtype: type = NoneType, order: str = 'K'):
    return asarray(a, dtype=dtype, order=order)

def zeros(shape, dtype: type = float, order: str = 'C'):
    result = empty(shape, dtype, order)
    str.memset(result.data.as_byte(), byte(0), result.nbytes)
    return result

def zeros_like(prototype: ndarray[S,T], dtype: type = NoneType, order: str = 'K', S: type, T: type):
    result = empty_like(prototype, dtype, order)
    str.memset(result.data.as_byte(), byte(0), result.nbytes)
    return result

def ones(shape, dtype: type = float, order: str = 'C'):
    result = empty(shape, dtype, order)
    result.map(lambda x: type(result.data[0])(1), inplace=True)
    return result

def ones_like(prototype: ndarray[S,T], dtype: type = NoneType, order: str = 'K', S: type, T: type):
    result = empty_like(prototype, dtype, order)
    result.map(lambda x: type(result.data[0])(1), inplace=True)
    return result

def full(shape, fill_value, dtype: type = NoneType, order: str = 'C'):
    if dtype is NoneType:
        result = empty(shape, type(fill_value), order)
        result.map(lambda x: fill_value, inplace=True)
        return result
    else:
        result = empty(shape, dtype, order)
        result.map(lambda x: type(result.data[0])(fill_value), inplace=True)
        return result

def full_like(prototype: ndarray[S,T], fill_value, dtype: type = NoneType, order: str = 'K', S: type, T: type):
    if dtype is NoneType:
        result = empty_like(prototype, type(fill_value), order)
        result.map(lambda x: fill_value, inplace=True)
        return result
    else:
        result = empty_like(prototype, dtype, order)
        result.map(lambda x: type(result.data[0])(fill_value), inplace=True)
        return result

def identity(n: int, dtype: type = float):
    result = zeros((n, n), dtype)
    p = result.data
    for i in range(n):
        p[i * (n + 1)] = dtype(1)
    return result

def _diag_count(k: int, n: int, m: int):
    count = 0
    if k < m and k > -n:
        count = min(n, m)
        if k > 0:
            d = max(m - n, 0)
            if k > d:
                count -= (k - d)
        elif k < 0:
            d = max(n - m, 0)
            if k < -d:
                count -= (-k - d)
    return count

def eye(N: int, M: Optional[int] = None, k: int = 0, dtype: type = float, order: str = 'C'):
    n: int = N
    m: int = M if M is not None else n
    result = zeros((n, m), dtype=dtype, order=order)
    p = result.data

    for i in range(_diag_count(k, n, m)):
        if k >= 0:
            result[i, i + k] = dtype(1)
        else:
            j = n - i - 1
            result[i - k, i] = dtype(1)

    return result

def diag(v, k: int = 0):
    if not isinstance(v, ndarray):
        return diag(array(v), k)

    data = v.data
    T = type(data[0])

    if staticlen(v.shape) == 1:
        count = v.shape[0]
        n = count + abs(k)
        result = zeros((n, n), dtype=T)
        p = result.data
        if k > 0:
            p += k
        elif k < 0:
            p += (-k) * n

        for i in range(count):
            q = v._ptr_for_index((i,), check=False)
            p[0] = q[0]
            p += n + 1

        return result
    elif staticlen(v.shape) == 2:
        n, m = v.shape
        sn, sm = v.strides
        new_shape = (_diag_count(k, n, m),)
        new_strides = (sn + sm,)
        new_data = data
        if new_shape[0] > 0:
            if k >= 0:
                new_data = v._ptr_for_index((0, k), check=False)
            else:
                new_data = v._ptr_for_index((-k, 0), check=False)
        new_flags = v.flags._unown()
        return ndarray._new(new_shape, new_strides, new_data, new_flags)
    else:
        compile_error('Input must be 1- or 2-d.')

def diagflat(v, k: int = 0):
    return diag(array(v).flatten(), k)

def tri(N: int, M: Optional[int] = None, k: int = 0, dtype: type = float):
    n: int = N
    m: int = M if M is not None else n
    result = zeros((n, m), dtype=dtype)
    p = result.data
    for i in range(n):
        for j in range(min(i + k + 1, m)):
            p[i*m + j] = dtype(1)
    return result

def triu(x, k: int = 0):
    if not isinstance(x, ndarray):
        return triu(array(x), k)

    T = type(x.data[0])

    if staticlen(x.shape) == 0:
        compile_error('Cannot call triu on 0-d array.')
    elif staticlen(x.shape) == 1:
        n = x.shape[0]
        result = zeros((n, n), dtype=T)
        p = result.data
        for i in range(n):
            for j in range(max(0, i + k), n):
                p[i*n + j] = x[j]
        return result
    else:
        y = x.copy()
        n, m = x.shape[-2], x.shape[-1]
        pre = ndarray._static_tuple(slice(None, None, None), staticlen(x.shape) - 2)
        for i in range(n):
            for j in range(min(i + k, m)):
                y[(*pre, i, j)] = T(0)
        return y

def tril(x, k: int = 0):
    if not isinstance(x, ndarray):
        return tril(array(x), k)

    T = type(x.data[0])

    if staticlen(x.shape) == 0:
        compile_error('Cannot call tril on 0-d array.')
    elif staticlen(x.shape) == 1:
        n = x.shape[0]
        result = zeros((n, n), dtype=T)
        p = result.data
        for i in range(n):
            for j in range(min(i + k + 1, n)):
                p[i*n + j] = x[j]
        return result
    else:
        y = x.copy()
        n, m = x.shape[-2], x.shape[-1]
        pre = ndarray._static_tuple(slice(None, None, None), staticlen(x.shape) - 2)
        for i in range(n):
            for j in range(max(0, i + k + 1), m):
                y[(*pre, i, j)] = T(0)
        return y

def vander(x, N: Optional[int] = None, increasing: bool = False):
    if not isinstance(x, ndarray):
        return vander(array(x), N, increasing)

    if staticlen(x.shape) != 1:
        compile_error('x must be a one-dimensional array or sequence.')

    T = type(x.data[0])
    n: int = x.shape[0]
    m: int = N if N is not None else n
    result = zeros((n, m), dtype=T)
    p = result.data

    for i in range(n):
        base = x._ptr_for_index((i,), check=False)[0]
        for j in range(m):
            power = j if increasing else m - j - 1
            p[i*m + j] = base ** power

    return result

@pure
@llvm
def _signbit(x: float) -> bool:
    %y = bitcast double %x to i64
    %z = icmp slt i64 %y, 0
    %b = zext i1 %z to i8
    ret i8 %b

_imin: Static[int] = -9223372036854775808
_imax: Static[int] = 9223372036854775807

def _safe_ceil(value: float):
    import math

    ivalue = math.ceil(value)
    if math.isnan(ivalue):
        raise ValueError('arange: cannot compute array length')

    if not (float(_imin) <= ivalue <= float(_imax)):
        raise OverflowError('arange: overflow while computing length')

    return int(ivalue)

def arange(start: float, stop: float, step: float, dtype: type = float):
    if step == 0.0:
        raise ValueError('step cannot be zero')

    delta = stop - start
    tmp_len = delta / step

    length = 0
    if tmp_len == 0.0 and delta != 0.0:
        if _signbit(tmp_len):
            length = 0
        else:
            length = 1
    else:
        length = _safe_ceil(tmp_len)

    if length <= 0:
        return empty(0, dtype=dtype)

    result = empty(length, dtype=dtype)
    p = result.data
    i = start
    j = 0
    while (i < stop) if step > 0.0 else (i > stop):
        p[j] = dtype(i)
        j += 1
        i += step

    return result

@overload
def arange(start: float, stop: float, dtype: type = float):
    return arange(start, stop, 1.0, dtype)

@overload
def arange(stop: float, dtype: type = float):
    return arange(0.0, stop, 1.0, dtype)

@overload
def arange(start: int, stop: int, step: int, dtype: type = int):
    length = len(range(start, stop, step))
    result = empty(length, dtype=dtype)
    p = result.data
    j = 0

    for i in range(start, stop, step):
        p[j] = dtype(i)
        j += 1

    return result

@overload
def arange(start: int, stop: int, dtype: type = int):
    return arange(start, stop, 1, dtype)

@overload
def arange(stop: int, dtype: type = int):
    return arange(0, stop, 1, dtype)

def linspace(start: float, stop: float, num: int = 50,
             endpoint: bool = True, retstep: Static[int] = False,
             dtype: type = float):
    import math

    if num < 0:
        raise ValueError(f'Number of samples, {num}, must be non-negative.')

    delta = stop - start
    div = (num - 1) if endpoint else num
    step = delta / div

    result = empty(num, dtype=dtype)
    p = result.data

    if div > 0:
        if step == 0:
            for i in range(num):
                p[i] = dtype(((i / div) * delta) + start)
        else:
            for i in range(num):
                p[i] = dtype((i * step) + start)
    else:
        for i in range(num):
            p[i] = dtype((i * delta) + start)

        step = math.nan

    if endpoint and num > 1:
        p[num - 1] = stop

    if retstep:
        return result, step
    else:
        return result

def _linlogspace(start: float, stop: float, num: int = 50, base: float = 10.0,
                 out_sign: int = 1, endpoint: bool = True, retstep: Static[int] = False,
                 dtype: type = float, log: Static[int] = False):
    import math

    if num < 0:
        raise ValueError(f'Number of samples, {num}, must be non-negative.')

    delta = stop - start
    div = (num - 1) if endpoint else num
    step = delta / div

    result = empty(num, dtype=dtype)
    p = result.data

    if div > 0:
        if step == 0:
            for i in range(num):
                y = ((i / div) * delta) + start
                if log:
                    y = math.pow(base, y)
                y *= out_sign
                p[i] = dtype(y)
        else:
            for i in range(num):
                y = (i * step) + start
                if log:
                    y = math.pow(base, y)
                y *= out_sign
                p[i] = dtype(y)
    else:
        for i in range(num):
            y = (i * delta) + start
            if log:
                y = math.pow(base, y)
            y *= out_sign
            p[i] = dtype(y)

        step = math.nan

    if endpoint and num > 1:
        y = stop
        if log:
            y = math.pow(base, y)
        y *= out_sign
        p[num - 1] = y

    if retstep:
        return result, step
    else:
        return result

def linspace(start: float, stop: float, num: int = 50,
             endpoint: bool = True, retstep: Static[int] = False,
             dtype: type = float):
    return _linlogspace(start=start, stop=stop, num=num,
                        endpoint=endpoint, retstep=retstep,
                        dtype=dtype, log=False)

def logspace(start: float, stop: float, num: int = 50,
             endpoint: bool = True, base: float = 10.0,
             retstep: Static[int] = False,
             dtype: type = float):
    return _linlogspace(start=start, stop=stop, num=num,
                        endpoint=endpoint, retstep=retstep,
                        dtype=dtype, base=base, log=True)

def geomspace(start: float, stop: float, num: int = 50,
              endpoint: bool = True, dtype: type = float):
    import math

    if start == 0 or stop == 0:
        raise ValueError('Geometric sequence cannot include zero')

    out_sign = 1
    if start < 0 and stop < 0:
        start, stop = -start, -stop
        out_sign = -out_sign

    start = start + (stop - stop)
    stop = stop + (start - start)
    log_start = math.log10(start)
    log_stop = math.log10(stop)

    return _linlogspace(start=log_start, stop=log_stop, num=num,
                        endpoint=endpoint, retstep=False,
                        dtype=dtype, base=10.0, out_sign=out_sign,
                        log=True)

def fromfunction(function, shape, dtype: type = float, **kwargs):
    result = empty(shape, dtype=dtype)
    for idx in ndarray._multirange(shape):
        p = result._ptr_for_index(idx, check=False)
        p[0] = function(*idx, **kwargs)
    return result

def fromiter(iterable, dtype: type, count: int = -1):
    if count < 0:
        return array([a for a in iterable], dtype=dtype)
    else:
        result = empty((count,), dtype=dtype)
        if count:
            p = result.data
            i = 0
            for a in iterable:
                p[i] = dtype(a)
                i += 1
                if i == count:
                    break
            if i != count:
                raise ValueError(f'iterator too short: Expected {count} but iterator had only {i} items.')
        return result

def frombuffer(buffer: str, dtype: type = float, count: int = -1, offset: int = 0):
    if count < 0:
        count = len(str) // ndarray._sizeof(dtype)

    p = Ptr[dtype](buffer.ptr + offset)
    return ndarray._new_contig((count,), p)

def broadcast_shapes(*args):
    def _largest(args):
        if staticlen(args) == 1:
            return args[0]

        a = args[0]
        b = _largest(args[1:])
        if staticlen(b) > staticlen(a):
            return b
        else:
            return a

    def _ensure_tuple(x):
        if isinstance(x, Tuple):
            return x
        else:
            return (x,)

    if staticlen(args) == 0:
        return ()

    args = tuple(_ensure_tuple(a) for a in args)
    for a in args:
        for i in a:
            if i < 0:
                raise ValueError('negative dimensions are not allowed')

    t = _largest(args)
    N: Static[int] = staticlen(t)
    ans = ndarray._zero_tuple(N)
    p = Ptr[int](__ptr__(ans).as_byte())

    for i in range(N):
        p[i] = t[i]

    for a in args:
        for i in range(len(a)):
            x = a[len(a) - 1 - i]
            q = p + (len(t) - 1 - i)
            y = q[0]

            if y == 1:
                q[0] = x
            elif x != 1 and x != y:
                raise ValueError('shape mismatch: objects cannot be broadcast to a single shape')

    return ans

def broadcast_to(x, shape):
    if not isinstance(x, ndarray):
        return broadcast_to(array(x), shape)

    if not isinstance(shape, Tuple):
        return broadcast_to(x, (shape,))

    N: Static[int] = staticlen(x.shape)

    if staticlen(shape) < N:
        compile_error('input operand has more dimensions than allowed by the axis remapping')

    shape1, shape2 = shape[:-N], shape[-N:]
    substrides = ndarray._zero_tuple(N)
    p = Ptr[int](__ptr__(substrides).as_byte())

    for i in range(N):
        a = x.shape[i]
        b = shape2[i]

        if a == b:
            p[i] = x.strides[i]
        elif a == 1:
            p[i] = 0
        else:
            raise ValueError(f'cannot broadcast array of shape {x.shape} to shape {shape}')

    z = ndarray._zero_tuple(staticlen(shape) - N)
    new_strides = (*z, *substrides)
    return ndarray._new(shape, new_strides, x.data, x.flags._unown())

def broadcast_arrays(*args):
    def _ensure_array(x):
        if isinstance(x, ndarray):
            return x
        else:
            return array(x)

    args = tuple(_ensure_array(a) for a in args)
    shapes = tuple(a.shape for a in args)
    bshape = broadcast_shapes(*shapes)
    return [broadcast_to(a, bshape) for a in args]

def meshgrid(*xi, copy: bool = True, sparse: Static[int] = False, indexing: Static[str] = 'xy'):
    def make_shape(i, ndim: Static[int]):
        t = ndarray._static_tuple(1, ndim)
        p = Ptr[int](__ptr__(t).as_byte())
        p[i] = -1
        return t

    def build_output(xi, i: int = 0, ndim: Static[int]):
        if staticlen(xi) == 0:
            return ()

        x = xi[0]
        y = array(x).reshape(make_shape(i, ndim))
        rest = build_output(xi[1:], i + 1, ndim)
        return (y, *rest)

    if indexing != 'xy' and indexing != 'ij':
        compile_error("Valid values for `indexing` are 'xy' and 'ij'.")

    ndim: Static[int] = staticlen(xi)
    s0 = ndarray._static_tuple(1, ndim)
    output = build_output(xi, ndim=ndim)

    if indexing == 'xy' and ndim > 1:
        # switch first and second axis
        output0 = output[0].reshape(1, -1, *s0[2:])
        output1 = output[1].reshape(-1, 1, *s0[2:])
        output = (output0, output1, *output[2:])

    if not sparse:
        # Return the full N-D matrix (not only the 1-D vector)
        return [a for a in broadcast_arrays(*output)]

    if copy:
        return [a.copy() for a in output]

    return [a for a in output]
