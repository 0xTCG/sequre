# Copyright (C) 2022-2023 Exaloop Inc. <https://exaloop.io>

import math

class SumRedux[T]:
    total: T

    def __init__(self):
        self.total = T(0)

    def accept(self, item: T, index: int):
        self.total += item

    def result(self, count: int):
        return self.total

    def empty():
        pass

    def done(self):
        return False

class ProdRedux[T]:
    total: T

    def __init__(self):
        self.total = T(1)

    def accept(self, item: T, index: int):
        self.total *= item

    def result(self, count: int):
        return self.total

    def empty():
        pass

    def done(self):
        return False

class MeanRedux[T]:
    total: float

    def __init__(self):
        self.total = 0.0

    def accept(self, item: T, index: int):
        self.total += float(item)

    def result(self, count: int):
        return self.total / count if count else math.nan

    def empty():
        pass

    def done(self):
        return False

class VarRedux[T]:
    m: float
    s: float

    def __init__(self):
        self.m = 0.0
        self.s = 0.0

    def accept(self, item: T, index: int):
        k = index + 1
        x = float(item)
        old_m = self.m
        self.m += (x - old_m) / k
        self.s += (x - self.m) * (x - old_m)

    def result(self, count: int):
        return self.s / count if count else math.nan

    def empty():
        pass

    def done(self):
        return False

class StdRedux[T]:
    m: float
    s: float

    def __init__(self):
        self.m = 0.0
        self.s = 0.0

    def accept(self, item: T, index: int):
        k = index + 1
        x = float(item)
        old_m = self.m
        self.m += (x - old_m) / k
        self.s += (x - self.m) * (x - old_m)

    def result(self, count: int):
        return math.sqrt(self.s / count) if count else math.nan

    def empty():
        pass

    def done(self):
        return False

class MinRedux[T]:
    m: Optional[T]

    def __init__(self):
        self.m = None

    def accept(self, item: T, index: int):
        if self.m is None or (item < self.m):
            self.m = item

    def result(self, count: int) -> T:
        return self.m

    def empty():
        raise ValueError('zero-size array to reduction operation minimum which has no identity')

    def done(self):
        return False

class MaxRedux[T]:
    m: Optional[T]

    def __init__(self):
        self.m = None

    def accept(self, item: T, index: int):
        if self.m is None or (item > self.m):
            self.m = item

    def result(self, count: int) -> T:
        return self.m

    def empty():
        raise ValueError('zero-size array to reduction operation maximum which has no identity')

    def done(self):
        return False

class PTPRedux[T]:
    hi: Optional[T]
    lo: Optional[T]

    def __init__(self):
        self.hi = None
        self.lo = None

    def accept(self, item: T, index: int):
        if self.hi is None or (item > self.hi):
            self.hi = item
        if self.lo is None or (item < self.lo):
            self.lo = item

    def result(self, count: int) -> T:
        return self.hi - self.lo

    def empty():
        raise ValueError('zero-size array to reduction operation maximum which has no identity')

    def done(self):
        return False

class ArgMinRedux[T]:
    m: Optional[T]
    i: int

    def __init__(self):
        self.m = None
        self.i = 0

    def accept(self, item: T, index: int):
        if self.m is None or (item < self.m):
            self.m = item
            self.i = index

    def result(self, count: int):
        return self.i

    def empty():
        raise ValueError('attempt to get argmin of an empty sequence')

    def done(self):
        return False

class ArgMaxRedux[T]:
    m: Optional[T]
    i: int

    def __init__(self):
        self.m = None
        self.i = 0

    def accept(self, item: T, index: int):
        if self.m is None or (item > self.m):
            self.m = item
            self.i = index

    def result(self, count: int):
        return self.i

    def empty():
        raise ValueError('attempt to get argmax of an empty sequence')

    def done(self):
        return False

class AnyRedux[T]:
    a: bool

    def __init__(self):
        self.a = False

    def accept(self, item: T, index: int):
        if item:
            self.a = True

    def result(self, count: int):
        return self.a

    def empty():
        pass

    def done(self):
        return self.a

class AllRedux[T]:
    a: bool

    def __init__(self):
        self.a = True

    def accept(self, item: T, index: int):
        if not item:
            self.a = False

    def result(self, count: int):
        return self.a

    def empty():
        pass

    def done(self):
        return not self.a
