from sequre import sequre_beaver


@sequre_beaver
def householder(mpc, x):
    xdot = mpc.dot(x, x)
    shift = mpc.sqrt(xdot) * ((x[0] > 0) * 2 - 1)
    v = x.copy()
    v[0] = v[0] + shift
    return  v / mpc.sqrt((xdot + x[0] * shift) * 2)


@sequre_beaver
def qr_fact_square(mpc, A):
    R = Q = B = A.zeros()

    for i in range(len(A) - 1):
        v = householder(mpc, A[0]).expand_dims()
        P = A.I - mpc.matmul(v.T, v) * 2

        Q[i:] = P if i == 0 else mpc.matmul(P, Q[i:])
        B = mpc.matmul(A, P)  
        R[i:, i] = B[:, 0]
        A = B[1:, 1:]

    R[-1][-1] = B[1][1]

    return Q, R


@sequre_beaver
def tridiag(mpc, A):
    Q = A.zeros() + A.I
    T = B = A.zeros()

    for i in range(len(A) - 2):
        x = A[0][1:].pad_right(1)
        v = householder(mpc, x)[:-1].pad_left(1).expand_dims()
        P = A.I - mpc.matmul(v.T, v) * 2

        Q[:, i:] = mpc.matmul(Q[:, i:], P)
        B = mpc.matmul(P, A, P)

        T[i][i] = B[0][0]
        T[i + 1][i] = B[1][0]
        T[i][i + 1] = B[0][1]
        A = B[1:, 1:]

    T[-2:, -2:] = B[1:3, 1:3]

    return T, Q
