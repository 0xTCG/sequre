from sequre import sequre_beaver


@sequre_beaver
def householder(mpc, x):
    xdot = mpc.dot(x, x)
    assert not xdot.is_partitioned()
    shift = mpc.sqrt(xdot) * ((x[0] > 0) * 2 - 1)
    assert shift.is_partitioned()
    v = x.copy()
    assert v.is_partitioned()
    v[0] = v[0] + shift
    assert v.is_partitioned()
    return  v / mpc.sqrt((xdot + x[0] * shift) * 2)


@sequre_beaver
def qr_fact_square(mpc, A):
    R = Q = B = A.zeros()

    for i in range(len(A) - 1):
        v = householder(mpc, A[0]).expand_dims()
        P = A.I - mpc.matmul(v.T, v) * 2

        Q[i:] = P if i == 0 else mpc.matmul(P, Q[i:])
        B = mpc.matmul(A, P)  
        R[i:, i] = B[:, 0]
        A = B[1:, 1:]

    R[-1, -1] = B[1, 1]

    return Q, R


@sequre_beaver
def tridiag(mpc, A):
    Q = A.zeros() + A.I
    T = B = A.zeros()

    for i in range(len(A) - 2):
        x = A[0, 1:].pad_right(1)
        v = householder(mpc, x)[:-1].pad_left(1).expand_dims()
        P = A.I - mpc.matmul(v.T, v) * 2

        Q[:, i:] = mpc.matmul(Q[:, i:], P)
        B = mpc.matmul(P, A, P)

        T[i, i] = B[0, 0]
        T[i + 1, i] = B[1, 0]
        T[i, i + 1] = B[0, 1]
        A = B[1:, 1:]

    T[-2:, -2:] = B[1:3, 1:3]

    return T, Q


@sequre_beaver
def eigen_decomp(mpc, A, iter_per_eval):
    L = A[0].zeros()
    
    assert L.is_partitioned()
    
    A, Q = tridiag(mpc, A)
    V = Q.T
    
    assert A.is_partitioned()
    assert Q.is_partitioned()
    assert V.is_partitioned()

    for i in range(len(A) - 1, 0, -1):
        for _ in range(iter_per_eval):
            shift = A.diag(A[i, i])
            assert shift.is_partitioned()
            Q, R = qr_fact_square(mpc, A - shift)
            assert Q.is_partitioned()
            assert R.is_partitioned()
            A = mpc.matmul(Q, R) + shift
            assert A.is_partitioned()
            V[:i + 1] = mpc.matmul(Q, V[:i + 1])
            assert V.is_partitioned()
            
        L[i] = A[i, i]
        A = A[:i, :i]
        assert L.is_partitioned()
        assert A.is_partitioned()

    L[0] = A[0, 0]
    assert L.is_partitioned()
        
    return V, L


@sequre_beaver
def orthonormal_basis(mpc, A):
    v_cache = []
    Q = A.zeros() + A.I

    for i in range(len(A)):
        v = householder(mpc, A[0]).expand_dims()
        B = A - mpc.matmul(A, v.T, v) * 2
        A = B[1:, 1:]
        v_cache.append(v)

    for i in range(len(Q) - 1, -1, -1):
        Qsub = Q[:, i:]
        Q[:, i:] = Qsub - mpc.matmul(Qsub, v_cache[i].T, v_cache[i]) * 2
    
    return Q
