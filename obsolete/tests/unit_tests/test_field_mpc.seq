from ..utils import assert_approx 

from sequre.utils.param import *
from sequre.types.utils import double_to_fp


def test_field_mpc[TP](mpc: MPCEnv[TP], modulus = FIELD_SIZE):
    a_vec = [
        double_to_fp(1.5, modulus),
        double_to_fp(0.5, modulus),
        double_to_fp(2.5, modulus)]
    result_vec = mpc.lin_alg.householder(a_vec, modulus)
    if mpc.pid != 0:
        assert_approx(
            'Householder',
            mpc.comms.print_fp(result_vec, modulus),
            [0.86807, 0.0973601, 0.486801])

    mat_float = [
        [4.0 for _ in range(3)],
        [4.5 for _ in range(3)],
        [5.5 for _ in range(3)]]
    mat = [
        [double_to_fp(e, modulus) for e in row]
        for row in mat_float]
    q_fact, r_fact = mpc.lin_alg.qr_fact_square(mat, modulus)
    result_mat = mpc.arithmetic.multiply_matmul(r_fact, q_fact, modulus)
    result_mat = mpc.fp.trunc(result_mat, modulus)
    if mpc.pid != 0:
        assert_approx('QR factorization', mpc.comms.print_fp(result_mat, modulus), mat_float * 2, 0.036)

    mat = [
        [double_to_fp(4.0, modulus),
            double_to_fp(3.0, modulus),
            double_to_fp(2.5, modulus)],
        [double_to_fp(0.5, modulus),
            double_to_fp(4.5, modulus),
            double_to_fp(1.5, modulus)],
        [double_to_fp(5.5, modulus),
            double_to_fp(2.0, modulus),
            double_to_fp(1.0, modulus)]]
    t, q = mpc.lin_alg.tridiag(mat, modulus)
    expected_t = [
        [8.0, -7.81025, 0.0],
        [-7.81025, 9.57377, 3.31148],
        [0.0, 2.31148, 1.42623]]
    expected_q = [
        [1.0, 0.0, 0.0],
        [0.0, -0.768221, -0.640184],
        [0.0, -0.640184, 0.768221]]
    if mpc.pid != 0:
        assert_approx('Tridiagonalize 1', mpc.comms.print_fp(t, modulus), expected_t)
        assert_approx('Tridiagonalize 2', mpc.comms.print_fp(q, modulus), expected_q)
        
    v_mat, l = mpc.lin_alg.eigen_decomp(mat, modulus)
    expected_v_mat = [
        [0.650711, 0.672083, 0.353383],
        [-0.420729, -0.0682978, 0.904612],
        [0.632109, -0.73732, 0.238322]]
    # TODO: #148 Merge #45 to fix test cases 
    expected_l = [16.9749, -0.799774, 2.88673]
    if mpc.pid != 0:
        assert_approx('Eigen decomposition 1', mpc.comms.print_fp(v_mat, modulus), expected_v_mat)
        assert_approx('Eigen decomposition 2', mpc.comms.print_fp(l, modulus), expected_l)
        
    expected_q_mat = [
        [-0.715542, -0.536656, -0.447214],
        [0.595097, -0.803563, 0.0121201],
        [0.365868, 0.257463, -0.894345]]
    result_mat = mpc.lin_alg.orthonormal_basis(mat, modulus)
    if mpc.pid != 0:
        assert_approx(
            'Orthonormal basis',
            mpc.comms.print_fp(result_mat, modulus),
            expected_q_mat)