import sys

import utils.param as param
from utils.custom_types import sockaddr_un

cimport socket(int, int, int) -> int
cimport bind(int, ptr[sockaddr_un], int) -> int
cimport connect(int, ptr[sockaddr_un], int) -> int
cimport listen(int, int) -> int
cimport accept(int, int, int) -> int
cimport recv(int, cobj, int, int) -> int
cimport send(int, cobj, int, int) -> int
cimport shutdown(int, int) -> int
cimport close(int) -> int
cimport perror(cobj)


class CSocket:
    sock_fd: int
    
    def __init__(self: CSocket):
        self.sock_fd = -1
    
    def socket(self: CSocket):
        self.close()
        self.sock_fd = socket(param.AF_UNIX, param.SOCK_STREAM, 0)
        if self.sock_fd == -1:
            perror(f'Socket not instantiated'.c_str())
            raise ValueError(f'Socket not instantiated')
    
    def connect(self: CSocket, serveraddr: sockaddr_un, serveraddr_len: int) -> bool:
        connection: int = connect(self.sock_fd, __ptr__(serveraddr), serveraddr_len)
        
        if connection != 0:
            perror(f'Could not connect at {str(serveraddr, serveraddr_len - 2)}'.c_str())
        
        return connection == 0
    
    def close(self: CSocket):
        if self.sock_fd != -1:
            shutdown(self.sock_fd, param.SHUT_RDWR)
            close(self.sock_fd)
    
    def bind(self: CSocket, serveraddr: sockaddr_un, serveraddr_len: int):
        rc: int = bind(self.sock_fd, __ptr__(serveraddr), serveraddr_len)
        if rc < 0:
            perror(f'Server not binded at {str(serveraddr, serveraddr_len - 2)} and fd {self.sock_fd}'.c_str())
            raise ValueError(f'Server not binded at {str(serveraddr, serveraddr_len - 2)} and fd {self.sock_fd}')
        else:
            print(f'Server binded at {str(serveraddr, serveraddr_len - 2)}')
    
    def listen(self: CSocket):
        rc: int = listen(self.sock_fd, 3)
        if rc == -1:
            perror(f'Server not listening: {rc}'.c_str())
            raise ValueError('Server not listening.')
        else:
            print(f'Server listening at {self.sock_fd}')

    def accept(self: CSocket):
        accepted_fd: int = accept(self.sock_fd, 0, 0)
        if accepted_fd == -1:
            perror(f'Socket could not accept connection'.c_str())
            raise ValueError('Socket could not accept connection.')
        else:
            print(f'Server accepted at {self.sock_fd}')
        
        self.close()
        self.sock_fd = accepted_fd
    
    def open_channel(self: CSocket, serveraddr: sockaddr_un, serveraddr_len: int):
        self.socket()
        self.bind(serveraddr, serveraddr_len)
        self.listen()
        self.accept()
    
    def send(self: CSocket, data: generator[str]) -> int:
        totalsent: int = 0
        for chunk in data:
            sent: int = send(self.sock_fd, chunk.c_str(), len(chunk), 0)
            if sent == 0:
                perror('Socket connection broken'.c_str())
                raise ValueError('Socket connection broken')
            totalsent += sent
        return totalsent

    def receive(self: CSocket, msg_len: int) -> str:
        chunks = list[str]()
        length = param.BASE_LEN
        p = ptr[byte](length)
        bytes_recd = 0
        while bytes_recd < msg_len:
            received: int = recv(self.sock_fd, p, length, 0)
            chunk: str = str(p, received)
            if chunk == '':
                perror('Socket connection broken'.c_str())
                raise ValueError('Socket connection broken')
            bytes_recd += received
            # Performance warning: lstrip might introduce overhed
            yield chunk.lstrip('0')
