import random

import param

# from utils.custom_types import zeros


def get_address(port: int) -> str:
    return f"{param.AF_PREFIX}{port}"


# def get_cache_path(pid: int, name: str) -> str:
#     return f'{param.CACHE_FILE_PREFIX}_P{pid}_{name}.bin'


# def get_output_path(pid: int, name: str) -> str:
#     return f'{param.OUTPUT_FILE_PREFIX}_P{pid}_{name}.txt'


# def get_temp_path(pid: int, name: str) -> str:
#     return f'temp/temp_P{pid}_{name}.txt'

# def read_vector(f, n: int, primes_bytes: int) -> np.ndarray:
#     a = zeros(n)
    
#     for i in range(n):
#         a[i] = int(f.read(primes_bytes))
    
#     return a


# def read_matrix(f, nrows: int, ncols: int, primes_bytes: int) -> np.ndarray:
#         a = zeros((nrows, ncols))
        
#         for i in range(nrows):
#             a[i][:] = read_vector(f, ncols, primes_bytes)
        
#         return a    

# def filter_rows(mat: np.ndarray, mask: np.ndarray) -> np.ndarray:
#     return filter(mat, mask)


def rand_int[TP](lower_limit: TP, upper_limit: TP) -> TP:
    return TP(0)
    # return TP(random.randint(lower_limit, upper_limit))


def rand_vec[TP](length: int, base: TP) -> list[TP]:
    l = list[TP](length)
    for _ in range(length): l.append(rand_int(0, base - 1))
    return l


def rand_mat[TP](shape: list[int], base: TP) -> list[list[TP]]:
    m, n = shape
    l = list[list[TP]](m)
    for _ in range(m): l.append(rand_vec(n, base))
    return l
