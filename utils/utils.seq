import random

import param


def get_address(port: int) -> str:
    return f"{param.AF_PREFIX}{port}"


def shapeof(value):
    if isinstance(value, param.size_u):
        return False
    if isinstance(value, list[param.size_u]):
        return len(value)
    if isinstance(value, list[list[param.size_u]]):
        return value.shape()
    
    raise TypeError(f'Invalid type for {value}')


def zeros[TP](rows: int, cols: int) -> list[list[TP]]:
    return [[TP(0) for _ in range(cols)] for _ in range(rows)]


def cartesian(l_1: list[str], l_2: list[str]) -> list[str]:
    c = list(len(l_1) * len(l_2))
    for e_1 in l_1:
        for e_2 in l_2:
            c.append(f'{e_1} {e_2}')
            # c.append(e_1 + e_2)
    return c


def evalp[TP](x: list[TP], coefs: list[TP], exps: list[list[int]], field: TP) -> TP:
        result = TP(0)
        for coef, exp in zip(coefs, exps):
            result += x.powers(exp, field) * coef
        
        return result


def __rand_int(field) -> int:
    return random.randint(1, int(field - 1))


def __rand_vec[TP](length: int, base: TP) -> list[TP]:
    l = list[TP](length)
    for _ in range(length): l.append(TP(__rand_int(base)))
    return l


def __rand_mat[TP](shape: list[int], base: TP) -> list[list[TP]]:
    m, n = shape
    l = list[list[TP]](m)
    for _ in range(m): l.append(__rand_vec(n, base))
    return l
