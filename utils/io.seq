import param

from C import stat(cobj, cobj) -> int


def get_cache_path(pid: int, name: str) -> str:
    return f'{param.CACHE_FILE_PREFIX}_P{pid}_{name}.bin'


def get_output_path(pid: int, name: str) -> str:
    return f'{param.OUTPUT_FILE_PREFIX}_P{pid}_{name}.txt'


def file_exists(path: str) -> bool:
    # buffer = ptr[byte]()
    # return stat(path.c_str(), buffer) == 0
    return False


def write_to_cache[TP](f: File, data: list[TP]):
    raise NotImplementedError()


def beaver_write_to_cache[TP](f: File, data: list[TP]):
    raise NotImplementedError()


def beaver_read_from_cache[TP](f: File, n: int):
    raise NotImplementedError()


def read_vector[TP](f: File, primes_bytes: int = 0) -> list[TP]:
    if primes_bytes:
        # a = list[TP](n)
        # for _ in range(n):
        #     a.append(TP(f.read(primes_bytes)))
        # return a
        raise NotImplementedError()
    
    return [TP(int(line.strip())) for line in f]


def read_matrix_from_cache[TP](f: File, primes_bytes: int = 0) -> list[list[TP]]:
    if primes_bytes:
        # a = list[list[TP]](nrows)
        # for _ in range(nrows): a.append(read_vector_from_cache[TP](f, ncols, primes_bytes))
        # return a
        raise NotImplementedError()
    
    return [[TP(int(e.strip())) for e in line.split()] for line in f]
