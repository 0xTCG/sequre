from param import sockaddr_un, size_u, BASE_LEN


extend sockaddr_un:
    def __str__(self: sockaddr_un, str_len: int) -> str:
        return str(self.sun_path, str_len)

extend str:
    def __init__(self: str, sockaddr: sockaddr_un, str_len: int) -> str:
        return str(sockaddr.sun_path, str_len)

extend size_u:
    def ndim(self: size_u) -> int:
        return 0
    
    def to_bytes(self: size_u) -> str:
        base = '0' * BASE_LEN
        str_val: str = str(self)
        return (base + str_val)[len(str_val):]
    

extend list[T]:
    def __getitem__(self: list[T], s: tuple[slice, slice]):
        rs, cs = s
        sliced_arr = self[rs]
        for i in range(len(sliced_arr)): sliced_arr[i] = sliced_arr[i][cs]
        return sliced_arr
    
    def __setitem__(self: list[T], s: tuple[slice, slice], other: generator[T]):
        rs, cs = s
        start, stop, _, _ = slice.adjust_indices(len(self), start=rs.start, stop=rs.end)
        for i in range(start, stop):
            self[i][cs] = next(other)
    
    def __setitem__(self: list[T], s: tuple[slice, slice], other: size_u):
        rs, cs = s
        start_row, stop_row, _, _ = slice.adjust_indices(len(self), start=rs.start, stop=rs.end)
        start_col, stop_col, _, _ = slice.adjust_indices(len(self[0]), start=cs.start, stop=cs.end)
        for i in range(start_row, stop_row):
            for j in range(start_col, stop_col):
                self[i][j] = other
    
    def ndim(self: list[T]) -> int:
        # TODO: Enable support for more than just 2 dims.
        return 1 + int(T != size_u)
    
    def to_bytes(self: list[T]) -> str:
        # TODO: Change T != size_u hack into something more sensible.
        separator: str = ';' if T != size_u else '.'
        return separator.join([v.to_bytes() for v in self])


# import random

# from functools import partial, reduce
# from copy import deepcopy

# import numpy as np

# from utils.param import BASE_P, BASE_LEN


# # Numpy overrides
# zeros = partial(np.zeros, dtype=np.int64)
# ones = partial(np.ones, dtype=np.int64)


# # Temp modular arithmetic wrappers (add_mod, mul_mod and matmul_mod)
# def add_mod(x: np.ndarray, y: np.ndarray, field: int) -> np.ndarray:
#     return np.mod(x - (-y + field), field)


# def mul_mod(x: np.ndarray, y: np.ndarray, field: int) -> np.ndarray: 
#     res: np.ndarray = zeros(shape=x.shape)
#     broadcast_y: np.ndarray = zeros(shape=x.shape)
#     broadcast_y[:] = np.broadcast_to(y, x.shape)
    
#     x = np.mod(x, field)
#     while np.any(broadcast_y > 0): 
#         indices = np.where((broadcast_y & 1) == 1)
#         res[indices] = add_mod(res[indices], x[indices], field)
  
#         x = add_mod(x, x, field)
#         broadcast_y >>= 1
  
#     return np.mod(res, field)


# def matmul_mod(x: np.ndarray, y: np.ndarray, field: int) -> np.ndarray:
#     assert x.shape[1] == y.shape[0]

#     new_mat = zeros((x.shape[0], y.shape[1]))

#     for i in range(x.shape[0]):
#         for j in range(y.shape[1]):
#             new_mat[i][j] = reduce(
#                 partial(add_mod, field=field), mul_mod(x[i], y.T[j], field), np.array(0, dtype=np.int64))
    
#     return new_mat
