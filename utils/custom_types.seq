# Warning: Compiler might not be able to optimize this level of abstraction.
# Consider getting rid of mul_mod and matmul_mod and using inline methods instead
from param import sockaddr_un, size_u, BASE_LEN


extend sockaddr_un:
    def __str__(self: sockaddr_un, str_len: int) -> str:
        return str(self.sun_path, str_len)

extend str:
    def __init__(self: str, sockaddr: sockaddr_un, str_len: int) -> str:
        return str(sockaddr.sun_path, str_len)

extend size_u:
    def ndim(self: size_u) -> int:
        return 0
    
    def to_bytes(self: size_u) -> str:
        base = '0' * BASE_LEN
        str_val: str = str(self)
        for _ in range(1): yield (base + str_val)[len(str_val):]    

extend list[T]:
    def __getitem__(self: list[T], s: tuple[slice, slice]) -> list[T]:
        rs, cs = s
        sliced_arr = self[rs]
        new_arr = list[T](len(sliced_arr))
        for i in range(len(sliced_arr)): new_arr.append(sliced_arr[i][cs])
        return new_arr
    
    def __getitem__(self: list[T], s: tuple[lslice, int]) -> list[T]:
        rs, cs = s
        sliced_arr = self[rs]
        new_arr = list[T](len(sliced_arr))
        for i in range(len(sliced_arr)): new_arr.append([sliced_arr[i][cs]])
        return new_arr
    
    def __setitem__(self: list[T], s: tuple[slice, slice], other: generator[T]):
        rs, cs = s
        start, stop, _, _ = slice.adjust_indices(len(self), start=rs.start, stop=rs.end)
        for i in range(start, stop):
            self[i][cs] = next(other)
    
    def __setitem__(self: list[T], s: tuple[slice, slice], other: size_u):
        rs, cs = s
        start_row, stop_row, _, _ = slice.adjust_indices(len(self), start=rs.start, stop=rs.end)
        start_col, stop_col, _, _ = slice.adjust_indices(len(self[0]), start=cs.start, stop=cs.end)
        for i in range(start_row, stop_row):
            for j in range(start_col, stop_col):
                self[i][j] = other
    
    def __neg__(self: list[T]) -> list[T]:
        l = list[T](len(self))
        for s in self: l.append(-s)
        return l

    def __iadd__(self: list[T], other: list[T]) -> list[T]:
        for i, o in enumerate(other):
            self[i] += o
        return self

    def __add__(self: list[T], other: list[T]) -> list[T]:
        l = list[T](len(self))
        for s, o in zip(self, other): l.append(s + o)
        return l
    
    def __iadd__(self: list[T], scalar: int) -> list[T]:
        for i in range(len(self)):
            self[i] += scalar
        return self

    def __add__(self: list[T], scalar: int) -> list[T]:
        l = list[T](len(self))
        for s in self: l.append(s + scalar)
        return l

    def __iadd__(self: list[T], scalar: float) -> list[T]:
        for i in range(len(self)):
            self[i] += scalar
        return self

    def __add__(self: list[T], scalar: float) -> list[T]:
        l = list[T](len(self))
        for s in self: l.append(s + scalar)
        return l
    
    def __isub__(self: list[T], other: list[T]) -> list[T]:
        for i, o in enumerate(other):
            self[i] -= o
        return self

    def __sub__(self: list[T], other: list[T]) -> list[T]:
        l = list[T](len(self))
        for s, o in zip(self, other): l.append(s - o)
        return l

    def __isub__(self: list[T], scalar: float) -> list[T]:
        for i in range(len(self)):
            self[i] -= scalar
        return self

    def __sub__(self: list[T], scalar: float) -> list[T]:
        l = list[T](len(self))
        for s in self: l.append(s - scalar)
        return l
    
    def __imul__(self: list[T], other: list[T]) -> list[T]:
        for i, o in enumerate(other):
            self[i] *= o
        return self

    def __mul__(self: list[T], other: list[T]) -> list[T]:
        l = list[T](len(self))
        for s, o in zip(self, other): l.append(s * o)
        return l
    
    def __imul__(self: list[T], scalar: int) -> list[T]:
        for i in range(len(self)):
            self[i] *= scalar
        return self

    def __mul__(self: list[T], scalar: int) -> list[T]:
        l = list[T](len(self))
        for s in self: l.append(s * scalar)
        return l
    
    def __itruediv__(self: list[T], scalar: int) -> list[T]:
        for i in range(len(self)):
            self[i] /= scalar
        return self

    def __truediv__(self: list[T], scalar: int) -> list[T]:
        l = list[T](len(self))
        for s in self: l.append(s / scalar)
        return l
    
    def __imod__(self: list[T], scalar: size_u) -> list[T]:
        for i in range(len(self)):
            self[i] %= scalar
        return self

    def __mod__(self: list[T], scalar: size_u) -> list[T]:
        l = list[T](len(self))
        for s in self: l.append(s % scalar)
        return l
    
    def __ipow__(self: list[T], scalar: size_u) -> list[T]:
        for i in range(len(self)):
            self[i] **= scalar
        return self

    def __pow__(self: list[T], scalar: size_u) -> list[T]:
        l = list[T](len(self))
        for s in self: l.append(s ** scalar)
        return l
    
    def __iand__(self: list[T], scalar: size_u) -> list[T]:
        for i in range(len(self)):
            self[i] &= scalar
        return self

    def __and__(self: list[T], scalar: size_u) -> list[T]:
        l = list[T](len(self))
        for s in self: l.append(s & scalar)
        return l

    def __ilshift__(self: list[T], scalar: size_u) -> list[T]:
        for i in range(len(self)):
            self[i] <<= scalar
        return self

    def __lshift__(self: list[T], scalar: size_u) -> list[T]:
        l = list[T](len(self))
        for s in self: l.append(s << scalar)
        return l
    
    def __irshift__(self: list[T], scalar: size_u) -> list[T]:
        for i in range(len(self)):
            self[i] >>= scalar
        return self

    def __rshift__(self: list[T], scalar: size_u) -> list[T]:
        l = list[T](len(self))
        for s in self: l.append(s >> scalar)
        return l
    
    def __lt__(self: list[T], other: list[T]) -> bool:
        for s, o in zip(self, other):
            if s >= o:
                return False
        
        return True

    def __gt__(self: list[T], other: list[T]) -> bool:
        for s, o in zip(self, other):
            if s <= o:
                return False
        
        return True
    
    def __ge__(self: list[T], other: list[T]) -> bool:
        for s, o in zip(self, other):
            if s < o:
                return False
        
        return True
    
    def __le__(self: list[T], other: list[T]) -> bool:
        for s, o in zip(self, other):
            if s > o:
                return False
        
        return True
    
    def mult(self: list[T], other: list[T], field: size_u) -> list[T]:
        # Performance warning: Modular overhead. Inefficient method.
        self_shape = self.shape()
        other_shape = other.shape()

        # TODO: Remove this assertion
        assert self_shape[1] == other_shape[0]

        new_mat = list[T](self_shape[0])

        for i in range(self_shape[0]):
            new_row = list[size_u](other_shape[1])
            for j in range(other_shape[1]):
                cell_value: size_u = size_u(0)
                for k in range(self_shape[1]):
                    cell_value += (self[i][k] * other[k][j]) % field
                    cell_value %= field
                new_row.append(cell_value)
            new_mat.append(new_row)
        
        return new_mat    
    
    def shape(self: list[T]) -> list[int]:
        return [len(self), len(self[0])]

    def transpose(self: list[T]) -> list[T]:
        rows, cols = self.shape()
        new_mat = list[T](cols)

        for i in range(cols):
            row = list[size_u](rows)
            for j in range(rows):
                row.append(self[j][i])
            new_mat.append(row)
        
        return new_mat
    
    def reshape(self: list[T], shape: tuple[int, int]) -> list[T]:
        rows, cols = shape
        _, old_cols = self.shape()
        new_mat = list[T](rows)
        position: int = 0

        for i in range(rows):
            row = list[size_u](cols)
            for j in range(cols):
                old_i = position // old_cols
                old_j = position % old_cols
                row.append(self[old_i][old_j])
                position += 1
            new_mat.append(row)

        return new_mat

    def to_bytes(self: list[T]) -> str:
        for v in self: 
            for b in v.to_bytes():
                yield b
