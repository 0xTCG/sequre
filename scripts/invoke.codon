import time

import sequre.utils.param as param
from sequre.mpc.env import MPCEnv
from sequre.utils.utils import get_address

from ..tests.tests import tests
from ..tests.benchmark import benchmark

from C import fork() -> int
from C import wait(cobj) -> int
from C import unlink(str) -> int


def client[TP](pid, protocol_func, control_toggles, local, modulus):
    # Initialize MPC environment
    mpc = MPCEnv[TP](pid, local, modulus)
    if not control_toggles["skip_mhe_setup"]:
        mpc.he.default_setup()
    print(f"Initialized MPC for {pid}")

    protocol_func(mpc, control_toggles, modulus, TP=TP)

    # This is here just to keep P0 online until the end for data transfer
    # In practice, P0 would send data in advance before each phase and go offline
    mpc.done()


def invoke[TP](protocol_func, pid, control_toggles, local, modulus):
    for port in param.ALL_PORTS:
        address = get_address(port)
        unlink(address)

    if local:
        pid_0 = fork()
        status = 0

        if (pid_0 == 0): client(0, protocol_func, control_toggles, local, modulus, TP=TP)
        else:
            pid_1 = fork()
            if (pid_1 == 0): client(1, protocol_func, control_toggles, local, modulus, TP=TP)
            else:
                s = time.time()
                client(2, protocol_func, control_toggles, local, modulus, TP=TP)
                e = time.time()
                print(f'Total client runtime: {e - s}s')
                wait(ptr[byte](__ptr__(status).as_byte()))
    else:
        s = time.time()
        client(pid, protocol_func, control_toggles, local, modulus, TP=TP)
        e = time.time()
        print(f'Total client runtime: {e - s}s')

import sys
command = sys.argv[1:]
flags = [arg for arg in command if arg.startswith('--')]
args = [arg for arg in command if arg not in flags]

all_toggle = '--all' in flags
lin_alg_toggle = '--lin-alg' in flags
lsvm_toggle = '--lsvm' in flags
pca_toggle = '--pca' in flags
king_toggle = '--king' in flags
gwas_toggle = '--gwas' in flags
dti_toggle = '--dti' in flags
opal_toggle = '--opal' in flags
ganon_toggle = '--ganon' in flags

skip_test_data_sharing_toggle = '--skip-data-sharing' in flags
skip_mhe_setup_toggle = '--skip-mhe-setup' in flags

tests_toggles = {
    "all": all_toggle,
    "unit": '--unit' in flags,
    "helpers": '--helpers' in flags,
    "primitives": '--primitives' in flags,
    "he": '--he' in flags,
    "mpc": '--mpc' in flags,
    "sequre_mpc": '--sequre-mpc' in flags,
    "sequre_mhe": '--sequre-mhe' in flags,
    "ir_passes": '--ir-passes' in flags,
    "e2e": '--e2e' in flags,
    "lin_alg": lin_alg_toggle,
    "lsvm": lsvm_toggle,
    "pca": pca_toggle,
    "king": king_toggle,
    "gwas": gwas_toggle,
    "dti": dti_toggle,
    "opal": opal_toggle,
    "ganon": ganon_toggle,
    "skip_data_sharing": skip_test_data_sharing_toggle,
    "skip_mhe_setup": skip_mhe_setup_toggle
}

benchmarks_toggles = {
    "all": all_toggle,
    "playground": "--playground" in flags,
    "lattiseq": "--lattiseq" in flags,
    "lattiseq-mult3": "--lattiseq-mult3" in flags,
    "lin_alg": lin_alg_toggle,
    "lsvm": lsvm_toggle,
    "pca": pca_toggle,
    "king": king_toggle,
    "gwas": gwas_toggle,
    "dti": dti_toggle,
    "opal": opal_toggle,
    "ganon": ganon_toggle,
    "skip_data_sharing": skip_test_data_sharing_toggle,
    "skip_mhe_setup": skip_mhe_setup_toggle
}

use_ring: bool = '--use-ring' in flags
local: bool = '--local' in flags
modulus: param.int_t = param.RING_SIZE if use_ring else param.FIELD_SIZE
assert local or len(args) >= 2, f"Non-local run: No CP ID provided.\n\tMake sure to add CP ID to your command {' '.join(command)} <cpid>"
pid = 0 if local else int(args[1])

supported_calls = ['run-tests', 'run-benchmarks']

match args[0]:
    case supported_calls[0]: invoke(tests, pid, tests_toggles, local, modulus, TP=param.int_t)
    case supported_calls[1]: invoke(benchmark, pid, benchmarks_toggles, local, modulus, TP=param.int_t)
    case _: raise NotImplementedError(f'Invalid client call: {args[0]}. Should be in {supported_calls}')
