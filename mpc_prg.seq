import random

from utils.param import list_u32


class MPCPRG:
    pid: int
    prg_states: dict[int, list_u32]
    
    def __init__(self: MPCPRG, pid: int):
        self.pid = pid
        self.prg_states = dict[int, list_u32]()

        # np.random.seed()
        self.prg_states[self.pid] = self.get_state()
        self.import_seed(-1, hash('global'))
        
        for other_pid in set(range(3)) - {self.pid}:
            self.import_seed(other_pid)
        
        self.switch_seed(self.pid)
    
    def get_state(self: MPCPRG) -> list_u32:
        return random._rnd.gen.state
    
    def set_state(self: MPCPRG, state: list_u32):
        random._rnd.gen.state = state

    def import_seed(self: MPCPRG, pid: int, seed: int = -1):
        seed: int = hash((min(self.pid, pid), max(self.pid, pid))) if seed == -1 else seed
        seed %= (1 << 32)
        random.seed(seed)
        self.prg_states[pid] = self.get_state()
        
    def switch_seed(self: MPCPRG, pid: int):
        self.prg_states[self.pid] = self.get_state()
        self.set_state(self.prg_states[pid])
    
    def restore_seed(self: MPCPRG, pid: int):
        self.prg_states[pid] = self.get_state()
        self.set_state(self.prg_states[self.pid])
