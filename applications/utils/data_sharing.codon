from param import PRIVATE_DATA, PRIVATE_DATA_PATH

from sequre.utils.utils import zeros_mat
from sequre.utils.param import int_t
from sequre.types.utils import double_to_fp
from sequre.utils.io import read_matrix, write_matrix
from sequre.settings import TRUSTED_DEALER, COMPUTING_PARTIES


def shares_paths(mpc, protocol, data_name, test_run):
    partitioned = PRIVATE_DATA[protocol][data_name][2]
    share_name = 'r' if partitioned else 'shares'
    path = PRIVATE_DATA_PATH[protocol]['test_path'] if test_run else PRIVATE_DATA_PATH[protocol]['path']
    return (f'{path}/{data_name}.txt',
            f'{path}/__{data_name}_{share_name}_{mpc.pid}.bin',
            f'{path}/__{data_name}_x_r.bin' if partitioned else '')


def read_input_matrix[TP](f: File, rows: int, cols: int, fp: bool, modulus: TP) -> list[list[TP]]:
    return [[(double_to_fp(float(e), modulus) if fp else TP(e)) for e in row] for row in read_matrix(f, rows, cols, False, TP=int)]


def share_data[TP](mpc, protocol, data_name, data_params, test_run, modulus):
    input_path, output_path, partition_path = shares_paths(mpc, protocol, data_name, test_run)
    rows, cols, partitioned, fp = data_params
    
    with open(input_path) as f_i, open(output_path, 'wb') as f_o:
        mat = read_input_matrix(f_i, rows, cols, fp, modulus, TP=TP) if mpc.pid == 0 else zeros_mat(rows, cols, TP=TP)
        shared_mat = mpc.comms.share_from_trusted_dealer(mat, modulus)

        if partitioned:
            x_r, r = mpc.arithmetic.__beaver_partition(shared_mat, modulus)
            write_matrix(f_o, r, binary=True, TP=TP)
            if (mpc.local and mpc.pid == 2) or (not mpc.local and TRUSTED_DEALER not in COMPUTING_PARTIES):
                with open(partition_path, 'wb') as f_p: write_matrix(f_p, x_r, binary=True, TP=TP)
        else: write_matrix(f_o, shared_mat, binary=True, TP=TP)


def share_all_data[TP = int_t](mpc, test_run, modulus):
    print(f'Data sharing protocol initiated at CP{mpc.pid} ...')
    for protocol, input_data in PRIVATE_DATA.items():
        for data_name, data_params in input_data.items():
            print(f'Sharing {protocol}-{data_name} at CP{mpc.pid} ...')
            share_data(mpc, protocol, data_name, data_params, test_run, modulus, TP=TP)
            mpc.comms.sync_parties()
            print(f'Shared {protocol}-{data_name} at CP{mpc.pid}')
    
    mpc.comms.sync_parties()
    print(f'Data sharing done at CP{mpc.pid}!')
