from sequre.attributes import sequre_beaver as sequre

from sequre.utils.param import int_t
from sequre.utils.io import read_filtered_matrix, read_vector, read_matrix
from sequre.types.shared_tensor import SharedTensor

from sequre.stdlib.internal import Internal as sq
from sequre.stdlib.lin_alg import orthonormal_basis, eigen_decomp

from utils.param import *
from utils.data_sharing import shares_paths


def merge_masks(major_mask, minor_mask):
    new_mask = major_mask.copy()

    ind = 0
    for j in range(len(major_mask)):
        if new_mask[j]:
            new_mask[j] = bool(minor_mask[ind])
            ind += 1
    
    return new_mask


def open_input_files(mpc, test_run):
    _, pheno_path, _ = shares_paths(mpc, 'gwas', 'pheno', test_run)
    _, cov_path, _ = shares_paths(mpc, 'gwas', 'cov', test_run)
    _, geno_mask_path, geno_path = shares_paths(mpc, 'gwas', 'geno', test_run)
    _, miss_mask_path, miss_path = shares_paths(mpc, 'gwas', 'miss', test_run)
    
    return (open(pheno_path),
            open(cov_path),
            open(geno_path),
            open(miss_path),
            open(geno_mask_path),
            open(miss_mask_path))


def load_snp_positions(test_run, modulus):
    snp_pos = []
    with open(SNP_POS_TEST_FILE if test_run else SNP_POS_FILE) as f:
        for _, line in zip(range(NUM_SNPS), f):
            chrom, pos = line.split()
            snp_pos.append(int_t(int(chrom.strip()) * 10 ** 9 + int(pos.strip())))
    
    return SharedTensor(
        snp_pos, snp_pos, snp_pos.zeros(), modulus, snp_pos.zeros(),
        snp_pos.zeros(), False, True, False)


def load_phenotypes_and_covariates(mpc, f_pheno, f_cov, test_run, modulus):
    pheno = read_vector(f_pheno, NUM_INDS, True, TP=int_t)
    cov = read_matrix(f_cov, NUM_INDS, NUM_COVS, True, TP=int_t)
    pheno_x_r, pheno_r = mpc.arithmetic.__beaver_partition(pheno, modulus)
    cov_x_r, cov_r = mpc.arithmetic.__beaver_partition(cov, modulus)

    return (
        load_snp_positions(test_run, modulus),
        SharedTensor(
            pheno, pheno_x_r, pheno_r, modulus, list[int_t](),
            list[int_t](), False, False, False),
        SharedTensor(
            cov, cov_x_r, cov_r, modulus, list[list[int_t]](),
            list[list[int_t]](), False, False, False))


def locus_distance_filter(snp_pos):
    selected = [0 for _ in range(len(snp_pos))]  # 1 selected, 0 unselected, -1 TBD

    prev = -1
    for i in range(len(selected)):
        if (prev < 0) or (snp_pos.share[i] - prev > LD_DIST_THRES):
            selected[i] = 1
            prev = int(snp_pos.share[i])
    
    return selected


@sequre
def load_dosage(mpc, f_geno, f_geno_mask, f_miss, f_miss_mask,
                imask, jmask, rows, cols, modulus):
    g = read_filtered_matrix(
        mpc, f_geno, f_geno_mask, imask, jmask,
        rows, cols, 0, 3, modulus, True)
    miss = read_filtered_matrix(
        mpc, f_miss, f_miss_mask, imask, jmask,
        rows, cols, 0, 1, modulus, True)[0]
    dosage = g[1] + g[2] * 2

    return g, miss, dosage


@sequre
def missing_rates_filter(mpc, num_inds, num_snps, snp_pos, pheno, cov, geno, miss, dosage):
    snp_keep = [int_t(1) for _ in range(num_snps)]
    ind_keep = [int_t(1) for _ in range(num_inds)]
    filtered_miss = miss
    filtered_dosage = dosage

    if SKIP_QC:
        print(f"Skipped 1st and 2nd QC at CP{mpc.pid}.")
        return snp_pos, pheno, cov, filtered_miss, filtered_dosage, ind_keep, snp_keep
    
    snp_keep = sq.broadcast(mpc, miss.sum() < int(num_inds * GMISS_UB)).share
    snp_pos = snp_pos.filter(snp_keep)
    print(f"1st QC filtering done at CP{mpc.pid}. "
          f"Number of selected SNPs: {len(snp_pos)}.")

    m = int(sum(snp_keep))
    imiss = miss.T.filter(snp_keep).sum()
    ihet = geno[1].T.filter(snp_keep).sum()

    m1_obs = m - imiss
    ihet = ihet.to_fp()
    ind_keep = sq.broadcast(
        mpc,
        (imiss < int(m * IMISS_UB)) *
        (ihet < m1_obs * HET_UB) *
        (ihet > m1_obs * HET_LB)).share

    pheno = pheno.filter(ind_keep)
    cov = cov.filter(ind_keep)
    filtered_miss = miss.filter(ind_keep).T.filter(snp_keep).T
    filtered_dosage = dosage.filter(ind_keep).T.filter(snp_keep).T
    
    print(f"2nd QC filtering done at CP{mpc.pid}. "
          f"Number of selected individuals: {len(pheno)}.")
    
    return snp_pos, pheno, cov, filtered_miss, filtered_dosage, ind_keep, snp_keep


@sequre
def hwe_filter(mpc, snp_pos, pheno, geno, miss, dosage, ind_keep, snp_keep, geno_variance, maf):
    gkeep = [bool(e) for e in snp_keep]
    snp_keep_2 = snp_pos.raw_ones()
    
    if SKIP_QC:
        print(f"Skipped 3rd QC at CP{mpc.pid}.")
        return gkeep, snp_pos, maf, geno_variance

    filtered_g = [e.filter(ind_keep).T.filter(snp_keep).T for e in geno]
    ctrl = 1 - pheno
    gmiss_ctrl = sq.matmul(mpc, ctrl.expand_dims(), miss)[0]
    dosage_sum_ctrl = sq.matmul(mpc, ctrl.expand_dims(), dosage)[0]
    g_count_ctrl = [sq.matmul(mpc, ctrl.expand_dims(), e)[0] for e in filtered_g]
    dosage_tot_ctrl = (-gmiss_ctrl + ctrl.sum()) * 2
    maf_ctrl = dosage_sum_ctrl / dosage_tot_ctrl
    Maf_ctrl = 1 - maf_ctrl
    g_exp_ctrl = [
        Maf_ctrl * Maf_ctrl * dosage_tot_ctrl / 2,
        Maf_ctrl * maf_ctrl * dosage_tot_ctrl,
        maf_ctrl * maf_ctrl * dosage_tot_ctrl / 2]

    hwe_chisq = sum([((e.to_fp() - g_exp_ctrl[i]) ** 2) / g_exp_ctrl[i] for i, e in enumerate(g_count_ctrl)])
    snp_keep_2 = sq.broadcast(
        mpc,
        (maf < MAF_UB) *
        (maf > MAF_LB) *
        (hwe_chisq < HWE_UB)).share

    geno_variance.filter(snp_keep_2)
    maf = maf.filter(snp_keep_2)
    snp_pos = snp_pos.filter(snp_keep_2)
    gkeep = merge_masks(gkeep, snp_keep_2)

    print(f"3rd QC filtering done at CP{mpc.pid}. "
          f"Number of selected SNPs: {len(snp_pos)}.")
    
    return gkeep, snp_pos, maf, geno_variance


@sequre
def quality_control(mpc, num_inds, num_snps, snp_pos, pheno, cov, geno, miss, dosage):
    snp_pos, pheno, cov, miss, dosage, ind_keep, snp_keep = missing_rates_filter(
        mpc, num_inds, num_snps, snp_pos, pheno, cov, geno, miss, dosage)
    
    gmiss = miss.sum()
    dosage_sum = dosage.sum()
    maf = dosage_sum / ((len(pheno) - gmiss) * 2)
    geno_variance = (maf * (1 - maf))

    gkeep, snp_pos, maf, geno_variance = hwe_filter(
        mpc, snp_pos, pheno, geno, miss, dosage, ind_keep, snp_keep, geno_variance, maf)

    geno_std_inv = 1 / sq.sqrt(mpc, geno_variance)
    geno_mean = maf * 2

    return snp_pos, pheno, cov, geno_mean, geno_std_inv, ind_keep, gkeep


def linkage_disequilibrium_filter(mpc, snp_pos, miss, dosage, geno_mean, geno_std_inv, ind_keep, gkeep):
    selected_snps = locus_distance_filter(snp_pos)
    snp_keep_mask = merge_masks(gkeep, selected_snps)

    filtered_miss = miss.filter(ind_keep).T.filter(snp_keep_mask).T
    filtered_dosage = dosage.filter(ind_keep).T.filter(snp_keep_mask).T
    filtered_geno_mean = geno_mean.filter(selected_snps)
    filtered_geno_std_inv = geno_std_inv.filter(selected_snps)
    
    print(f"PCA filtering done at CP{mpc.pid}. Number of selected SNPs: {snp_keep_mask.to_int().sum()}.")
    return filtered_miss, filtered_dosage, filtered_geno_mean, filtered_geno_std_inv


@sequre
def pca_random_sketch(mpc, top_components, oversampling_count, miss, dosage, geno_mean):
    kp = top_components + oversampling_count
    sketch = SharedTensor.zeros(kp, len(geno_mean), geno_mean.modulus)
    sketch_adjustment = SharedTensor.zeros(kp, len(geno_mean), geno_mean.modulus)
    bucket_count = [0 for _ in range(kp)]

    for dosage_row, miss_row in zip(dosage, miss):
        mpc.randomness.switch_seed(-1)
        bucket_index = kp.rand(kp) - 1
        rand_sign = (kp.rand(2) - 1) * 2 - 1
        mpc.randomness.restore_seed(-1)

        # Flip miss bits so it points to places where g_mean should be subtracted
        flip_miss = (1 - miss_row)
        if rand_sign == -1:
            flip_miss = -flip_miss
            sketch[bucket_index] += -dosage_row
        else: sketch[bucket_index] += dosage_row
        sketch_adjustment[bucket_index] += flip_miss * geno_mean
        bucket_count[bucket_index] += 1

    # Subtract the adjustment factor
    sketch = sketch.to_fp() - sketch_adjustment

    # Get rid of empty buckets and normalize nonempty ones. Loop will be removed after #49 is fixed.
    for i, bc in enumerate(bucket_count): sketch[i] = sketch[i] / bc
    sketch.filter(bucket_count)

    print(f"Initial sketch obtained at CP{mpc.pid}.")
    return sketch


@sequre
def pca_powers(mpc, iterations_count, random_sketch, miss, dosage, geno_mean, geno_std_inv):
    Q = orthonormal_basis(mpc, random_sketch * geno_std_inv)
    hit = 1 - miss

    for pit in range(iterations_count + 1):
        Q_scaled = Q * geno_std_inv
        Q_scaled_gmean = Q_scaled * geno_mean

        Q = sq.matmul(mpc, dosage, Q_scaled.T) - sq.matmul(mpc, hit, Q_scaled_gmean.T)
        if pit == iterations_count: break

        ortho_Q = orthonormal_basis(mpc, Q.T)
        Q = orthonormal_basis(mpc,
            (sq.matmul(mpc, ortho_Q, dosage) - sq.matmul(mpc, ortho_Q, hit) * geno_mean) * geno_std_inv)
        print(f"Iter {pit + 1}. complete at CP{mpc.pid}.")

    print(f"Power iteration complete at CP{mpc.pid}.")
    return Q


@sequre
def random_pca(mpc, top_components, oversampling_count, power_iterations,
        snp_pos, cov, geno_mean, geno_std_inv, ind_keep, gkeep, miss, dosage):
    miss, dosage, geno_mean, geno_std_inv = linkage_disequilibrium_filter(
        mpc, snp_pos, miss, dosage, geno_mean, geno_std_inv, ind_keep, gkeep)
    
    pca_sketch = pca_random_sketch(mpc, top_components, oversampling_count, miss, dosage, geno_mean)
    Q = pca_powers(mpc, power_iterations, pca_sketch, miss, dosage, geno_mean, geno_std_inv)
    Z = Q.T / len(snp_pos)
    U = eigen_decomp(mpc, sq.matmul(mpc, Z, Z.T))[0][:top_components, :len(pca_sketch)]

    print(f"Selected {top_components} eigenvectors at CP{mpc.pid}.")
    return orthonormal_basis(mpc, sq.matmul(mpc, U, Z).extend(cov.T.to_fp()))


@sequre
def cochran_armitage(mpc, V, pheno, dosage):
    p_hat = pheno.expand_dims().to_fp() - sq.matmul(mpc, pheno.expand_dims(), V.T, V)
    sp = p_hat.T.sum()[0]
    sx = sq.matmul(mpc, (1 - sq.matmul(mpc, V.T.sum().expand_dims(), V)), dosage)[0]
    spp = sq.dot(mpc, p_hat[0])
    sxp = sq.matmul(mpc, p_hat, dosage)[0]
    sxx = (dosage * dosage).sum().to_fp() - sq.dot(mpc, sq.matmul(mpc, V, dosage))
    norm_sp = sp / len(pheno)
    numer = sxp - sx * norm_sp
    denom = (sxx - sx * sx / len(pheno)) * (spp - sp * norm_sp)
    assoc = numer / sq.sqrt(mpc, denom)

    print(f"Computed associations at CP{mpc.pid}.")
    return assoc


def gwas_protocol(mpc, test_run, modulus):
    (f_pheno, f_cov, f_geno, f_miss,
     f_geno_mask, f_miss_mask) = open_input_files(mpc, test_run)
    snp_pos, pheno, cov = load_phenotypes_and_covariates(mpc, f_pheno, f_cov, test_run, modulus)
    g, miss, dosage = load_dosage(
        mpc, f_geno, f_geno_mask, f_miss, f_miss_mask,
        [int_t(1) for _ in range(NUM_INDS)],
        [int_t(1) for _ in range(NUM_SNPS)],
        NUM_INDS, NUM_SNPS, modulus)

    (snp_pos, pheno, cov, g_mean, g_std_bern_inv,
    ikeep, gwas_snp_keep_mask) = quality_control(
        mpc, NUM_INDS, NUM_SNPS, snp_pos, pheno, cov, g, miss, dosage)
    
    components = random_pca(mpc, PCA_COMPONENTS, PCA_OVERSAMPLES, PCA_POWER_ITERATIONS,
            snp_pos, cov, g_mean, g_std_bern_inv, ikeep, gwas_snp_keep_mask, miss, dosage)
    
    return cochran_armitage(mpc, components, pheno, dosage.filter(ikeep).T.filter(gwas_snp_keep_mask).T)
