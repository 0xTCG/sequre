from sequre.stdlib.learn.linear_svm import lsvm_train, lsvm_predict
from sequre.types.shared_tensor import SharedTensor as Stensor
from sequre.types.builtin import *
from sequre.attributes import *

from offline.opal import preprocess_training_data, preprocess_test_data, load_dico, offline_opal, OPAL_TARGET_DICO_LABEL
from utils.param import OPAL_COVERAGE


def share_training_data(mpc, input_path, taxid_path, patterns_path, target_coverage, target_label, modulus):
    X, y = preprocess_training_data(input_path, taxid_path, patterns_path, target_coverage, target_label)

    sv_x = Stensor(mpc.comms.share_from_trusted_dealer(X.to_fp(modulus), modulus), modulus)
    sv_x.fp = True
    sv_x.get_partitions(mpc)
    sv_y = Stensor(mpc.comms.share_from_trusted_dealer(y.to_fp(modulus), modulus), modulus)
    sv_y.fp = True
    sv_y.get_partitions(mpc)

    return sv_x, sv_y


def share_test_data(mpc, input_path, patterns_path, modulus):
    all_features = preprocess_test_data(input_path, patterns_path)

    sv = Stensor(mpc.comms.share_from_trusted_dealer(all_features.to_fp(modulus), modulus), modulus)
    sv.fp = True

    return sv


def sequre_opal(mpc, test_run, modulus, coverage = OPAL_COVERAGE, target_label = OPAL_TARGET_DICO_LABEL):
    # TODO: Make the params configurable
    tests_path = 'tests/' if test_run else ''
    input_path = f'{tests_path}data/opal/A1.train.fasta'
    taxid_path = f'{tests_path}data/opal/A1.train.taxid'
    patterns_path = f'{tests_path}data/opal/patterns.txt'
    test_input_path = f'{tests_path}data/opal/test.fragments.fasta'

    # Data sharing should be done apriori in a real-world scenario
    if mpc.pid == 2: print('Sharing Opal data ...')
    X, Y = share_training_data(
        mpc=mpc, input_path=input_path, taxid_path=taxid_path,
        patterns_path=patterns_path, target_coverage=coverage,
        target_label=target_label, modulus=modulus)

    if mpc.pid == 2: print(f'Training linear SVM ... Input size: {X.shape}')
    weights, bias = lsvm_train(
        mpc=mpc, X=X, Y=Y, eta=0.001, epochs=50, l2=0.001, mini_batch_size=200, optimizer='sgd', debug=True)

    # Test features should be shared in apriori in a real-world scenario
    if mpc.pid == 2: print('Loading test features ...')
    test_features = share_test_data(
        mpc=mpc, input_path=test_input_path,
        patterns_path=patterns_path, modulus=modulus)

    if mpc.pid == 2: print(f'Calculating predictions ... Input size: {test_features.shape}. Weights size: {len(weights)}')
    return lsvm_predict(mpc, test_features, weights, bias)
