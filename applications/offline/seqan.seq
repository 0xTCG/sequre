"""
SeqAn native methods implemented in Seq language.
These methods are used as helpers in offline Ganon implementation.
"""

from bio.kmer import Kmer


RANK = {
    'A': 0,
    'C': 1,
    'G': 2,
    'N': 3,
    'T': 4
}


SEQAN_HASH_SEEDS = [
    13572355802537770549u,  # 2**64 / (e/2)
    13043817825332782213u,  # 2**64 / sqrt(2)
    10650232656628343401u,  # 2**64 / sqrt(3)
    16499269484942379435u,  # 2**64 / (sqrt(5)/2)
    4893150838803335377u    # 2**64 / (3*pi/5)
]


def _bit_decompose(value, number_of_bits):
    return [int(bool(value & (1 << i))) for i in range(number_of_bits - 1, -1, -1)]


def _transpose(mat):
    rows, cols = len(mat), len(mat[0])
    new_mat = list[list[int]](cols)

    for i in range(cols):
        row = list[int](rows)
        for j in range(rows):
            row.append(mat[j][i])
        new_mat.append(row)

    return new_mat


def _trailing_zeros(val):
    n = 0
    while val:
        val >>= 1
        n += 1
    return 64 - n


def _seqan_kmer_encode(kmer, sigma):
    hash_value = u64(0)

    for nucleotide in str(kmer):
        hash_value *= sigma
        hash_value += RANK[nucleotide]
    
    return hash_value


def seqan_ungapped_kmer_encode(seq, sigma):
    for kmer in seq.split(19, 1):
        yield _seqan_kmer_encode(kmer, sigma)


def seqan_ibf_hash(value, seed, bin_size, hash_shift):
    if not isinstance(value, u64):
        raise ValueError('Seqan IBF hash expectes only u64')
    
    value *= seed
    value ^= value >> hash_shift  # XOR and shift higher bits into lower bits
    value *= 11400714819323198485u  # = 2^64 / golden_ration, to expand h to 64 bit range
    value = ((value.ext() * bin_size.ext()) >> 64).trunc()
    return int(value)


def query_ibf(ibf, kmer_encoding, ibf_hash_count, ibf_bin_size, bin_count, hash_shift):
    query_result = u64(-1)

    for i in range(ibf_hash_count):
        ibf_hash = seqan_ibf_hash(kmer_encoding, SEQAN_HASH_SEEDS[i], ibf_bin_size, hash_shift)
        query_result &= ibf[ibf_hash]
    
    return query_result >> (64 - bin_count)


def bulk_count(ibf, kmer_encodings, bin_count, ibf_hash_count, ibf_bin_size):
    hash_shift = _trailing_zeros(len(ibf))
    bin_queries = _transpose(
        [_bit_decompose(
            query_ibf(ibf, kmer_encoding, ibf_hash_count, ibf_bin_size, bin_count, hash_shift), bin_count) for kmer_encoding in kmer_encodings])
    
    return [sum(row) for row in bin_queries]


def load_ibf(ibf_path, bin_count):
        technical_bin_count = ((bin_count + 63) // 64) * 64
        bytes_per_bin = (bin_count + 7) // 8
        bytes_count = 0
        next_value = u64(0)
        ibf = []
        ibf_decomposed = []
        
        with open(ibf_path, 'rb') as f:
            while True:
                next_byte = f.read(1)
                
                if not next_byte:
                    break
                
                next_value <<= 8
                next_value |= ord(next_byte)
                bytes_count += 1
                
                if bytes_count == bytes_per_bin:
                    ibf.append(next_value)
                    ibf_decomposed.append(_bit_decompose(next_value, technical_bin_count))
                    bytes_count = 0
                    next_value = u64(0)

        return ibf, ibf_decomposed, technical_bin_count
