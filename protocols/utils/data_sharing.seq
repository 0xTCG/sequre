from param import PRIVATE_DATA, PRIVATE_DATA_PATH

from sequre.utils.utils import zeros
from sequre.utils.param import int_t
from sequre.types.utils import double_to_fp


def shares_paths(mpc, protocol, data_name, test_run):
    partitioned = PRIVATE_DATA[protocol][data_name][2]
    share_name = 'r' if partitioned else 'shares'
    path = PRIVATE_DATA_PATH[protocol]['test_path'] if test_run else PRIVATE_DATA_PATH[protocol]['path']
    return (f'{path}/{data_name}.txt',
            f'{path}/__{data_name}_{share_name}_{mpc.pid}.txt',
            f'{path}/__{data_name}_x_r.txt' if partitioned else '')


def read_matrix[TP](f: File, rows: int, cols: int, fp: bool, modulus: TP) -> list[list[TP]]:
    mat = list[list[TP]](rows)

    for _ in range(rows):
        row = list[TP](cols)
        for e in next(f).split()[:cols]:
            row.append(double_to_fp(float(e.strip()), modulus) if fp else TP(int(e.strip())))
        mat.append(row)

    return mat


def share_data[TP](mpc, protocol, data_name, data_params, test_run, modulus):
    input_path, output_path, partition_path = shares_paths(mpc, protocol, data_name, test_run)
    rows, cols, partitioned, fp = data_params
    
    with open(input_path) as f_i, open(output_path, 'w') as f_o:
        mat = read_matrix[TP](f_i, rows, cols, fp, modulus) if mpc.pid == 0 else zeros[TP](rows, cols)
        shared_mat = mpc.comms.share(mat, modulus)

        if partitioned:
            x_r, r = mpc.arithmetic.__beaver_partition(shared_mat, modulus)
            for row in r: f_o.write(' '.join([str(e) for e in row]) + '\n')
            if mpc.pid == 2:
                with open(partition_path, 'w') as f_p:
                    for row in x_r: f_p.write(' '.join([str(e) for e in row]) + '\n')
        else:
            for row in shared_mat: f_o.write(' '.join([str(e) for e in row]) + '\n')


def share_all_data[TP = int_t](mpc, test_run, modulus):
    print(f'Data sharing protocol initiated at CP{mpc.pid} ...')
    for protocol, input_data in PRIVATE_DATA.items():
        for data_name, data_params in input_data.items():
            print(f'Sharing {protocol}-{data_name} at CP{mpc.pid} ...')
            share_data[TP](mpc, protocol, data_name, data_params, test_run, modulus)
            mpc.comms.sync_parties()
            print(f'Shared {protocol}-{data_name} at CP{mpc.pid}')
    
    mpc.comms.sync_parties()
    print(f'Data sharing done at CP{mpc.pid}!')
