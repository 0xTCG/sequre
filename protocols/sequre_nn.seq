import random

from sequre.utils.param import \
    N_HIDDEN, FEATURE_RANK, N_CLASSES, N_NEURONS, \
    LOSS, REG, MOMENTUM, LEARN_RATE, NN_BATCH_SIZE, MAX_EPOCHS, \
    NN_DATA_PATH, N_FILE_BATCH, int_t
from sequre.utils.io import read_matrix
from sequre.utils.utils import zeros
from sequre.types.utils import fp_to_double
from sequre.types.shared_tensor import SharedTensor as Stensor, MODULUS
from sequre.attributes import sequre_beaver
from sequre.stdlib.internal import Internal as sq


def open_input_files(mpc, test_run):
    features_path = (f"tests/data/input/nn_features_{mpc.pid}.txt" if test_run else
                     f"{NN_DATA_PATH}/__features_{mpc.pid}.txt")
    labels_path = (f"tests/data/input/nn_labels_{mpc.pid}.txt" if test_run else
                   f"{NN_DATA_PATH}/__cov_labels_{mpc.pid}.txt")
    
    return open(features_path), open(labels_path)


def load_X_y(mpc, X_shape, y_shape, test_run):
    X = None
    y = None

    if mpc.pid == 0:
        X = Stensor(zeros(X_shape[0], X_shape[1]))
        y = Stensor(zeros(y_shape[0], y_shape[1]))
    else:
        fx, fy = open_input_files(mpc, test_run)
        X = Stensor(read_matrix[int_t](fx, X_shape[0], X_shape[1]))
        y = Stensor(read_matrix[int_t](fy, y_shape[0], y_shape[1]))
        fx.close()
        fy.close()

    X.fp = True
    y.fp = True
      
    return X, y


def initialize_model(mpc):
    W = []
    dW = []
    vW = []
    b = []
    db = []
    vb = []

    for l in range(N_HIDDEN + 1):
        if (N_HIDDEN == 0 and l >= 1):
            break
        
        W_layer_shape = (N_NEURONS, N_NEURONS)
        b_layer_len = N_NEURONS

        if (N_HIDDEN == 0 and l == 0):
            W_layer_shape = (FEATURE_RANK, N_CLASSES - 1)
            b_layer_len = N_CLASSES - 1
        elif (l == 0):
            W_layer_shape = (FEATURE_RANK, N_NEURONS)
        elif (l == N_HIDDEN):
            W_layer_shape = (N_NEURONS, N_CLASSES - 1)
            b_layer_len = N_CLASSES - 1
            
        W_layer = sq.dist(mpc, W_layer_shape, 'normal', (0.0, 0.01))
        b_layer = Stensor.zeros(b_layer_len)
        b_layer.fp = True
        
        dW_layer = W_layer.zeros()
        vW_layer = W_layer.zeros()
    
        db_layer = b_layer.zeros()
        vb_layer = b_layer.zeros()

        W.append(W_layer)
        dW.append(dW_layer)
        vW.append(vW_layer)
        b.append(b_layer)
        db.append(db_layer)
        vb.append(vb_layer)
     
    return W, dW, vW, b, db, vb


@sequre_beaver
def gradient_descent(mpc, X, y, W, b, dW, db, vW, vb):
    act = []
    relus = []
    
    # Forward pass
    for l in range(N_HIDDEN):
        activation = sq.matmul(mpc, (X if l == 0 else act[l - 1]), W[l]) + b[l]
        # Apply ReLU non-linearity
        relu = activation > 0
        after_relu = activation * relu

        # TODO: #110 Implement dropout.

        act.append(after_relu)
        relus.append(relu)

    # Calculate scores and add bias term
    scores = sq.matmul(mpc, (X if N_HIDDEN == 0 else act[-1]), W[-1]) + b[-1]

    dscores = y.zeros()
    if (LOSS == "hinge"):
        y = y * 2 - 1
        dscores = y * ((1 - y * scores) > 0)
    else:
        dscores = scores - y
    dscores = dscores / len(X)

    # Back propagation
    dhidden = dscores
    for l in range(N_HIDDEN, -1, -1):
        # Compute derivative of weights
        dW[l] = sq.matmul(mpc, X.T if l == 0 else act.pop().T, dhidden)
        # Add regularization term to weights
        if REG != 0.0: dW[l] = dW[l] + W[l] * REG
        # Compute derivative of biases
        db[l] = dhidden.sum()
        # Compute backpropagated activations and apply derivative of ReLU
        if l > 0: dhidden = sq.matmul(mpc, dhidden, W[l].T) * relus.pop()

    assert len(act) == 0
    assert len(relus) == 0

    # Update the model using Nesterov momentum
    # Compute constants that update various parameters
    for l in range(N_HIDDEN + 1):
        # Update the weights
        vW_prev = vW[l].copy()
        vW[l] = vW[l] * MOMENTUM - dW[l] * LEARN_RATE
        # TODO: #117 Implement clever joint truncations pattern matcher
        # vW[l] = vW[l].trunc(mpc.fp, MODULUS)
        # temp = vW[l] * (MOMENTUM + 1) - vW_prev * MOMENTUM
        # temp = temp.trunc(mpc.fp, MODULUS)
        # W[l] = W[l] + temp
        W[l] = W[l] + vW[l] * (MOMENTUM + 1) - vW_prev * MOMENTUM
        # Update the biases
        vb_prev = vb[l].copy()
        vb[l] = vb[l] * MOMENTUM - db[l] * LEARN_RATE
        # TODO: #117 Implement clever joint truncations pattern matcher
        # vb[l] = vb[l].trunc(mpc.fp, MODULUS)
        # temp_v = vb[l] * (MOMENTUM + 1) - vb_prev * MOMENTUM
        # temp_v = temp_v.trunc(mpc.fp, MODULUS)
        # b[l] = b[l] + temp_v
        b[l] = b[l] + vb[l] * (MOMENTUM + 1) - vb_prev * MOMENTUM


def train_model(mpc, X, y, W, b, dW, db, vW, vb):    
    # Round down number of batches in file
    batches_in_file = len(X) // NN_BATCH_SIZE
    epoch = 0

    while True:
        # TODO: #113 Fix the shuffle bug
        for i in range(batches_in_file):
            X_batch = X[i * NN_BATCH_SIZE : (i + 1) * NN_BATCH_SIZE]
            y_batch = y[i * NN_BATCH_SIZE : (i + 1) * NN_BATCH_SIZE]
            
            # Do one round of mini-batch gradient descent
            if mpc.pid == 2: print(f"Epoch: {epoch}/{MAX_EPOCHS}")
            gradient_descent(
                mpc, X_batch, y_batch,
                W, b, dW, db, vW, vb)

            # Update reference to training epoch
            epoch += 1
            if epoch >= MAX_EPOCHS: return
    

def neural_net_protocol(mpc, test_run):
    if test_run: random.seed(0)
    # Initialize model and data structures
    print(f"Initializing model at CP{mpc.pid}...")
    W, dW, vW, b, db, vb = initialize_model(mpc)

    # Initialize data matrices
    X, y = load_X_y(mpc, [N_FILE_BATCH, FEATURE_RANK], [N_FILE_BATCH, N_CLASSES - 1], test_run)
    # Do gradient descent over multiple training epochs
    train_model(mpc, X, y, W, b, dW, db, vW, vb)

    if mpc.pid > 0 and not test_run:
        for l in range(N_HIDDEN + 1):
            with open(f'data/nn_models/__W{l}_P{mpc.pid}.txt', 'w') as fw, \
                 open(f'data/nn_models/__b{l}_P{mpc.pid}.txt', 'w') as fb:
                W_out_revealed = mpc.comms.reveal(W[l].share, MODULUS)
                W_out = fp_to_double(W_out_revealed, MODULUS)
                fw.write(f'{W_out}\n')
                b_out_revealed = mpc.comms.reveal(b[l].share, MODULUS)
                b_out = fp_to_double(b_out_revealed, MODULUS)
                fb.write(f'{b_out}\n')
    
    return W[-1]
