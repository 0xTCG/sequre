from sequre.attributes import *
from sequre.stdlib.internal import Internal as sq


@sequre_beaver
def mult3(mpc, a, b, c):
    """
    Hastings et al. mult3 benchmark expanded to series of additions and multiplications.
    """
    return a * b + b * c + a * c


@sequre_beaver
def innerprod(mpc, a, b):
    """
    Hastings et al. innerprod benchmark.
    """
    return sq.dot(mpc, a, b)


@sequre_beaver
def xtabs(mpc, a, b, c, d):
    """
    Hastings et al. xtabs benchmark.
    """
    
    val = a.zeros()
    d.get_partitions(mpc)

    for i in range(10):
        for j in range(10):
            same_id = (a[i] == c[j])
            for k in range(1, 6):
                same_bin = (b[i] == k)
                val[k] += (same_id * same_bin * d[j])

    return val


@sequre_beaver
def playground(mpc, a, b, c, d, e, f, g, h):
    """
    Input params are hardcoded to:
        a = SharedTensor[list[int_t]](mpc.comms.share([int_t(i) for i in range(10)], modulus), modulus)
        b = SharedTensor[list[int_t]](mpc.comms.share(
            [int_t(1), int_t(2), int_t(1), int_t(2), int_t(3),
             int_t(4), int_t(3), int_t(4), int_t(1), int_t(5)], modulus), modulus)
        c = SharedTensor[list[int_t]](mpc.comms.share([int_t(i) for i in range(10)], modulus), modulus)
        d = SharedTensor[list[int_t]](mpc.comms.share(
            [int_t(1), int_t(2), int_t(1), int_t(2), int_t(3),
             int_t(4), int_t(3), int_t(4), int_t(1), int_t(5)], modulus), modulus)
        e = SharedTensor[list[int_t]](mpc.comms.share([int_t(i) for i in range(100000)], modulus), modulus)
        f = SharedTensor[int_t](mpc.comms.share(int_t(7), modulus), modulus)
        g = SharedTensor[int_t](mpc.comms.share(int_t(13), modulus), modulus)
        h = SharedTensor[int_t](mpc.comms.share(int_t(19), modulus), modulus)
    """
    # mult3(mpc, f, g, h)
    # innerprod(mpc, e, e)
    xtabs(mpc, a, b, c, d)

    return a  # Playground is temporarily expected to return SharedTensor[list[int_t]]
