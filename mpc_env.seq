# import sys
# import time
# import random
# import math

# from functools import partial, reduce
# from copy import deepcopy

# import numpy as np

import utils.param as param

from mpc_comms import MPCComms
from mpc_prg import MPCPRG
from mpc_arithmetic import MPCArithmetic
from mpc_polynomial import MPCPolynomial
from mpc_boolean import MPCBoolean
from mpc_fp import MPCFP
# from mpc.lin_alg import LinAlg
# from network.c_socket import CSocket
# from network.connect import connect, open_channel
# from utils.type_ops import TypeOps
# from utils.utils import bytes_to_arr, rand_int, random_ndarray


class MPCEnv[TP]:
    pid: int
    primes: dict[int, TP]
    comms: MPCComms[TP]
    prg: MPCPRG
    arithmetic: MPCArithmetic[TP]
    polynomial: MPCPolynomial[TP]
    boolean: MPCBoolean[TP]
    fp: MPCFP[TP]

    def __init__(self: MPCEnv[TP], pid: int):
        self.pid = pid
        self.primes = {0: param.BASE_P, 1: 31, 2: 17}  # Temp hardcoded. Needs to be calcualted on init.

        self.comms = MPCComms[TP](self.pid)
        self.prg = MPCPRG(self.pid)
        self.arithmetic = MPCArithmetic[TP](
            pid=self.pid,
            prg=self.prg,
            comms=self.comms)
        self.polynomial = MPCPolynomial[TP](
            pid=self.pid,
            primes=self.primes,
            prg=self.prg,
            comms=self.comms,
            arithmetic=self.arithmetic)
        self.boolean = MPCBoolean[TP](
            pid=self.pid,
            prg=self.prg,
            comms=self.comms,
            arithmetic=self.arithmetic,
            polynomial=self.polynomial)
        self.fp = MPCFP(
            pid=self.pid,
            primes=self.primes,
            prg=self.prg,
            comms=self.comms,
            arithmetic=self.arithmetic,
            polynomial=self.polynomial,
            boolean=self.boolean)
        # self.lin_alg = LinAlg(
        #     pid=self.pid,
        #     primes=self.primes,
        #     arithmetic=self.arithmetic,
        #     boolean=self.boolean,
        #     fp=self.fp)
