# import sys
# import time
# import random
# import math

# from functools import partial, reduce
# from copy import deepcopy

# import numpy as np

import utils.param as param

# from mpc.prg import PRG
from mpc_comms import MPCComms
# from mpc.arithmetic import Arithmetic
# from mpc.polynomial import Polynomial
# from mpc.boolean import Boolean
# from mpc.fp import FP
# from mpc.lin_alg import LinAlg
# from network.c_socket import CSocket
# from network.connect import connect, open_channel
from utils.custom_types import size_u
# from utils.type_ops import TypeOps
# from utils.utils import bytes_to_arr, rand_int, random_ndarray


class MPCEnv[T]:
    primes: dict[size_u, T]
    pid: int
    comms: MPCComms

    def __init__(self: MPCEnv, pid: int):
        self.primes = {0: param.BASE_P, 1: 31, 2: 17}  # Temp hardcoded. Needs to be calcualted on init.

        self.pid = pid
        self.comms = MPCComms(self.pid)
        # self.prg = PRG(self.pid)
        # self.arithmetic = Arithmetic(
        #     pid=self.pid,
        #     prg=self.prg,
        #     comms=self.comms)
        # self.polynomial = Polynomial(
        #     pid=self.pid,
        #     primes=self.primes,
        #     prg=self.prg,
        #     comms=self.comms,
        #     arithmetic=self.arithmetic)
        # self.boolean = Boolean(
        #     pid=self.pid,
        #     prg=self.prg,
        #     comms=self.comms,
        #     arithmetic=self.arithmetic,
        #     polynomial=self.polynomial)
        # self.fp = FP(
        #     pid=self.pid,
        #     primes=self.primes,
        #     prg=self.prg,
        #     comms=self.comms,
        #     arithmetic=self.arithmetic,
        #     polynomial=self.polynomial,
        #     boolean=self.boolean)
        # self.lin_alg = LinAlg(
        #     pid=self.pid,
        #     primes=self.primes,
        #     arithmetic=self.arithmetic,
        #     boolean=self.boolean,
        #     fp=self.fp)
