""" Module containing microbenchmarks from Hastings et al. """
from sequre import sequre, local, Sharetensor as Stensor


@sequre
def mult3(mpc, a, b, c):
    """
    Hastings et al. mult3 benchmark expanded to series of additions and multiplications.
    """
    return a * b + b * c + a * c


@sequre
def innerprod(mpc, a, b):
    """
    Hastings et al. innerprod benchmark.
    """
    return a.dot(mpc, b, axis=0)


@sequre
def xtabs(mpc, a, b, c, d):
    """
    Hastings et al. xtabs benchmark.
    """
    
    d.get_partitions(mpc)
    cats = Stensor.range(1, 6, a.modulus)
    val = Stensor.zeros(5, a.modulus)
    broadcasted_b = b.expand_values(5).T

    for i in range(10):
        same_bin = cats == broadcasted_b[i]
        for j in range(10):
            val += (same_bin * (a[i] == c[j]) * d[j])

    return val


def run_all(mpc, xtabs_a, xtabs_b, innerprod_c, mult3_d, mult3_e, mult3_f):
    print(f"CP{mpc.pid}:\tmult3: {mult3(mpc, mult3_d, mult3_e, mult3_f).reveal(mpc)}")
    print(f"CP{mpc.pid}:\tinnerprod: {innerprod(mpc, innerprod_c, innerprod_c).reveal(mpc)}")
    print(f"CP{mpc.pid}:\txtabs: {xtabs(mpc, xtabs_a, xtabs_b, xtabs_a, xtabs_b).reveal(mpc)}")
