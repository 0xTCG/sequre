from sequre import sequre, pool_shares
from sequre import dot, zeros_like

mpc, (features, labels) = pool_shares()

@sequre
def lsvm(mpc, X, Y, eta, epochs, l2):
    w = zeros_like(X[0]) + 1
    b = zeros_like(Y[0]) + 1

    for i in range(epochs):
        print(f'Epoch: {i + 1}/{epochs}')
        for feature_vector, label in zip(X, Y):
            z = dot(mpc, feature_vector, w) - b
            # Backward pass
            grad_b = label * ((1 - z * label) > 0)
            grad_w = w * l2 * 2 - feature_vector * grad_b
            w = w - grad_w * eta
            b = b - grad_b * eta
        
    return w, b

print("Training the linear SVM.") 

weights, bias = lsvm(mpc, features, labels.flatten(), eta=0.01, epochs=10, l2=0.01)
print(f"First 10 weights at CP{mpc.pid}: {weights[:10].print(mpc)}")
mpc.done()
